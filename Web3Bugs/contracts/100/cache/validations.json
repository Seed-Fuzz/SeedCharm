{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "d51be5f44f450a55ff236777a6af78457a45c8d5e29e8f819c7e20bf58490e7b",
          "withoutMetadata": "7490b6d70a78b52c469918b859499b7914e1551b3aaa8340473ad1645c9e13ba",
          "linkedWithoutMetadata": "7490b6d70a78b52c469918b859499b7914e1551b3aaa8340473ad1645c9e13ba"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "1924d3b01b4525dfa23f570a4051774d97e34365da46a1b8055cf84c7142dcf8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b11f1aa455fd7320d99112148d1398ac28793b0f3821a182d94260cd7869db7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MulticallUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol:14",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MulticallUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol:45"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "01b991ad13176d19f3eba4d8f219443f0b18f73cd8fa95596da1767a6f2b9791",
          "withoutMetadata": "d5979f098cf95020ecf9936d29a95d8571a9326ae74f1b06a24be1c895e04452",
          "linkedWithoutMetadata": "d5979f098cf95020ecf9936d29a95d8571a9326ae74f1b06a24be1c895e04452"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "cdd7f27c3fdb62404c50d7e51dc39708dbc27f27758ada37ca0c6442f9660470",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c5eb9d4703041e1d1a6616490f67a102de448265f33ff93b86d248ad724784b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:15",
        "version": {
          "withMetadata": "25980dd3f61151d9a389ebeacba9b5d295485c95bf02e13c01813b9e3b263809",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountAccessController": {
        "src": "contracts/core/AccountAccessController.sol:8",
        "version": {
          "withMetadata": "49aad8593ff701db3d3212f8aa7e6442a2fcef0af928d6e300045f311cfaed32",
          "withoutMetadata": "c1c20088b1f102f4bff2d4d188661cc43207d638be1871e8a76e3b4cee158667",
          "linkedWithoutMetadata": "c1c20088b1f102f4bff2d4d188661cc43207d638be1871e8a76e3b4cee158667"
        },
        "inherit": [
          "IAccountAccessController",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "MerkleProof"
        ],
        "methods": [
          "()",
          "setRoot(bytes32)",
          "clearAllowedAccounts()",
          "setRootAndClearAllowedAccounts(bytes32)",
          "clearBlockedAccounts()",
          "allowAccounts(address[])",
          "blockAccounts(address[])",
          "allowSelf(bytes32[])",
          "getRoot()",
          "isAccountAllowed(address)",
          "isAccountBlocked(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccountAccessController",
              "label": "_root",
              "type": "t_bytes32",
              "src": "contracts/core/AccountAccessController.sol:9"
            },
            {
              "contract": "AccountAccessController",
              "label": "_allowedAccountsIndex",
              "type": "t_uint16",
              "src": "contracts/core/AccountAccessController.sol:10"
            },
            {
              "contract": "AccountAccessController",
              "label": "_blockedAccountsIndex",
              "type": "t_uint16",
              "src": "contracts/core/AccountAccessController.sol:11"
            },
            {
              "contract": "AccountAccessController",
              "label": "_allowedAccounts",
              "type": "t_mapping(t_uint16,t_mapping(t_address,t_bool))",
              "src": "contracts/core/AccountAccessController.sol:12"
            },
            {
              "contract": "AccountAccessController",
              "label": "_blockedAccounts",
              "type": "t_mapping(t_uint16,t_mapping(t_address,t_bool))",
              "src": "contracts/core/AccountAccessController.sol:13"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_uint16,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint16 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Collateral": {
        "src": "contracts/core/Collateral.sol:13",
        "version": {
          "withMetadata": "bb455b5d6b0882a46619ec255f844b68f4666615e1df417282419e487372feb1",
          "withoutMetadata": "7515812adcce60f7292dcac1185379a61c8c6b64f5ccc588554f0137eaa8493e",
          "linkedWithoutMetadata": "7515812adcce60f7292dcac1185379a61c8c6b64f5ccc588554f0137eaa8493e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "ICollateral",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "deposit(uint256)",
          "initiateWithdrawal(uint256)",
          "uninitiateWithdrawal()",
          "withdraw(uint256)",
          "setDepositsAllowed(bool)",
          "setWithdrawalsAllowed(bool)",
          "setStrategyController(address)",
          "setDelayedWithdrawalExpiry(uint256)",
          "setMintingFee(uint256)",
          "setRedemptionFee(uint256)",
          "setDepositHook(address)",
          "setWithdrawHook(address)",
          "getDepositsAllowed()",
          "getWithdrawalsAllowed()",
          "getTreasury()",
          "getMintingFee()",
          "getRedemptionFee()",
          "getBaseToken()",
          "getStrategyController()",
          "getDelayedWithdrawalExpiry()",
          "getWithdrawalRequest(address)",
          "getDepositHook()",
          "getWithdrawHook()",
          "getAmountForShares(uint256)",
          "getSharesForAmount(uint256)",
          "getFeeDenominator()",
          "getFeeLimit()",
          "totalAssets()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Collateral",
              "label": "_depositsAllowed",
              "type": "t_bool",
              "src": "contracts/core/Collateral.sol:21"
            },
            {
              "contract": "Collateral",
              "label": "_withdrawalsAllowed",
              "type": "t_bool",
              "src": "contracts/core/Collateral.sol:22"
            },
            {
              "contract": "Collateral",
              "label": "_treasury",
              "type": "t_address",
              "src": "contracts/core/Collateral.sol:23"
            },
            {
              "contract": "Collateral",
              "label": "_mintingFee",
              "type": "t_uint256",
              "src": "contracts/core/Collateral.sol:24"
            },
            {
              "contract": "Collateral",
              "label": "_redemptionFee",
              "type": "t_uint256",
              "src": "contracts/core/Collateral.sol:25"
            },
            {
              "contract": "Collateral",
              "label": "_baseToken",
              "type": "t_contract(IERC20Upgradeable)880",
              "src": "contracts/core/Collateral.sol:26"
            },
            {
              "contract": "Collateral",
              "label": "_strategyController",
              "type": "t_contract(IStrategyController)6815",
              "src": "contracts/core/Collateral.sol:27"
            },
            {
              "contract": "Collateral",
              "label": "_delayedWithdrawalExpiry",
              "type": "t_uint256",
              "src": "contracts/core/Collateral.sol:29"
            },
            {
              "contract": "Collateral",
              "label": "_accountToWithdrawalRequest",
              "type": "t_mapping(t_address,t_struct(WithdrawalRequest)6046_storage)",
              "src": "contracts/core/Collateral.sol:30"
            },
            {
              "contract": "Collateral",
              "label": "_depositHook",
              "type": "t_contract(IHook)6392",
              "src": "contracts/core/Collateral.sol:32"
            },
            {
              "contract": "Collateral",
              "label": "_withdrawHook",
              "type": "t_contract(IHook)6392",
              "src": "contracts/core/Collateral.sol:33"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20Upgradeable)880": {
              "label": "contract IERC20Upgradeable"
            },
            "t_contract(IStrategyController)6815": {
              "label": "contract IStrategyController"
            },
            "t_mapping(t_address,t_struct(WithdrawalRequest)6046_storage)": {
              "label": "mapping(address => struct ICollateral.WithdrawalRequest)"
            },
            "t_struct(WithdrawalRequest)6046_storage": {
              "label": "struct ICollateral.WithdrawalRequest",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IHook)6392": {
              "label": "contract IHook"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CollateralDepositRecord": {
        "src": "contracts/core/CollateralDepositRecord.sol:7",
        "version": {
          "withMetadata": "b73c7a8ad0d0ef57c8f9db59aa9560311e13ffac98d9b85188a73423788f36c4",
          "withoutMetadata": "8e61ac21936fcfa6ea422456b2a3185f5668057e5f38266f7f03cdca5ceecc4e",
          "linkedWithoutMetadata": "8e61ac21936fcfa6ea422456b2a3185f5668057e5f38266f7f03cdca5ceecc4e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ICollateralDepositRecord"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "recordDeposit(address,uint256)",
          "recordWithdrawal(address,uint256)",
          "setGlobalDepositCap(uint256)",
          "setAccountDepositCap(uint256)",
          "setAllowedHook(address,bool)",
          "getGlobalDepositCap()",
          "getGlobalDepositAmount()",
          "getAccountDepositCap()",
          "getNetDeposit(address)",
          "isHookAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CollateralDepositRecord",
            "src": "contracts/core/CollateralDepositRecord.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CollateralDepositRecord",
              "label": "_globalDepositCap",
              "type": "t_uint256",
              "src": "contracts/core/CollateralDepositRecord.sol:8"
            },
            {
              "contract": "CollateralDepositRecord",
              "label": "_globalDepositAmount",
              "type": "t_uint256",
              "src": "contracts/core/CollateralDepositRecord.sol:9"
            },
            {
              "contract": "CollateralDepositRecord",
              "label": "_accountDepositCap",
              "type": "t_uint256",
              "src": "contracts/core/CollateralDepositRecord.sol:10"
            },
            {
              "contract": "CollateralDepositRecord",
              "label": "_accountToNetDeposit",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/CollateralDepositRecord.sol:11"
            },
            {
              "contract": "CollateralDepositRecord",
              "label": "_allowedHooks",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/core/CollateralDepositRecord.sol:12"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DepositHook": {
        "src": "contracts/core/DepositHook.sol:9",
        "version": {
          "withMetadata": "873dcc1ce70c7ea2923a3fe7e830bee12e7407bd65ab5585292f29f42399acf6",
          "withoutMetadata": "ea24d3150b94f60d39ce17761bbb1ba46c076c78923e73bc0f2c4e8968d6d99e",
          "linkedWithoutMetadata": "ea24d3150b94f60d39ce17761bbb1ba46c076c78923e73bc0f2c4e8968d6d99e"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IHook"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "hook(address,uint256,uint256)",
          "setVault(address)",
          "getVault()",
          "getAccountAccessController()",
          "getDepositRecord()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DepositHook",
            "src": "contracts/core/DepositHook.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DepositHook",
              "label": "_vault",
              "type": "t_address",
              "src": "contracts/core/DepositHook.sol:10"
            },
            {
              "contract": "DepositHook",
              "label": "_accountAccessController",
              "type": "t_contract(IAccountAccessController)6033",
              "src": "contracts/core/DepositHook.sol:11"
            },
            {
              "contract": "DepositHook",
              "label": "_depositRecord",
              "type": "t_contract(ICollateralDepositRecord)6367",
              "src": "contracts/core/DepositHook.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IAccountAccessController)6033": {
              "label": "contract IAccountAccessController"
            },
            "t_contract(ICollateralDepositRecord)6367": {
              "label": "contract ICollateralDepositRecord"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LongShortToken": {
        "src": "contracts/core/LongShortToken.sol:8",
        "version": {
          "withMetadata": "29617c6429ced19361944f8462f47f34dc1a5c2f4d89aa5dd70dae5919c30821",
          "withoutMetadata": "ee56409bf79fb45e5ad15b0d6f70b79cb2cd547294dda2fa5de3ee6ed262e40b",
          "linkedWithoutMetadata": "ee56409bf79fb45e5ad15b0d6f70b79cb2cd547294dda2fa5de3ee6ed262e40b"
        },
        "inherit": [
          "Ownable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LongShortToken",
            "src": "contracts/core/LongShortToken.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PrePOMarket": {
        "src": "contracts/core/PrePOMarket.sol:10",
        "version": {
          "withMetadata": "55c67a7fb053d3ee15af9ee49e6d672de093191ccb61a312395948edcbe4de4b",
          "withoutMetadata": "2ecee58d7ee08ef8bf5c4504869dd638eac7e89cd9e0eccde606415d8deb92df",
          "linkedWithoutMetadata": "2ecee58d7ee08ef8bf5c4504869dd638eac7e89cd9e0eccde606415d8deb92df"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "IPrePOMarket"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
          "mintLongShortTokens(uint256)",
          "redeem(uint256,uint256)",
          "setTreasury(address)",
          "setFinalLongPrice(uint256)",
          "setMintingFee(uint256)",
          "setRedemptionFee(uint256)",
          "setPublicMinting(bool)",
          "getTreasury()",
          "getCollateral()",
          "getLongToken()",
          "getShortToken()",
          "getFloorLongPrice()",
          "getCeilingLongPrice()",
          "getFinalLongPrice()",
          "getFloorValuation()",
          "getCeilingValuation()",
          "getMintingFee()",
          "getRedemptionFee()",
          "getExpiryTime()",
          "isPublicMintingAllowed()",
          "getMaxPrice()",
          "getFeeDenominator()",
          "getFeeLimit()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrePOMarket",
            "src": "contracts/core/PrePOMarket.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_collateral",
            "src": "contracts/core/PrePOMarket.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_longToken",
            "src": "contracts/core/PrePOMarket.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_shortToken",
            "src": "contracts/core/PrePOMarket.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_floorLongPrice",
            "src": "contracts/core/PrePOMarket.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_ceilingLongPrice",
            "src": "contracts/core/PrePOMarket.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_floorValuation",
            "src": "contracts/core/PrePOMarket.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_ceilingValuation",
            "src": "contracts/core/PrePOMarket.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_expiryTime",
            "src": "contracts/core/PrePOMarket.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrePOMarket",
              "label": "_treasury",
              "type": "t_address",
              "src": "contracts/core/PrePOMarket.sol:11"
            },
            {
              "contract": "PrePOMarket",
              "label": "_finalLongPrice",
              "type": "t_uint256",
              "src": "contracts/core/PrePOMarket.sol:19"
            },
            {
              "contract": "PrePOMarket",
              "label": "_mintingFee",
              "type": "t_uint256",
              "src": "contracts/core/PrePOMarket.sol:24"
            },
            {
              "contract": "PrePOMarket",
              "label": "_redemptionFee",
              "type": "t_uint256",
              "src": "contracts/core/PrePOMarket.sol:25"
            },
            {
              "contract": "PrePOMarket",
              "label": "_publicMinting",
              "type": "t_bool",
              "src": "contracts/core/PrePOMarket.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrePOMarketFactory": {
        "src": "contracts/core/PrePOMarketFactory.sol:12",
        "version": {
          "withMetadata": "0635325a6808f499c6b2155a09bd47189b42f520eb39310b2688ea1f49ed1139",
          "withoutMetadata": "1bfc33c74eb67d5ecfd851fb04a6c97650db33f581d3b9e9dab1c03505105382",
          "linkedWithoutMetadata": "1bfc33c74eb67d5ecfd851fb04a6c97650db33f581d3b9e9dab1c03505105382"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPrePOMarketFactory"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "isCollateralValid(address)",
          "getMarket(bytes32)",
          "createMarket(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "setCollateralValidity(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PrePOMarketFactory",
              "label": "_validCollateral",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/core/PrePOMarketFactory.sol:17"
            },
            {
              "contract": "PrePOMarketFactory",
              "label": "_deployedMarkets",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/core/PrePOMarketFactory.sol:18"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SingleStrategyController": {
        "src": "contracts/core/SingleStrategyController.sol:10",
        "version": {
          "withMetadata": "674c9ac9b3963e13d07704377d2818dfa60ea57128e7e9cd690717a383619a52",
          "withoutMetadata": "d7952b2ebc4f8fa55572de25491a8be87977168eed022c0db11623d6d308b1cd",
          "linkedWithoutMetadata": "d7952b2ebc4f8fa55572de25491a8be87977168eed022c0db11623d6d308b1cd"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "IStrategyController"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(address,uint256)",
          "migrate(address)",
          "setVault(address)",
          "totalValue()",
          "getVault()",
          "getStrategy()",
          "getBaseToken()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SingleStrategyController",
            "src": "contracts/core/SingleStrategyController.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_baseToken",
            "src": "contracts/core/SingleStrategyController.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SingleStrategyController",
              "label": "_vault",
              "type": "t_address",
              "src": "contracts/core/SingleStrategyController.sol:17"
            },
            {
              "contract": "SingleStrategyController",
              "label": "_strategy",
              "type": "t_contract(IStrategy)6742",
              "src": "contracts/core/SingleStrategyController.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IStrategy)6742": {
              "label": "contract IStrategy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WithdrawHook": {
        "src": "contracts/core/WithdrawHook.sol:8",
        "version": {
          "withMetadata": "e64844712f32a119fac5d118fea9943da6f1682a738dbd2b920531e9b617eb8b",
          "withoutMetadata": "9e5e0a5560ff47f79771c46a501c3243a1bd657d7887f8aa77905a67ca411c6f",
          "linkedWithoutMetadata": "9e5e0a5560ff47f79771c46a501c3243a1bd657d7887f8aa77905a67ca411c6f"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IHook"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "hook(address,uint256,uint256)",
          "setVault(address)",
          "getVault()",
          "getDepositRecord()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawHook",
            "src": "contracts/core/WithdrawHook.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WithdrawHook",
              "label": "_vault",
              "type": "t_address",
              "src": "contracts/core/WithdrawHook.sol:9"
            },
            {
              "contract": "WithdrawHook",
              "label": "_depositRecord",
              "type": "t_contract(ICollateralDepositRecord)6367",
              "src": "contracts/core/WithdrawHook.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateralDepositRecord)6367": {
              "label": "contract ICollateralDepositRecord"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccountAccessController": {
        "src": "contracts/core/interfaces/IAccountAccessController.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRoot(bytes32)",
          "clearAllowedAccounts()",
          "setRootAndClearAllowedAccounts(bytes32)",
          "clearBlockedAccounts()",
          "allowAccounts(address[])",
          "blockAccounts(address[])",
          "allowSelf(bytes32[])",
          "getRoot()",
          "isAccountAllowed(address)",
          "isAccountBlocked(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/core/interfaces/ICollateral.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "initiateWithdrawal(uint256)",
          "uninitiateWithdrawal()",
          "withdraw(uint256)",
          "setDepositsAllowed(bool)",
          "setWithdrawalsAllowed(bool)",
          "setStrategyController(address)",
          "setDelayedWithdrawalExpiry(uint256)",
          "setMintingFee(uint256)",
          "setRedemptionFee(uint256)",
          "setDepositHook(address)",
          "setWithdrawHook(address)",
          "getDepositsAllowed()",
          "getWithdrawalsAllowed()",
          "getTreasury()",
          "getMintingFee()",
          "getRedemptionFee()",
          "getBaseToken()",
          "getStrategyController()",
          "getDelayedWithdrawalExpiry()",
          "getWithdrawalRequest(address)",
          "getDepositHook()",
          "getWithdrawHook()",
          "getAmountForShares(uint256)",
          "getSharesForAmount(uint256)",
          "totalAssets()",
          "getFeeDenominator()",
          "getFeeLimit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateralDepositRecord": {
        "src": "contracts/core/interfaces/ICollateralDepositRecord.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "recordDeposit(address,uint256)",
          "recordWithdrawal(address,uint256)",
          "setGlobalDepositCap(uint256)",
          "setAccountDepositCap(uint256)",
          "setAllowedHook(address,bool)",
          "getGlobalDepositCap()",
          "getGlobalDepositAmount()",
          "getAccountDepositCap()",
          "getNetDeposit(address)",
          "isHookAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHook": {
        "src": "contracts/core/interfaces/IHook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hook(address,uint256,uint256)",
          "setVault(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILongShortToken": {
        "src": "contracts/core/interfaces/ILongShortToken.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "mint(address,uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrePOMarket": {
        "src": "contracts/core/interfaces/IPrePOMarket.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintLongShortTokens(uint256)",
          "redeem(uint256,uint256)",
          "setTreasury(address)",
          "setFinalLongPrice(uint256)",
          "setMintingFee(uint256)",
          "setRedemptionFee(uint256)",
          "setPublicMinting(bool)",
          "getTreasury()",
          "getCollateral()",
          "getLongToken()",
          "getShortToken()",
          "getFloorLongPrice()",
          "getCeilingLongPrice()",
          "getFinalLongPrice()",
          "getFloorValuation()",
          "getCeilingValuation()",
          "getMintingFee()",
          "getRedemptionFee()",
          "getExpiryTime()",
          "isPublicMintingAllowed()",
          "getMaxPrice()",
          "getFeeDenominator()",
          "getFeeLimit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrePOMarketFactory": {
        "src": "contracts/core/interfaces/IPrePOMarketFactory.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createMarket(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "setCollateralValidity(address,bool)",
          "isCollateralValid(address)",
          "getMarket(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "withdraw(address,uint256)",
          "totalValue()",
          "getController()",
          "getBaseToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStrategyController": {
        "src": "contracts/core/interfaces/IStrategyController.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "withdraw(address,uint256)",
          "migrate(address)",
          "setVault(address)",
          "totalValue()",
          "getVault()",
          "getBaseToken()",
          "getStrategy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockAccountAccessController": {
        "src": "contracts/core/mocks/MockAccountAccessController.sol:6",
        "version": {
          "withMetadata": "09c8dab79fad7eaad08655fad7825e29c09898e8a2b579a6160a74c2e2dd7413",
          "withoutMetadata": "4c14cd194e159826b87b5c4a0ac2522e784bc590c7a3b26fa44f72b94b3cefba",
          "linkedWithoutMetadata": "4c14cd194e159826b87b5c4a0ac2522e784bc590c7a3b26fa44f72b94b3cefba"
        },
        "inherit": [
          "AccountAccessController",
          "IAccountAccessController",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "getAllowedAccountsIndex()",
          "getBlockedAccountsIndex()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/core/mocks/MockERC20.sol:7",
        "version": {
          "withMetadata": "91b3066dd2ec7a5dd69a1329db3bcbfd7da4ca23cc2c5c047cdef2ff9d2e39ec",
          "withoutMetadata": "f62b4c65579295d050c5e1e6fce5d4dd44d2a44b18f42db039debfcbdb6830b1",
          "linkedWithoutMetadata": "f62b4c65579295d050c5e1e6fce5d4dd44d2a44b18f42db039debfcbdb6830b1"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/core/mocks/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockStrategy": {
        "src": "contracts/core/mocks/MockStrategy.sol:12",
        "version": {
          "withMetadata": "56d2666247f37e4e334fb128066832671d7f030e75a7796a937929e519087656",
          "withoutMetadata": "165edfa0ed0eed3aa458d717a3690c73bad0ece401fce3c6f7aa26fafc827a21",
          "linkedWithoutMetadata": "165edfa0ed0eed3aa458d717a3690c73bad0ece401fce3c6f7aa26fafc827a21"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "IStrategy"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address)",
          "deposit(uint256)",
          "withdraw(address,uint256)",
          "setVault(address)",
          "setBeginning(uint256)",
          "setApy(uint256)",
          "totalValue()",
          "getController()",
          "getBaseToken()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockStrategy",
            "src": "contracts/core/mocks/MockStrategy.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockStrategy",
              "label": "_controller",
              "type": "t_contract(IStrategyController)6815",
              "src": "contracts/core/mocks/MockStrategy.sol:15"
            },
            {
              "contract": "MockStrategy",
              "label": "_baseToken",
              "type": "t_contract(ILongShortToken)6421",
              "src": "contracts/core/mocks/MockStrategy.sol:21"
            },
            {
              "contract": "MockStrategy",
              "label": "vault",
              "type": "t_contract(IERC20)2298",
              "src": "contracts/core/mocks/MockStrategy.sol:28"
            },
            {
              "contract": "MockStrategy",
              "label": "beginning",
              "type": "t_uint256",
              "src": "contracts/core/mocks/MockStrategy.sol:30"
            },
            {
              "contract": "MockStrategy",
              "label": "apy",
              "type": "t_uint256",
              "src": "contracts/core/mocks/MockStrategy.sol:35"
            }
          ],
          "types": {
            "t_contract(IStrategyController)6815": {
              "label": "contract IStrategyController"
            },
            "t_contract(ILongShortToken)6421": {
              "label": "contract ILongShortToken"
            },
            "t_contract(IERC20)2298": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TestCollateral": {
        "src": "contracts/core/mocks/TestCollateral.sol:6",
        "version": {
          "withMetadata": "f07a2dd948b5c812d30c30254ffc0cf9df29aff522c29c3a36cf0f055b387e1d",
          "withoutMetadata": "748450368dc189434986a2811922b8438880d3f4a30d8cd58e3f13693ff961e8",
          "linkedWithoutMetadata": "748450368dc189434986a2811922b8438880d3f4a30d8cd58e3f13693ff961e8"
        },
        "inherit": [
          "MulticallUpgradeable",
          "Collateral",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "ICollateral",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}