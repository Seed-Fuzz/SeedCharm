/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type WithdrawalRequestStruct = {
  amount: BigNumberish;
  blockNumber: BigNumberish;
};

export type WithdrawalRequestStructOutput = [BigNumber, BigNumber] & {
  amount: BigNumber;
  blockNumber: BigNumber;
};

export interface CollateralInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getAmountForShares(uint256)": FunctionFragment;
    "getBaseToken()": FunctionFragment;
    "getDelayedWithdrawalExpiry()": FunctionFragment;
    "getDepositHook()": FunctionFragment;
    "getDepositsAllowed()": FunctionFragment;
    "getFeeDenominator()": FunctionFragment;
    "getFeeLimit()": FunctionFragment;
    "getMintingFee()": FunctionFragment;
    "getRedemptionFee()": FunctionFragment;
    "getSharesForAmount(uint256)": FunctionFragment;
    "getStrategyController()": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "getWithdrawHook()": FunctionFragment;
    "getWithdrawalRequest(address)": FunctionFragment;
    "getWithdrawalsAllowed()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initiateWithdrawal(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDelayedWithdrawalExpiry(uint256)": FunctionFragment;
    "setDepositHook(address)": FunctionFragment;
    "setDepositsAllowed(bool)": FunctionFragment;
    "setMintingFee(uint256)": FunctionFragment;
    "setRedemptionFee(uint256)": FunctionFragment;
    "setStrategyController(address)": FunctionFragment;
    "setWithdrawHook(address)": FunctionFragment;
    "setWithdrawalsAllowed(bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uninitiateWithdrawal()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelayedWithdrawalExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositsAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesForAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalsAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayedWithdrawalExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositHook",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositsAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawHook",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalsAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uninitiateWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelayedWithdrawalExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayedWithdrawalExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninitiateWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DelayedWithdrawalChanged(bool)": EventFragment;
    "DelayedWithdrawalExpiryChanged(uint256)": EventFragment;
    "DepositHookChanged(address)": EventFragment;
    "DepositsAllowedChanged(bool)": EventFragment;
    "MintingFeeChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedemptionFeeChanged(uint256)": EventFragment;
    "StrategyControllerChanged(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "WithdrawHookChanged(address)": EventFragment;
    "WithdrawalsAllowedChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayedWithdrawalChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelayedWithdrawalExpiryChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositHookChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsAllowedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawHookChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalsAllowedChanged"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type DelayedWithdrawalChangedEvent = TypedEvent<
  [boolean],
  { enabled: boolean }
>;

export type DelayedWithdrawalChangedEventFilter =
  TypedEventFilter<DelayedWithdrawalChangedEvent>;

export type DelayedWithdrawalExpiryChangedEvent = TypedEvent<
  [BigNumber],
  { expiry: BigNumber }
>;

export type DelayedWithdrawalExpiryChangedEventFilter =
  TypedEventFilter<DelayedWithdrawalExpiryChangedEvent>;

export type DepositHookChangedEvent = TypedEvent<[string], { hook: string }>;

export type DepositHookChangedEventFilter =
  TypedEventFilter<DepositHookChangedEvent>;

export type DepositsAllowedChangedEvent = TypedEvent<
  [boolean],
  { allowed: boolean }
>;

export type DepositsAllowedChangedEventFilter =
  TypedEventFilter<DepositsAllowedChangedEvent>;

export type MintingFeeChangedEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type MintingFeeChangedEventFilter =
  TypedEventFilter<MintingFeeChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedemptionFeeChangedEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type RedemptionFeeChangedEventFilter =
  TypedEventFilter<RedemptionFeeChangedEvent>;

export type StrategyControllerChangedEvent = TypedEvent<
  [string],
  { controller: string }
>;

export type StrategyControllerChangedEventFilter =
  TypedEventFilter<StrategyControllerChangedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawHookChangedEvent = TypedEvent<[string], { hook: string }>;

export type WithdrawHookChangedEventFilter =
  TypedEventFilter<WithdrawHookChangedEvent>;

export type WithdrawalsAllowedChangedEvent = TypedEvent<
  [boolean],
  { allowed: boolean }
>;

export type WithdrawalsAllowedChangedEventFilter =
  TypedEventFilter<WithdrawalsAllowedChangedEvent>;

export interface Collateral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollateralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountForShares(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBaseToken(overrides?: CallOverrides): Promise<[string]>;

    getDelayedWithdrawalExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositHook(overrides?: CallOverrides): Promise<[string]>;

    getDepositsAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    getFeeDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSharesForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStrategyController(overrides?: CallOverrides): Promise<[string]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    getWithdrawHook(overrides?: CallOverrides): Promise<[string]>;

    getWithdrawalRequest(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[WithdrawalRequestStructOutput]>;

    getWithdrawalsAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _newBaseToken: string,
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateWithdrawal(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelayedWithdrawalExpiry(
      _newDelayedWithdrawalExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositHook(
      _newDepositHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositsAllowed(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategyController(
      _newStrategyController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawHook(
      _newWithdrawHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalsAllowed(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uninitiateWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountForShares(
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseToken(overrides?: CallOverrides): Promise<string>;

  getDelayedWithdrawalExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositHook(overrides?: CallOverrides): Promise<string>;

  getDepositsAllowed(overrides?: CallOverrides): Promise<boolean>;

  getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

  getSharesForAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStrategyController(overrides?: CallOverrides): Promise<string>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  getWithdrawHook(overrides?: CallOverrides): Promise<string>;

  getWithdrawalRequest(
    _account: string,
    overrides?: CallOverrides
  ): Promise<WithdrawalRequestStructOutput>;

  getWithdrawalsAllowed(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _newBaseToken: string,
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateWithdrawal(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelayedWithdrawalExpiry(
    _newDelayedWithdrawalExpiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositHook(
    _newDepositHook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositsAllowed(
    _allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintingFee(
    _newMintingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    _newRedemptionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategyController(
    _newStrategyController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawHook(
    _newWithdrawHook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalsAllowed(
    _allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uninitiateWithdrawal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForShares(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<string>;

    getDelayedWithdrawalExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositHook(overrides?: CallOverrides): Promise<string>;

    getDepositsAllowed(overrides?: CallOverrides): Promise<boolean>;

    getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyController(overrides?: CallOverrides): Promise<string>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    getWithdrawHook(overrides?: CallOverrides): Promise<string>;

    getWithdrawalRequest(
      _account: string,
      overrides?: CallOverrides
    ): Promise<WithdrawalRequestStructOutput>;

    getWithdrawalsAllowed(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _newBaseToken: string,
      _newTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdrawal(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDelayedWithdrawalExpiry(
      _newDelayedWithdrawalExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositHook(
      _newDepositHook: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositsAllowed(
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyController(
      _newStrategyController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawHook(
      _newWithdrawHook: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalsAllowed(
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uninitiateWithdrawal(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "DelayedWithdrawalChanged(bool)"(
      enabled?: null
    ): DelayedWithdrawalChangedEventFilter;
    DelayedWithdrawalChanged(
      enabled?: null
    ): DelayedWithdrawalChangedEventFilter;

    "DelayedWithdrawalExpiryChanged(uint256)"(
      expiry?: null
    ): DelayedWithdrawalExpiryChangedEventFilter;
    DelayedWithdrawalExpiryChanged(
      expiry?: null
    ): DelayedWithdrawalExpiryChangedEventFilter;

    "DepositHookChanged(address)"(hook?: null): DepositHookChangedEventFilter;
    DepositHookChanged(hook?: null): DepositHookChangedEventFilter;

    "DepositsAllowedChanged(bool)"(
      allowed?: null
    ): DepositsAllowedChangedEventFilter;
    DepositsAllowedChanged(allowed?: null): DepositsAllowedChangedEventFilter;

    "MintingFeeChanged(uint256)"(fee?: null): MintingFeeChangedEventFilter;
    MintingFeeChanged(fee?: null): MintingFeeChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RedemptionFeeChanged(uint256)"(
      fee?: null
    ): RedemptionFeeChangedEventFilter;
    RedemptionFeeChanged(fee?: null): RedemptionFeeChangedEventFilter;

    "StrategyControllerChanged(address)"(
      controller?: null
    ): StrategyControllerChangedEventFilter;
    StrategyControllerChanged(
      controller?: null
    ): StrategyControllerChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "WithdrawHookChanged(address)"(hook?: null): WithdrawHookChangedEventFilter;
    WithdrawHookChanged(hook?: null): WithdrawHookChangedEventFilter;

    "WithdrawalsAllowedChanged(bool)"(
      allowed?: null
    ): WithdrawalsAllowedChangedEventFilter;
    WithdrawalsAllowedChanged(
      allowed?: null
    ): WithdrawalsAllowedChangedEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountForShares(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    getDelayedWithdrawalExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositHook(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositsAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyController(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawHook(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalRequest(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalsAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _newBaseToken: string,
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateWithdrawal(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelayedWithdrawalExpiry(
      _newDelayedWithdrawalExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositHook(
      _newDepositHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositsAllowed(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategyController(
      _newStrategyController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawHook(
      _newWithdrawHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalsAllowed(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uninitiateWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountForShares(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelayedWithdrawalExpiry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositsAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSharesForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawalRequest(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalsAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _newBaseToken: string,
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithdrawal(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelayedWithdrawalExpiry(
      _newDelayedWithdrawalExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositHook(
      _newDepositHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositsAllowed(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyController(
      _newStrategyController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawHook(
      _newWithdrawHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalsAllowed(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uninitiateWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
