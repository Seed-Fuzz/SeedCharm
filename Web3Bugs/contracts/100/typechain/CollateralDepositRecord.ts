/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CollateralDepositRecordInterface extends utils.Interface {
  functions: {
    "getAccountDepositCap()": FunctionFragment;
    "getGlobalDepositAmount()": FunctionFragment;
    "getGlobalDepositCap()": FunctionFragment;
    "getNetDeposit(address)": FunctionFragment;
    "isHookAllowed(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "recordDeposit(address,uint256)": FunctionFragment;
    "recordWithdrawal(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountDepositCap(uint256)": FunctionFragment;
    "setAllowedHook(address,bool)": FunctionFragment;
    "setGlobalDepositCap(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountDepositCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalDepositCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isHookAllowed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordWithdrawal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountDepositCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedHook",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalDepositCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountDepositCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalDepositCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHookAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountDepositCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalDepositCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AccountDepositCapChanged(uint256)": EventFragment;
    "AllowedHooksChanged(address,bool)": EventFragment;
    "GlobalDepositCapChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountDepositCapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedHooksChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalDepositCapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AccountDepositCapChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type AccountDepositCapChangedEventFilter =
  TypedEventFilter<AccountDepositCapChangedEvent>;

export type AllowedHooksChangedEvent = TypedEvent<
  [string, boolean],
  { hook: string; allowed: boolean }
>;

export type AllowedHooksChangedEventFilter =
  TypedEventFilter<AllowedHooksChangedEvent>;

export type GlobalDepositCapChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type GlobalDepositCapChangedEventFilter =
  TypedEventFilter<GlobalDepositCapChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CollateralDepositRecord extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollateralDepositRecordInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountDepositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGlobalDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGlobalDepositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNetDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isHookAllowed(_hook: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recordDeposit(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recordWithdrawal(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccountDepositCap(
      _newAccountDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedHook(
      _hook: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGlobalDepositCap(
      _newGlobalDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountDepositCap(overrides?: CallOverrides): Promise<BigNumber>;

  getGlobalDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getGlobalDepositCap(overrides?: CallOverrides): Promise<BigNumber>;

  getNetDeposit(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isHookAllowed(_hook: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  recordDeposit(
    _sender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recordWithdrawal(
    _sender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccountDepositCap(
    _newAccountDepositCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedHook(
    _hook: string,
    _allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGlobalDepositCap(
    _newGlobalDepositCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountDepositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalDepositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getNetDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHookAllowed(_hook: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    recordDeposit(
      _sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recordWithdrawal(
      _sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccountDepositCap(
      _newAccountDepositCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedHook(
      _hook: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalDepositCap(
      _newGlobalDepositCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountDepositCapChanged(uint256)"(
      amount?: null
    ): AccountDepositCapChangedEventFilter;
    AccountDepositCapChanged(
      amount?: null
    ): AccountDepositCapChangedEventFilter;

    "AllowedHooksChanged(address,bool)"(
      hook?: null,
      allowed?: null
    ): AllowedHooksChangedEventFilter;
    AllowedHooksChanged(
      hook?: null,
      allowed?: null
    ): AllowedHooksChangedEventFilter;

    "GlobalDepositCapChanged(uint256)"(
      amount?: null
    ): GlobalDepositCapChangedEventFilter;
    GlobalDepositCapChanged(amount?: null): GlobalDepositCapChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getAccountDepositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalDepositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getNetDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHookAllowed(_hook: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recordDeposit(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recordWithdrawal(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccountDepositCap(
      _newAccountDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedHook(
      _hook: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGlobalDepositCap(
      _newGlobalDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountDepositCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalDepositCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHookAllowed(
      _hook: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordDeposit(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recordWithdrawal(
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccountDepositCap(
      _newAccountDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedHook(
      _hook: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalDepositCap(
      _newGlobalDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
