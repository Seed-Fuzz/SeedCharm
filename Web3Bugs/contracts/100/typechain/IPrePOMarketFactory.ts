/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IPrePOMarketFactoryInterface extends utils.Interface {
  functions: {
    "createMarket(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getMarket(bytes32)": FunctionFragment;
    "isCollateralValid(address)": FunctionFragment;
    "setCollateralValidity(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralValid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralValidity",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralValidity",
    data: BytesLike
  ): Result;

  events: {
    "CollateralValidityChanged(address,bool)": EventFragment;
    "MarketAdded(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralValidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketAdded"): EventFragment;
}

export type CollateralValidityChangedEvent = TypedEvent<
  [string, boolean],
  { collateral: string; allowed: boolean }
>;

export type CollateralValidityChangedEventFilter =
  TypedEventFilter<CollateralValidityChangedEvent>;

export type MarketAddedEvent = TypedEvent<
  [string, string],
  { market: string; longShortHash: string }
>;

export type MarketAddedEventFilter = TypedEventFilter<MarketAddedEvent>;

export interface IPrePOMarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPrePOMarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarket(
      tokenNameSuffix: string,
      tokenSymbolSuffix: string,
      collateral: string,
      governance: string,
      floorLongPrice: BigNumberish,
      ceilingLongPrice: BigNumberish,
      floorValuation: BigNumberish,
      ceilingValuation: BigNumberish,
      mintingFee: BigNumberish,
      redemptionFee: BigNumberish,
      expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMarket(
      longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isCollateralValid(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setCollateralValidity(
      collateral: string,
      validity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createMarket(
    tokenNameSuffix: string,
    tokenSymbolSuffix: string,
    collateral: string,
    governance: string,
    floorLongPrice: BigNumberish,
    ceilingLongPrice: BigNumberish,
    floorValuation: BigNumberish,
    ceilingValuation: BigNumberish,
    mintingFee: BigNumberish,
    redemptionFee: BigNumberish,
    expiryTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMarket(
    longShortHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isCollateralValid(
    collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setCollateralValidity(
    collateral: string,
    validity: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createMarket(
      tokenNameSuffix: string,
      tokenSymbolSuffix: string,
      collateral: string,
      governance: string,
      floorLongPrice: BigNumberish,
      ceilingLongPrice: BigNumberish,
      floorValuation: BigNumberish,
      ceilingValuation: BigNumberish,
      mintingFee: BigNumberish,
      redemptionFee: BigNumberish,
      expiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarket(
      longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isCollateralValid(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setCollateralValidity(
      collateral: string,
      validity: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralValidityChanged(address,bool)"(
      collateral?: null,
      allowed?: null
    ): CollateralValidityChangedEventFilter;
    CollateralValidityChanged(
      collateral?: null,
      allowed?: null
    ): CollateralValidityChangedEventFilter;

    "MarketAdded(address,bytes32)"(
      market?: null,
      longShortHash?: null
    ): MarketAddedEventFilter;
    MarketAdded(market?: null, longShortHash?: null): MarketAddedEventFilter;
  };

  estimateGas: {
    createMarket(
      tokenNameSuffix: string,
      tokenSymbolSuffix: string,
      collateral: string,
      governance: string,
      floorLongPrice: BigNumberish,
      ceilingLongPrice: BigNumberish,
      floorValuation: BigNumberish,
      ceilingValuation: BigNumberish,
      mintingFee: BigNumberish,
      redemptionFee: BigNumberish,
      expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMarket(
      longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateralValid(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCollateralValidity(
      collateral: string,
      validity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarket(
      tokenNameSuffix: string,
      tokenSymbolSuffix: string,
      collateral: string,
      governance: string,
      floorLongPrice: BigNumberish,
      ceilingLongPrice: BigNumberish,
      floorValuation: BigNumberish,
      ceilingValuation: BigNumberish,
      mintingFee: BigNumberish,
      redemptionFee: BigNumberish,
      expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMarket(
      longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateralValid(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCollateralValidity(
      collateral: string,
      validity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
