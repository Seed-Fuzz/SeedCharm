/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockAccountAccessControllerInterface extends utils.Interface {
  functions: {
    "allowAccounts(address[])": FunctionFragment;
    "allowSelf(bytes32[])": FunctionFragment;
    "blockAccounts(address[])": FunctionFragment;
    "clearAllowedAccounts()": FunctionFragment;
    "clearBlockedAccounts()": FunctionFragment;
    "getAllowedAccountsIndex()": FunctionFragment;
    "getBlockedAccountsIndex()": FunctionFragment;
    "getRoot()": FunctionFragment;
    "isAccountAllowed(address)": FunctionFragment;
    "isAccountBlocked(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRoot(bytes32)": FunctionFragment;
    "setRootAndClearAllowedAccounts(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowAccounts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowSelf",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blockAccounts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAllowedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearBlockedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedAccountsIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockedAccountsIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAccountAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountBlocked",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setRoot", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setRootAndClearAllowedAccounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowSelf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAllowedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearBlockedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedAccountsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockedAccountsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountBlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRootAndClearAllowedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AccountAllowed(address)": EventFragment;
    "AccountBlocked(address)": EventFragment;
    "AllowedAccountsCleared(uint32)": EventFragment;
    "BlockedAccountsCleared(uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RootChanged(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountBlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedAccountsCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockedAccountsCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootChanged"): EventFragment;
}

export type AccountAllowedEvent = TypedEvent<[string], { account: string }>;

export type AccountAllowedEventFilter = TypedEventFilter<AccountAllowedEvent>;

export type AccountBlockedEvent = TypedEvent<[string], { account: string }>;

export type AccountBlockedEventFilter = TypedEventFilter<AccountBlockedEvent>;

export type AllowedAccountsClearedEvent = TypedEvent<
  [number],
  { index: number }
>;

export type AllowedAccountsClearedEventFilter =
  TypedEventFilter<AllowedAccountsClearedEvent>;

export type BlockedAccountsClearedEvent = TypedEvent<
  [number],
  { index: number }
>;

export type BlockedAccountsClearedEventFilter =
  TypedEventFilter<BlockedAccountsClearedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RootChangedEvent = TypedEvent<[string], { root: string }>;

export type RootChangedEventFilter = TypedEventFilter<RootChangedEvent>;

export interface MockAccountAccessController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockAccountAccessControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowSelf(
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearAllowedAccounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearBlockedAccounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllowedAccountsIndex(overrides?: CallOverrides): Promise<[number]>;

    getBlockedAccountsIndex(overrides?: CallOverrides): Promise<[number]>;

    getRoot(overrides?: CallOverrides): Promise<[string]>;

    isAccountAllowed(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAccountBlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoot(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRootAndClearAllowedAccounts(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowAccounts(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowSelf(
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockAccounts(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearAllowedAccounts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearBlockedAccounts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllowedAccountsIndex(overrides?: CallOverrides): Promise<number>;

  getBlockedAccountsIndex(overrides?: CallOverrides): Promise<number>;

  getRoot(overrides?: CallOverrides): Promise<string>;

  isAccountAllowed(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountBlocked(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoot(
    _newRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRootAndClearAllowedAccounts(
    _newRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowAccounts(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowSelf(_proof: BytesLike[], overrides?: CallOverrides): Promise<void>;

    blockAccounts(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    clearAllowedAccounts(overrides?: CallOverrides): Promise<void>;

    clearBlockedAccounts(overrides?: CallOverrides): Promise<void>;

    getAllowedAccountsIndex(overrides?: CallOverrides): Promise<number>;

    getBlockedAccountsIndex(overrides?: CallOverrides): Promise<number>;

    getRoot(overrides?: CallOverrides): Promise<string>;

    isAccountAllowed(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountBlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRoot(_newRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    setRootAndClearAllowedAccounts(
      _newRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountAllowed(address)"(
      account?: string | null
    ): AccountAllowedEventFilter;
    AccountAllowed(account?: string | null): AccountAllowedEventFilter;

    "AccountBlocked(address)"(
      account?: string | null
    ): AccountBlockedEventFilter;
    AccountBlocked(account?: string | null): AccountBlockedEventFilter;

    "AllowedAccountsCleared(uint32)"(
      index?: null
    ): AllowedAccountsClearedEventFilter;
    AllowedAccountsCleared(index?: null): AllowedAccountsClearedEventFilter;

    "BlockedAccountsCleared(uint32)"(
      index?: null
    ): BlockedAccountsClearedEventFilter;
    BlockedAccountsCleared(index?: null): BlockedAccountsClearedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RootChanged(bytes32)"(root?: null): RootChangedEventFilter;
    RootChanged(root?: null): RootChangedEventFilter;
  };

  estimateGas: {
    allowAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowSelf(
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearAllowedAccounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearBlockedAccounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllowedAccountsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockedAccountsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getRoot(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountAllowed(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountBlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoot(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRootAndClearAllowedAccounts(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowSelf(
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearAllowedAccounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearBlockedAccounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllowedAccountsIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockedAccountsIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAccountAllowed(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountBlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoot(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRootAndClearAllowedAccounts(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
