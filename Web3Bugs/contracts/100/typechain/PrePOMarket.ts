/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PrePOMarketInterface extends utils.Interface {
  functions: {
    "getCeilingLongPrice()": FunctionFragment;
    "getCeilingValuation()": FunctionFragment;
    "getCollateral()": FunctionFragment;
    "getExpiryTime()": FunctionFragment;
    "getFeeDenominator()": FunctionFragment;
    "getFeeLimit()": FunctionFragment;
    "getFinalLongPrice()": FunctionFragment;
    "getFloorLongPrice()": FunctionFragment;
    "getFloorValuation()": FunctionFragment;
    "getLongToken()": FunctionFragment;
    "getMaxPrice()": FunctionFragment;
    "getMintingFee()": FunctionFragment;
    "getRedemptionFee()": FunctionFragment;
    "getShortToken()": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "isPublicMintingAllowed()": FunctionFragment;
    "mintLongShortTokens(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "redeem(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFinalLongPrice(uint256)": FunctionFragment;
    "setMintingFee(uint256)": FunctionFragment;
    "setPublicMinting(bool)": FunctionFragment;
    "setRedemptionFee(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCeilingLongPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCeilingValuation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiryTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalLongPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFloorLongPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFloorValuation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLongToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShortToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicMintingAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintLongShortTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFinalLongPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicMinting",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCeilingLongPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCeilingValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpiryTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalLongPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFloorLongPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFloorValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicMintingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLongShortTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFinalLongPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FinalLongPriceSet(uint256)": EventFragment;
    "MarketCreated(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "MintingFeeChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PublicMintingChanged(bool)": EventFragment;
    "Redemption(address,uint256)": EventFragment;
    "RedemptionFeeChanged(uint256)": EventFragment;
    "TreasuryChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FinalLongPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicMintingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryChanged"): EventFragment;
}

export type FinalLongPriceSetEvent = TypedEvent<
  [BigNumber],
  { price: BigNumber }
>;

export type FinalLongPriceSetEventFilter =
  TypedEventFilter<FinalLongPriceSetEvent>;

export type MarketCreatedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    longToken: string;
    shortToken: string;
    floorLongPrice: BigNumber;
    ceilingLongPrice: BigNumber;
    floorValuation: BigNumber;
    ceilingValuation: BigNumber;
    mintingFee: BigNumber;
    redemptionFee: BigNumber;
    expiryTime: BigNumber;
  }
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export type MintEvent = TypedEvent<
  [string, BigNumber],
  { minter: string; amount: BigNumber }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export type MintingFeeChangedEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type MintingFeeChangedEventFilter =
  TypedEventFilter<MintingFeeChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PublicMintingChangedEvent = TypedEvent<
  [boolean],
  { allowed: boolean }
>;

export type PublicMintingChangedEventFilter =
  TypedEventFilter<PublicMintingChangedEvent>;

export type RedemptionEvent = TypedEvent<
  [string, BigNumber],
  { redeemer: string; amount: BigNumber }
>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export type RedemptionFeeChangedEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type RedemptionFeeChangedEventFilter =
  TypedEventFilter<RedemptionFeeChangedEvent>;

export type TreasuryChangedEvent = TypedEvent<[string], { treasury: string }>;

export type TreasuryChangedEventFilter = TypedEventFilter<TreasuryChangedEvent>;

export interface PrePOMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrePOMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCeilingLongPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCeilingValuation(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateral(overrides?: CallOverrides): Promise<[string]>;

    getExpiryTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFinalLongPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFloorLongPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFloorValuation(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLongToken(overrides?: CallOverrides): Promise<[string]>;

    getMaxPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getShortToken(overrides?: CallOverrides): Promise<[string]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    isPublicMintingAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    mintLongShortTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _longAmount: BigNumberish,
      _shortAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFinalLongPrice(
      _newFinalLongPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicMinting(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCeilingLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getCeilingValuation(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateral(overrides?: CallOverrides): Promise<string>;

  getExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getFinalLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getFloorLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getFloorValuation(overrides?: CallOverrides): Promise<BigNumber>;

  getLongToken(overrides?: CallOverrides): Promise<string>;

  getMaxPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

  getShortToken(overrides?: CallOverrides): Promise<string>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  isPublicMintingAllowed(overrides?: CallOverrides): Promise<boolean>;

  mintLongShortTokens(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    _longAmount: BigNumberish,
    _shortAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFinalLongPrice(
    _newFinalLongPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintingFee(
    _newMintingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicMinting(
    _allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    _newRedemptionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCeilingLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCeilingValuation(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(overrides?: CallOverrides): Promise<string>;

    getExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getFloorLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getFloorValuation(overrides?: CallOverrides): Promise<BigNumber>;

    getLongToken(overrides?: CallOverrides): Promise<string>;

    getMaxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    getShortToken(overrides?: CallOverrides): Promise<string>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    isPublicMintingAllowed(overrides?: CallOverrides): Promise<boolean>;

    mintLongShortTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(
      _longAmount: BigNumberish,
      _shortAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFinalLongPrice(
      _newFinalLongPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicMinting(
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_newTreasury: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FinalLongPriceSet(uint256)"(price?: null): FinalLongPriceSetEventFilter;
    FinalLongPriceSet(price?: null): FinalLongPriceSetEventFilter;

    "MarketCreated(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      longToken?: null,
      shortToken?: null,
      floorLongPrice?: null,
      ceilingLongPrice?: null,
      floorValuation?: null,
      ceilingValuation?: null,
      mintingFee?: null,
      redemptionFee?: null,
      expiryTime?: null
    ): MarketCreatedEventFilter;
    MarketCreated(
      longToken?: null,
      shortToken?: null,
      floorLongPrice?: null,
      ceilingLongPrice?: null,
      floorValuation?: null,
      ceilingValuation?: null,
      mintingFee?: null,
      redemptionFee?: null,
      expiryTime?: null
    ): MarketCreatedEventFilter;

    "Mint(address,uint256)"(
      minter?: string | null,
      amount?: null
    ): MintEventFilter;
    Mint(minter?: string | null, amount?: null): MintEventFilter;

    "MintingFeeChanged(uint256)"(fee?: null): MintingFeeChangedEventFilter;
    MintingFeeChanged(fee?: null): MintingFeeChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PublicMintingChanged(bool)"(
      allowed?: null
    ): PublicMintingChangedEventFilter;
    PublicMintingChanged(allowed?: null): PublicMintingChangedEventFilter;

    "Redemption(address,uint256)"(
      redeemer?: string | null,
      amount?: null
    ): RedemptionEventFilter;
    Redemption(redeemer?: string | null, amount?: null): RedemptionEventFilter;

    "RedemptionFeeChanged(uint256)"(
      fee?: null
    ): RedemptionFeeChangedEventFilter;
    RedemptionFeeChanged(fee?: null): RedemptionFeeChangedEventFilter;

    "TreasuryChanged(address)"(treasury?: null): TreasuryChangedEventFilter;
    TreasuryChanged(treasury?: null): TreasuryChangedEventFilter;
  };

  estimateGas: {
    getCeilingLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCeilingValuation(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getFloorLongPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getFloorValuation(overrides?: CallOverrides): Promise<BigNumber>;

    getLongToken(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    getShortToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    isPublicMintingAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    mintLongShortTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _longAmount: BigNumberish,
      _shortAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFinalLongPrice(
      _newFinalLongPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicMinting(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCeilingLongPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCeilingValuation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpiryTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFinalLongPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFloorLongPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFloorValuation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLongToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShortToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPublicMintingAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintLongShortTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _longAmount: BigNumberish,
      _shortAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFinalLongPrice(
      _newFinalLongPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFee(
      _newMintingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicMinting(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      _newRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
