/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PrePOMarketFactoryInterface extends utils.Interface {
  functions: {
    "createMarket(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getMarket(bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isCollateralValid(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCollateralValidity(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralValid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralValidity",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CollateralValidityChanged(address,bool)": EventFragment;
    "MarketAdded(address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralValidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CollateralValidityChangedEvent = TypedEvent<
  [string, boolean],
  { collateral: string; allowed: boolean }
>;

export type CollateralValidityChangedEventFilter =
  TypedEventFilter<CollateralValidityChangedEvent>;

export type MarketAddedEvent = TypedEvent<
  [string, string],
  { market: string; longShortHash: string }
>;

export type MarketAddedEventFilter = TypedEventFilter<MarketAddedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PrePOMarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrePOMarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarket(
      _tokenNameSuffix: string,
      _tokenSymbolSuffix: string,
      _governance: string,
      _collateral: string,
      _floorLongPrice: BigNumberish,
      _ceilingLongPrice: BigNumberish,
      _floorValuation: BigNumberish,
      _ceilingValuation: BigNumberish,
      _mintingFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMarket(
      _longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCollateralValid(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralValidity(
      _collateral: string,
      _validity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createMarket(
    _tokenNameSuffix: string,
    _tokenSymbolSuffix: string,
    _governance: string,
    _collateral: string,
    _floorLongPrice: BigNumberish,
    _ceilingLongPrice: BigNumberish,
    _floorValuation: BigNumberish,
    _ceilingValuation: BigNumberish,
    _mintingFee: BigNumberish,
    _redemptionFee: BigNumberish,
    _expiryTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMarket(
    _longShortHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCollateralValid(
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralValidity(
    _collateral: string,
    _validity: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createMarket(
      _tokenNameSuffix: string,
      _tokenSymbolSuffix: string,
      _governance: string,
      _collateral: string,
      _floorLongPrice: BigNumberish,
      _ceilingLongPrice: BigNumberish,
      _floorValuation: BigNumberish,
      _ceilingValuation: BigNumberish,
      _mintingFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarket(
      _longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isCollateralValid(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCollateralValidity(
      _collateral: string,
      _validity: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralValidityChanged(address,bool)"(
      collateral?: null,
      allowed?: null
    ): CollateralValidityChangedEventFilter;
    CollateralValidityChanged(
      collateral?: null,
      allowed?: null
    ): CollateralValidityChangedEventFilter;

    "MarketAdded(address,bytes32)"(
      market?: null,
      longShortHash?: null
    ): MarketAddedEventFilter;
    MarketAdded(market?: null, longShortHash?: null): MarketAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createMarket(
      _tokenNameSuffix: string,
      _tokenSymbolSuffix: string,
      _governance: string,
      _collateral: string,
      _floorLongPrice: BigNumberish,
      _ceilingLongPrice: BigNumberish,
      _floorValuation: BigNumberish,
      _ceilingValuation: BigNumberish,
      _mintingFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMarket(
      _longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCollateralValid(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralValidity(
      _collateral: string,
      _validity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarket(
      _tokenNameSuffix: string,
      _tokenSymbolSuffix: string,
      _governance: string,
      _collateral: string,
      _floorLongPrice: BigNumberish,
      _ceilingLongPrice: BigNumberish,
      _floorValuation: BigNumberish,
      _ceilingValuation: BigNumberish,
      _mintingFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMarket(
      _longShortHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCollateralValid(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralValidity(
      _collateral: string,
      _validity: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
