/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ChainlinkInceptionPriceFeedInterface
  extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "assetOracle()": FunctionFragment;
    "convertFrom(uint256)": FunctionFragment;
    "convertTo(uint256)": FunctionFragment;
    "eurOracle()": FunctionFragment;
    "getAssetPrice()": FunctionFragment;
    "inceptionCollateral()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertFrom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertTo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eurOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inceptionCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convertTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eurOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {
    "PriceFeedAdded(uint16,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceFeedAdded"): EventFragment;
}

export type PriceFeedAddedEvent = TypedEvent<
  [number, string],
  {_id: number; _priceFeed: string}
>;

export type PriceFeedAddedEventFilter = TypedEventFilter<PriceFeedAddedEvent>;

export interface ChainlinkInceptionPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkInceptionPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    assetOracle(overrides?: CallOverrides): Promise<[string]>;

    convertFrom(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertTo(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eurOracle(overrides?: CallOverrides): Promise<[string]>;

    getAssetPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & {price: BigNumber}>;

    inceptionCollateral(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  assetOracle(overrides?: CallOverrides): Promise<string>;

  convertFrom(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertTo(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eurOracle(overrides?: CallOverrides): Promise<string>;

  getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  inceptionCollateral(overrides?: CallOverrides): Promise<string>;

  initialize(
    _addresses: string,
    inceptionCollateral: string,
    assetOracle: string,
    eurOracle: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    assetOracle(overrides?: CallOverrides): Promise<string>;

    convertFrom(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTo(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eurOracle(overrides?: CallOverrides): Promise<string>;

    getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionCollateral(overrides?: CallOverrides): Promise<string>;

    initialize(
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PriceFeedAdded(uint16,address)"(
      _id?: null,
      _priceFeed?: null
    ): PriceFeedAddedEventFilter;
    PriceFeedAdded(_id?: null, _priceFeed?: null): PriceFeedAddedEventFilter;
  };

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    assetOracle(overrides?: CallOverrides): Promise<BigNumber>;

    convertFrom(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTo(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eurOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertFrom(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertTo(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eurOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inceptionCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
