/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type DexStruct = {proxy: string; router: string};

export type DexStructOutput = [string, string] & {
  proxy: string;
  router: string;
};

export interface DexAddressProviderInterface extends ethers.utils.Interface {
  functions: {
    "dexMapping(uint256)": FunctionFragment;
    "parallel()": FunctionFragment;
    "setDexMapping(uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dexMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "parallel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDexMapping",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "dexMapping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parallel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDexMapping",
    data: BytesLike
  ): Result;

  events: {
    "DexSet(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DexSet"): EventFragment;
}

export type DexSetEvent = TypedEvent<[number], {arg0: number}>;

export type DexSetEventFilter = TypedEventFilter<DexSetEvent>;

export interface DexAddressProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DexAddressProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dexMapping(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    parallel(overrides?: CallOverrides): Promise<[string]>;

    setDexMapping(
      _index: BigNumberish,
      _proxy: string,
      _router: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  dexMapping(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  parallel(overrides?: CallOverrides): Promise<string>;

  setDexMapping(
    _index: BigNumberish,
    _proxy: string,
    _router: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    dexMapping(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    parallel(overrides?: CallOverrides): Promise<string>;

    setDexMapping(
      _index: BigNumberish,
      _proxy: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DexSet(uint8)"(undefined?: null): DexSetEventFilter;
    DexSet(undefined?: null): DexSetEventFilter;
  };

  estimateGas: {
    dexMapping(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parallel(overrides?: CallOverrides): Promise<BigNumber>;

    setDexMapping(
      _index: BigNumberish,
      _proxy: string,
      _router: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dexMapping(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parallel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDexMapping(
      _index: BigNumberish,
      _proxy: string,
      _router: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
