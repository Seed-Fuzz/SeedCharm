/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface GovernanceAddressProviderInterface
  extends ethers.utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "debtNotifier()": FunctionFragment;
    "governorAlpha()": FunctionFragment;
    "mimo()": FunctionFragment;
    "parallel()": FunctionFragment;
    "setDebtNotifier(address)": FunctionFragment;
    "setGovernorAlpha(address)": FunctionFragment;
    "setMIMO(address)": FunctionFragment;
    "setParallelAddressProvider(address)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setVotingEscrow(address)": FunctionFragment;
    "timelock()": FunctionFragment;
    "votingEscrow()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtNotifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governorAlpha",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mimo", values?: undefined): string;
  encodeFunctionData(functionFragment: "parallel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDebtNotifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorAlpha",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMIMO", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setParallelAddressProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVotingEscrow",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorAlpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mimo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parallel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorAlpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMIMO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParallelAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GovernanceAddressProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceAddressProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    debtNotifier(overrides?: CallOverrides): Promise<[string]>;

    governorAlpha(overrides?: CallOverrides): Promise<[string]>;

    mimo(overrides?: CallOverrides): Promise<[string]>;

    parallel(overrides?: CallOverrides): Promise<[string]>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setGovernorAlpha(
      _governorAlpha: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setMIMO(
      _mimo: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setParallelAddressProvider(
      _parallel: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setVotingEscrow(
      _votingEscrow: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  debtNotifier(overrides?: CallOverrides): Promise<string>;

  governorAlpha(overrides?: CallOverrides): Promise<string>;

  mimo(overrides?: CallOverrides): Promise<string>;

  parallel(overrides?: CallOverrides): Promise<string>;

  setDebtNotifier(
    _debtNotifier: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setGovernorAlpha(
    _governorAlpha: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setMIMO(
    _mimo: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setParallelAddressProvider(
    _parallel: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setVotingEscrow(
    _votingEscrow: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  timelock(overrides?: CallOverrides): Promise<string>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    debtNotifier(overrides?: CallOverrides): Promise<string>;

    governorAlpha(overrides?: CallOverrides): Promise<string>;

    mimo(overrides?: CallOverrides): Promise<string>;

    parallel(overrides?: CallOverrides): Promise<string>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernorAlpha(
      _governorAlpha: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMIMO(_mimo: string, overrides?: CallOverrides): Promise<void>;

    setParallelAddressProvider(
      _parallel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(_timelock: string, overrides?: CallOverrides): Promise<void>;

    setVotingEscrow(
      _votingEscrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timelock(overrides?: CallOverrides): Promise<string>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    debtNotifier(overrides?: CallOverrides): Promise<BigNumber>;

    governorAlpha(overrides?: CallOverrides): Promise<BigNumber>;

    mimo(overrides?: CallOverrides): Promise<BigNumber>;

    parallel(overrides?: CallOverrides): Promise<BigNumber>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setGovernorAlpha(
      _governorAlpha: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setMIMO(
      _mimo: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setParallelAddressProvider(
      _parallel: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setVotingEscrow(
      _votingEscrow: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtNotifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governorAlpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mimo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parallel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setGovernorAlpha(
      _governorAlpha: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setMIMO(
      _mimo: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setParallelAddressProvider(
      _parallel: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setVotingEscrow(
      _votingEscrow: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
