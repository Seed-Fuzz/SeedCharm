/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IAdminInceptionVaultInterface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "borrow(uint256,uint256)": FunctionFragment;
    "claimMimo()": FunctionFragment;
    "collateralCount()": FunctionFragment;
    "collateralId(address)": FunctionFragment;
    "collaterals(uint8)": FunctionFragment;
    "debtNotifier()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositAndBorrow(address,uint256,uint256)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "depositETHAndBorrow(uint256)": FunctionFragment;
    "inceptionCore()": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "lendPAR(uint256,address)": FunctionFragment;
    "mimo()": FunctionFragment;
    "transferMimo(uint256,address)": FunctionFragment;
    "transferPar(uint256,address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimMimo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collaterals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtNotifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndBorrow",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositETHAndBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inceptionCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendPAR",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "mimo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferMimo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPar",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimMimo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositETHAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendPAR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mimo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMimo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IAdminInceptionVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAdminInceptionVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    claimMimo(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    collateralCount(overrides?: CallOverrides): Promise<[number]>;

    collateralId(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    collaterals(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    debtNotifier(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositETH(
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    inceptionCore(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    lendPAR(
      _amoutn: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mimo(overrides?: CallOverrides): Promise<[string]>;

    transferMimo(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    transferPar(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  borrow(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  claimMimo(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  collateralCount(overrides?: CallOverrides): Promise<number>;

  collateralId(_collateral: string, overrides?: CallOverrides): Promise<number>;

  collaterals(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  debtNotifier(overrides?: CallOverrides): Promise<string>;

  deposit(
    _collateralType: string,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositAndBorrow(
    _collateralType: string,
    _depositAmount: BigNumberish,
    _vaultId: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositETH(
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositETHAndBorrow(
    _borrowAmount: BigNumberish,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  inceptionCore(overrides?: CallOverrides): Promise<string>;

  initialize(
    owner: string,
    _addressProvider: string,
    _debtNotifier: string,
    _WETH: string,
    _mimo: string,
    _inceptionVaultsCore: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  lendPAR(
    _amoutn: BigNumberish,
    _to: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mimo(overrides?: CallOverrides): Promise<string>;

  transferMimo(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  transferPar(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMimo(overrides?: CallOverrides): Promise<void>;

    collateralCount(overrides?: CallOverrides): Promise<number>;

    collateralId(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<number>;

    collaterals(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    debtNotifier(overrides?: CallOverrides): Promise<string>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    inceptionCore(overrides?: CallOverrides): Promise<string>;

    initialize(
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lendPAR(
      _amoutn: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mimo(overrides?: CallOverrides): Promise<string>;

    transferMimo(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPar(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    claimMimo(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    collateralCount(overrides?: CallOverrides): Promise<BigNumber>;

    collateralId(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collaterals(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtNotifier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    inceptionCore(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    lendPAR(
      _amoutn: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mimo(overrides?: CallOverrides): Promise<BigNumber>;

    transferMimo(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    transferPar(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    claimMimo(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    collateralCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralId(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collaterals(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtNotifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    inceptionCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    lendPAR(
      _amoutn: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mimo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferMimo(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    transferPar(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
