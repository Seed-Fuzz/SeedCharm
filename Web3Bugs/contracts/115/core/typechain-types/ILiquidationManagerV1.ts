/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ILiquidationManagerV1Interface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "applyLiquidationDiscount(uint256)": FunctionFragment;
    "calculateHealthFactor(address,uint256,uint256)": FunctionFragment;
    "isHealthy(address,uint256,uint256)": FunctionFragment;
    "liquidationBonus(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "applyLiquidationDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHealthFactor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isHealthy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationBonus",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyLiquidationDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHealthy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationBonus",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILiquidationManagerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidationManagerV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    applyLiquidationDiscount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & {discountedAmount: BigNumber}>;

    calculateHealthFactor(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & {healthFactor: BigNumber}>;

    isHealthy(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidationBonus(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & {bonus: BigNumber}>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  applyLiquidationDiscount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateHealthFactor(
    _collateralType: string,
    _collateralValue: BigNumberish,
    _vaultDebt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isHealthy(
    _collateralType: string,
    _collateralValue: BigNumberish,
    _vaultDebt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidationBonus(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    applyLiquidationDiscount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateHealthFactor(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHealthy(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidationBonus(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    applyLiquidationDiscount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateHealthFactor(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHealthy(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationBonus(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyLiquidationDiscount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateHealthFactor(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHealthy(
      _collateralType: string,
      _collateralValue: BigNumberish,
      _vaultDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationBonus(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
