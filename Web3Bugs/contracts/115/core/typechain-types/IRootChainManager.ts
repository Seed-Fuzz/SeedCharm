/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IRootChainManagerInterface extends ethers.utils.Interface {
  functions: {
    "depositEtherFor(address)": FunctionFragment;
    "depositFor(address,address,bytes)": FunctionFragment;
    "exit(bytes)": FunctionFragment;
    "mapToken(address,address,bytes32)": FunctionFragment;
    "registerPredicate(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositEtherFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "mapToken",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPredicate",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositEtherFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPredicate",
    data: BytesLike
  ): Result;

  events: {
    "PredicateRegistered(bytes32,address)": EventFragment;
    "TokenMapped(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PredicateRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapped"): EventFragment;
}

export type PredicateRegisteredEvent = TypedEvent<
  [string, string],
  {tokenType: string; predicateAddress: string}
>;

export type PredicateRegisteredEventFilter =
  TypedEventFilter<PredicateRegisteredEvent>;

export type TokenMappedEvent = TypedEvent<
  [string, string, string],
  {rootToken: string; childToken: string; tokenType: string}
>;

export type TokenMappedEventFilter = TypedEventFilter<TokenMappedEvent>;

export interface IRootChainManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRootChainManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositEtherFor(
      user: string,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositFor(
      user: string,
      rootToken: string,
      depositData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    exit(
      inputData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mapToken(
      rootToken: string,
      childToken: string,
      tokenType: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    registerPredicate(
      tokenType: BytesLike,
      predicateAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  depositEtherFor(
    user: string,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositFor(
    user: string,
    rootToken: string,
    depositData: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  exit(
    inputData: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mapToken(
    rootToken: string,
    childToken: string,
    tokenType: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  registerPredicate(
    tokenType: BytesLike,
    predicateAddress: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    depositEtherFor(user: string, overrides?: CallOverrides): Promise<void>;

    depositFor(
      user: string,
      rootToken: string,
      depositData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(inputData: BytesLike, overrides?: CallOverrides): Promise<void>;

    mapToken(
      rootToken: string,
      childToken: string,
      tokenType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPredicate(
      tokenType: BytesLike,
      predicateAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PredicateRegistered(bytes32,address)"(
      tokenType?: BytesLike | null,
      predicateAddress?: string | null
    ): PredicateRegisteredEventFilter;
    PredicateRegistered(
      tokenType?: BytesLike | null,
      predicateAddress?: string | null
    ): PredicateRegisteredEventFilter;

    "TokenMapped(address,address,bytes32)"(
      rootToken?: string | null,
      childToken?: string | null,
      tokenType?: BytesLike | null
    ): TokenMappedEventFilter;
    TokenMapped(
      rootToken?: string | null,
      childToken?: string | null,
      tokenType?: BytesLike | null
    ): TokenMappedEventFilter;
  };

  estimateGas: {
    depositEtherFor(
      user: string,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositFor(
      user: string,
      rootToken: string,
      depositData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    exit(
      inputData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mapToken(
      rootToken: string,
      childToken: string,
      tokenType: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    registerPredicate(
      tokenType: BytesLike,
      predicateAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositEtherFor(
      user: string,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositFor(
      user: string,
      rootToken: string,
      depositData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    exit(
      inputData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mapToken(
      rootToken: string,
      childToken: string,
      tokenType: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    registerPredicate(
      tokenType: BytesLike,
      predicateAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
