/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IVaultsCoreStateInterface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "availableIncome()": FunctionFragment;
    "cumulativeRates(address)": FunctionFragment;
    "initializeRates(address)": FunctionFragment;
    "lastRefresh(address)": FunctionFragment;
    "refresh()": FunctionFragment;
    "refreshCollateral(address)": FunctionFragment;
    "syncState(address)": FunctionFragment;
    "syncStateFromV1(address)": FunctionFragment;
    "synced()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableIncome",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRates",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lastRefresh", values: [string]): string;
  encodeFunctionData(functionFragment: "refresh", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refreshCollateral",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "syncState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "syncStateFromV1",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "synced", values?: undefined): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRefresh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refresh", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncStateFromV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synced", data: BytesLike): Result;

  events: {
    "CumulativeRateUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CumulativeRateUpdated"): EventFragment;
}

export type CumulativeRateUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {collateralType: string; elapsedTime: BigNumber; newCumulativeRate: BigNumber}
>;

export type CumulativeRateUpdatedEventFilter =
  TypedEventFilter<CumulativeRateUpdatedEvent>;

export interface IVaultsCoreState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultsCoreStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    availableIncome(overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initializeRates(
      _collateralType: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    lastRefresh(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    refresh(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    refreshCollateral(
      collateralType: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    syncState(
      _stateAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    syncStateFromV1(
      _core: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    synced(overrides?: CallOverrides): Promise<[boolean]>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  availableIncome(overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeRates(
    _collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializeRates(
    _collateralType: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  lastRefresh(
    _collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  refresh(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  refreshCollateral(
    collateralType: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  syncState(
    _stateAddress: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  syncStateFromV1(
    _core: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  synced(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    availableIncome(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastRefresh(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refresh(overrides?: CallOverrides): Promise<void>;

    refreshCollateral(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<void>;

    syncState(_stateAddress: string, overrides?: CallOverrides): Promise<void>;

    syncStateFromV1(_core: string, overrides?: CallOverrides): Promise<void>;

    synced(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "CumulativeRateUpdated(address,uint256,uint256)"(
      collateralType?: string | null,
      elapsedTime?: null,
      newCumulativeRate?: null
    ): CumulativeRateUpdatedEventFilter;
    CumulativeRateUpdated(
      collateralType?: string | null,
      elapsedTime?: null,
      newCumulativeRate?: null
    ): CumulativeRateUpdatedEventFilter;
  };

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    availableIncome(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeRates(
      _collateralType: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    lastRefresh(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refresh(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    refreshCollateral(
      collateralType: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    syncState(
      _stateAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    syncStateFromV1(
      _core: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    synced(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableIncome(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeRates(
      _collateralType: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    lastRefresh(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refresh(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    refreshCollateral(
      collateralType: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    syncState(
      _stateAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    syncStateFromV1(
      _core: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    synced(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
