/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type VaultConfigStruct = {
  liquidationRatio: BigNumberish;
  minCollateralRatio: BigNumberish;
  borrowRate: BigNumberish;
  originationFee: BigNumberish;
  liquidationBonus: BigNumberish;
  liquidationFee: BigNumberish;
};

export type VaultConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  liquidationRatio: BigNumber;
  minCollateralRatio: BigNumber;
  borrowRate: BigNumber;
  originationFee: BigNumber;
  liquidationBonus: BigNumber;
  liquidationFee: BigNumber;
};

export type InceptionVaultStruct = {
  owner: string;
  adminInceptionVault: string;
  inceptionVaultsCore: string;
  inceptionVaultsDataProvider: string;
  inceptionVaultPriceFeed: string;
  isCustomPriceFeed: boolean;
};

export type InceptionVaultStructOutput = [
  string,
  string,
  string,
  string,
  string,
  boolean
] & {
  owner: string;
  adminInceptionVault: string;
  inceptionVaultsCore: string;
  inceptionVaultsDataProvider: string;
  inceptionVaultPriceFeed: string;
  isCustomPriceFeed: boolean;
};

export interface InceptionVaultFactoryInterface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "addPriceFeed(address)": FunctionFragment;
    "adminInceptionVaultBase()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "cloneInceptionVault((uint256,uint256,uint256,uint256,uint256,uint256),address,address,address)": FunctionFragment;
    "debtNotifier()": FunctionFragment;
    "inceptionVaultCount()": FunctionFragment;
    "inceptionVaults(uint256)": FunctionFragment;
    "inceptionVaultsCoreBase()": FunctionFragment;
    "inceptionVaultsDataProviderBase()": FunctionFragment;
    "mimo()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "priceFeedCount()": FunctionFragment;
    "priceFeedIds(address)": FunctionFragment;
    "priceFeeds(uint8)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminInceptionVaultBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cloneInceptionVault",
    values: [VaultConfigStruct, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtNotifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inceptionVaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inceptionVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inceptionVaultsCoreBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inceptionVaultsDataProviderBase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mimo", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminInceptionVaultBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cloneInceptionVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionVaultsCoreBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionVaultsDataProviderBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mimo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "InceptionVaultDeployed(address,address,address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceFeedAdded(uint16,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InceptionVaultDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedAdded"): EventFragment;
}

export type InceptionVaultDeployedEvent = TypedEvent<
  [string, string, string, string, string],
  {
    owner: string;
    adminInceptionVault: string;
    inceptionVaultsCore: string;
    inceptionVaultsDataProvider: string;
    inceptionVaultPriceFeed: string;
  }
>;

export type InceptionVaultDeployedEventFilter =
  TypedEventFilter<InceptionVaultDeployedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  {previousOwner: string; newOwner: string}
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PriceFeedAddedEvent = TypedEvent<
  [number, string],
  {_id: number; _address: string}
>;

export type PriceFeedAddedEventFilter = TypedEventFilter<PriceFeedAddedEvent>;

export interface InceptionVaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InceptionVaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    addPriceFeed(
      _address: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    adminInceptionVaultBase(overrides?: CallOverrides): Promise<[string]>;

    claimOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    cloneInceptionVault(
      _vaultConfig: VaultConfigStruct,
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    debtNotifier(overrides?: CallOverrides): Promise<[string]>;

    inceptionVaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    inceptionVaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[InceptionVaultStructOutput]>;

    inceptionVaultsCoreBase(overrides?: CallOverrides): Promise<[string]>;

    inceptionVaultsDataProviderBase(
      overrides?: CallOverrides
    ): Promise<[string]>;

    mimo(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    priceFeedCount(overrides?: CallOverrides): Promise<[number]>;

    priceFeedIds(
      _priceFeed: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    priceFeeds(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  addPriceFeed(
    _address: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  adminInceptionVaultBase(overrides?: CallOverrides): Promise<string>;

  claimOwnership(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  cloneInceptionVault(
    _vaultConfig: VaultConfigStruct,
    _inceptionCollateral: string,
    _inceptionVaultPriceFeed: string,
    _assetOracle: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  debtNotifier(overrides?: CallOverrides): Promise<string>;

  inceptionVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  inceptionVaults(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<InceptionVaultStructOutput>;

  inceptionVaultsCoreBase(overrides?: CallOverrides): Promise<string>;

  inceptionVaultsDataProviderBase(overrides?: CallOverrides): Promise<string>;

  mimo(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  priceFeedCount(overrides?: CallOverrides): Promise<number>;

  priceFeedIds(_priceFeed: string, overrides?: CallOverrides): Promise<number>;

  priceFeeds(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    addPriceFeed(_address: string, overrides?: CallOverrides): Promise<void>;

    adminInceptionVaultBase(overrides?: CallOverrides): Promise<string>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    cloneInceptionVault(
      _vaultConfig: VaultConfigStruct,
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    debtNotifier(overrides?: CallOverrides): Promise<string>;

    inceptionVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionVaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<InceptionVaultStructOutput>;

    inceptionVaultsCoreBase(overrides?: CallOverrides): Promise<string>;

    inceptionVaultsDataProviderBase(overrides?: CallOverrides): Promise<string>;

    mimo(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    priceFeedCount(overrides?: CallOverrides): Promise<number>;

    priceFeedIds(
      _priceFeed: string,
      overrides?: CallOverrides
    ): Promise<number>;

    priceFeeds(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "InceptionVaultDeployed(address,address,address,address,address)"(
      owner?: null,
      adminInceptionVault?: null,
      inceptionVaultsCore?: null,
      inceptionVaultsDataProvider?: null,
      inceptionVaultPriceFeed?: null
    ): InceptionVaultDeployedEventFilter;
    InceptionVaultDeployed(
      owner?: null,
      adminInceptionVault?: null,
      inceptionVaultsCore?: null,
      inceptionVaultsDataProvider?: null,
      inceptionVaultPriceFeed?: null
    ): InceptionVaultDeployedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PriceFeedAdded(uint16,address)"(
      _id?: null,
      _address?: null
    ): PriceFeedAddedEventFilter;
    PriceFeedAdded(_id?: null, _address?: null): PriceFeedAddedEventFilter;
  };

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    addPriceFeed(
      _address: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    adminInceptionVaultBase(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    cloneInceptionVault(
      _vaultConfig: VaultConfigStruct,
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    debtNotifier(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionVaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inceptionVaultsCoreBase(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionVaultsDataProviderBase(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mimo(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedCount(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedIds(
      _priceFeed: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeeds(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPriceFeed(
      _address: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    adminInceptionVaultBase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    cloneInceptionVault(
      _vaultConfig: VaultConfigStruct,
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    debtNotifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inceptionVaultCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inceptionVaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inceptionVaultsCoreBase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inceptionVaultsDataProviderBase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mimo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedIds(
      _priceFeed: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeeds(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
