/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type InceptionVaultStruct = {
  owner: string;
  collateralBalance: BigNumberish;
  baseDebt: BigNumberish;
  createdAt: BigNumberish;
};

export type InceptionVaultStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  owner: string;
  collateralBalance: BigNumber;
  baseDebt: BigNumber;
  createdAt: BigNumber;
};

export interface InceptionVaultsDataProviderInterface
  extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "baseDebt()": FunctionFragment;
    "createVault(address)": FunctionFragment;
    "inceptionVaultCount()": FunctionFragment;
    "inceptionVaultsCore()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "setBaseDebt(uint256,uint256)": FunctionFragment;
    "setCollateralBalance(uint256,uint256)": FunctionFragment;
    "vaultBaseDebt(uint256)": FunctionFragment;
    "vaultCollateralBalance(uint256)": FunctionFragment;
    "vaultDebt(uint256)": FunctionFragment;
    "vaultExists(uint256)": FunctionFragment;
    "vaultId(address)": FunctionFragment;
    "vaultOwner(uint256)": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "createVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "inceptionVaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inceptionVaultsCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCollateralBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaultId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inceptionVaultsCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultBaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {};
}

export interface InceptionVaultsDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InceptionVaultsDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    baseDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    createVault(
      _owner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    inceptionVaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    inceptionVaultsCore(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      inceptionVaultsCore: string,
      addressProvider: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setCollateralBalance(
      _vaultId: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultExists(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vaultId(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultOwner(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    vaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[InceptionVaultStructOutput]>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  baseDebt(overrides?: CallOverrides): Promise<BigNumber>;

  createVault(
    _owner: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  inceptionVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  inceptionVaultsCore(overrides?: CallOverrides): Promise<string>;

  initialize(
    inceptionVaultsCore: string,
    addressProvider: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setBaseDebt(
    _id: BigNumberish,
    _newBaseDebt: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setCollateralBalance(
    _vaultId: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  vaultBaseDebt(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultCollateralBalance(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultDebt(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultExists(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  vaultId(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultOwner(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vaults(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<InceptionVaultStructOutput>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    baseDebt(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    inceptionVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionVaultsCore(overrides?: CallOverrides): Promise<string>;

    initialize(
      inceptionVaultsCore: string,
      addressProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralBalance(
      _vaultId: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultExists(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    vaultId(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultOwner(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<InceptionVaultStructOutput>;
  };

  filters: {};

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    baseDebt(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(
      _owner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    inceptionVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    inceptionVaultsCore(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      inceptionVaultsCore: string,
      addressProvider: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setCollateralBalance(
      _vaultId: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultExists(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultId(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultOwner(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVault(
      _owner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    inceptionVaultCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inceptionVaultsCore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      inceptionVaultsCore: string,
      addressProvider: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setCollateralBalance(
      _vaultId: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultExists(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultId(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultOwner(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
