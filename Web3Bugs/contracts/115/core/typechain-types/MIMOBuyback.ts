/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MIMOBuybackInterface extends ethers.utils.Interface {
  functions: {
    "KEEPER_ROLE()": FunctionFragment;
    "MIMO()": FunctionFragment;
    "PAR()": FunctionFragment;
    "a()": FunctionFragment;
    "balancer()": FunctionFragment;
    "buyMIMO()": FunctionFragment;
    "lockExpiry()": FunctionFragment;
    "poolID()": FunctionFragment;
    "setWhitelistEnabled(bool)": FunctionFragment;
    "whitelistEnabled()": FunctionFragment;
    "withdrawMIMO(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIMO", values?: undefined): string;
  encodeFunctionData(functionFragment: "PAR", values?: undefined): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(functionFragment: "balancer", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyMIMO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setWhitelistEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMIMO",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIMO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PAR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balancer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyMIMO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockExpiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMIMO",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MIMOBuyback extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MIMOBuybackInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MIMO(overrides?: CallOverrides): Promise<[string]>;

    PAR(overrides?: CallOverrides): Promise<[string]>;

    a(overrides?: CallOverrides): Promise<[string]>;

    balancer(overrides?: CallOverrides): Promise<[string]>;

    buyMIMO(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    lockExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolID(overrides?: CallOverrides): Promise<[string]>;

    setWhitelistEnabled(
      _status: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    whitelistEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawMIMO(
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  MIMO(overrides?: CallOverrides): Promise<string>;

  PAR(overrides?: CallOverrides): Promise<string>;

  a(overrides?: CallOverrides): Promise<string>;

  balancer(overrides?: CallOverrides): Promise<string>;

  buyMIMO(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  lockExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  poolID(overrides?: CallOverrides): Promise<string>;

  setWhitelistEnabled(
    _status: boolean,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;

  withdrawMIMO(
    destination: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    MIMO(overrides?: CallOverrides): Promise<string>;

    PAR(overrides?: CallOverrides): Promise<string>;

    a(overrides?: CallOverrides): Promise<string>;

    balancer(overrides?: CallOverrides): Promise<string>;

    buyMIMO(overrides?: CallOverrides): Promise<void>;

    lockExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    poolID(overrides?: CallOverrides): Promise<string>;

    setWhitelistEnabled(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;

    withdrawMIMO(destination: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIMO(overrides?: CallOverrides): Promise<BigNumber>;

    PAR(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    balancer(overrides?: CallOverrides): Promise<BigNumber>;

    buyMIMO(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    lockExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    poolID(overrides?: CallOverrides): Promise<BigNumber>;

    setWhitelistEnabled(
      _status: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    whitelistEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawMIMO(
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIMO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balancer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyMIMO(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    lockExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setWhitelistEnabled(
      _status: boolean,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    whitelistEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawMIMO(
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
