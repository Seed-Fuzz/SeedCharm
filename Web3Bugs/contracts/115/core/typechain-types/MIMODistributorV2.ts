/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MIMODistributorV2Interface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "alreadyMinted()": FunctionFragment;
    "changePayees(address[],uint256[])": FunctionFragment;
    "currentIssuance()": FunctionFragment;
    "getPayees()": FunctionFragment;
    "mintableTokens()": FunctionFragment;
    "payees(uint256)": FunctionFragment;
    "release()": FunctionFragment;
    "shares(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "weeklyIssuanceAt(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "alreadyMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changePayees",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentIssuance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPayees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyIssuanceAt",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alreadyMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePayees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyIssuanceAt",
    data: BytesLike
  ): Result;

  events: {
    "PayeeAdded(address,uint256)": EventFragment;
    "TokensReleased(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensReleased"): EventFragment;
}

export type PayeeAddedEvent = TypedEvent<
  [string, BigNumber],
  {account: string; shares: BigNumber}
>;

export type PayeeAddedEventFilter = TypedEventFilter<PayeeAddedEvent>;

export type TokensReleasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {newTokens: BigNumber; releasedAt: BigNumber}
>;

export type TokensReleasedEventFilter = TypedEventFilter<TokensReleasedEvent>;

export interface MIMODistributorV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MIMODistributorV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    alreadyMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    currentIssuance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPayees(overrides?: CallOverrides): Promise<[string[]]>;

    mintableTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    release(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    shares(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weeklyIssuanceAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  alreadyMinted(overrides?: CallOverrides): Promise<BigNumber>;

  changePayees(
    _payees: string[],
    _shares: BigNumberish[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  currentIssuance(overrides?: CallOverrides): Promise<BigNumber>;

  getPayees(overrides?: CallOverrides): Promise<string[]>;

  mintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

  payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  release(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weeklyIssuanceAt(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    alreadyMinted(overrides?: CallOverrides): Promise<BigNumber>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    getPayees(overrides?: CallOverrides): Promise<string[]>;

    mintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    release(overrides?: CallOverrides): Promise<void>;

    shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weeklyIssuanceAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "PayeeAdded(address,uint256)"(
      account?: null,
      shares?: null
    ): PayeeAddedEventFilter;
    PayeeAdded(account?: null, shares?: null): PayeeAddedEventFilter;

    "TokensReleased(uint256,uint256)"(
      newTokens?: null,
      releasedAt?: null
    ): TokensReleasedEventFilter;
    TokensReleased(
      newTokens?: null,
      releasedAt?: null
    ): TokensReleasedEventFilter;
  };

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    alreadyMinted(overrides?: CallOverrides): Promise<BigNumber>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    currentIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    getPayees(overrides?: CallOverrides): Promise<BigNumber>;

    mintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    release(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weeklyIssuanceAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    alreadyMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    currentIssuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintableTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    shares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weeklyIssuanceAt(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
