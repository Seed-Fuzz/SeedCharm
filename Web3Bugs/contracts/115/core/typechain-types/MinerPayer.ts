/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MinerPayerInterface extends ethers.utils.Interface {
  functions: {
    "KEEPER_ROLE()": FunctionFragment;
    "a()": FunctionFragment;
    "changePayees(address[],uint256[])": FunctionFragment;
    "getPayees()": FunctionFragment;
    "payees(uint256)": FunctionFragment;
    "release(uint256)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changePayees",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "getPayees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePayees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;

  events: {
    "PayeeAdded(address,uint256)": EventFragment;
    "TokensReleased(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensReleased"): EventFragment;
}

export type PayeeAddedEvent = TypedEvent<
  [string, BigNumber],
  {account: string; shares: BigNumber}
>;

export type PayeeAddedEventFilter = TypedEventFilter<PayeeAddedEvent>;

export type TokensReleasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {newTokens: BigNumber; releasedAt: BigNumber}
>;

export type TokensReleasedEventFilter = TypedEventFilter<TokensReleasedEvent>;

export interface MinerPayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinerPayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    a(overrides?: CallOverrides): Promise<[string]>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    getPayees(overrides?: CallOverrides): Promise<[string[]]>;

    payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    release(
      totalAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    shares(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  a(overrides?: CallOverrides): Promise<string>;

  changePayees(
    _payees: string[],
    _shares: BigNumberish[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  getPayees(overrides?: CallOverrides): Promise<string[]>;

  payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  release(
    totalAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    a(overrides?: CallOverrides): Promise<string>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPayees(overrides?: CallOverrides): Promise<string[]>;

    payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    release(
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PayeeAdded(address,uint256)"(
      account?: null,
      shares?: null
    ): PayeeAddedEventFilter;
    PayeeAdded(account?: null, shares?: null): PayeeAddedEventFilter;

    "TokensReleased(uint256,uint256)"(
      newTokens?: null,
      releasedAt?: null
    ): TokensReleasedEventFilter;
    TokensReleased(
      newTokens?: null,
      releasedAt?: null
    ): TokensReleasedEventFilter;
  };

  estimateGas: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    getPayees(overrides?: CallOverrides): Promise<BigNumber>;

    payees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    release(
      totalAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changePayees(
      _payees: string[],
      _shares: BigNumberish[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    getPayees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    release(
      totalAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    shares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
