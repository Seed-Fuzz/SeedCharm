/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type BoostConfigStruct = {
  a: BigNumberish;
  b: BigNumberish;
  c: BigNumberish;
  d: BigNumberish;
  e: BigNumberish;
  maxBoost: BigNumberish;
};

export type BoostConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  a: BigNumber;
  b: BigNumber;
  c: BigNumber;
  d: BigNumber;
  e: BigNumber;
  maxBoost: BigNumber;
};

export type UserInfoStruct = {
  stake: BigNumberish;
  stakeWithBoost: BigNumberish;
  accAmountPerShare: BigNumberish;
  accParAmountPerShare: BigNumberish;
};

export type UserInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  stake: BigNumber;
  stakeWithBoost: BigNumber;
  accAmountPerShare: BigNumber;
  accParAmountPerShare: BigNumber;
};

export interface PARMinerV2Interface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "boostConfig()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "liquidate(uint256,uint256,uint256,bytes)": FunctionFragment;
    "liquidateCallerReward()": FunctionFragment;
    "par()": FunctionFragment;
    "pendingMIMO(address)": FunctionFragment;
    "pendingPAR(address)": FunctionFragment;
    "releaseRewards(address)": FunctionFragment;
    "restakePAR(address)": FunctionFragment;
    "setBoostConfig((uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setLiquidateCallerReward(uint256)": FunctionFragment;
    "stake(address)": FunctionFragment;
    "stakeWithBoost(address)": FunctionFragment;
    "totalStake()": FunctionFragment;
    "totalStakeWithBoost()": FunctionFragment;
    "updateBoost(address)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCallerReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "par", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingMIMO", values: [string]): string;
  encodeFunctionData(functionFragment: "pendingPAR", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "restakePAR", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBoostConfig",
    values: [BoostConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateCallerReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeWithBoost",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeWithBoost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateBoost", values: [string]): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCallerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "par", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingMIMO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingPAR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "restakePAR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBoostConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateCallerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeWithBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BoostConfigSet(tuple)": EventFragment;
    "StakeDecreased(address,uint256)": EventFragment;
    "StakeIncreased(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoostConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeIncreased"): EventFragment;
}

export type BoostConfigSetEvent = TypedEvent<
  [BoostConfigStructOutput],
  {arg0: BoostConfigStructOutput}
>;

export type BoostConfigSetEventFilter = TypedEventFilter<BoostConfigSetEvent>;

export type StakeDecreasedEvent = TypedEvent<
  [string, BigNumber],
  {user: string; stake: BigNumber}
>;

export type StakeDecreasedEventFilter = TypedEventFilter<StakeDecreasedEvent>;

export type StakeIncreasedEvent = TypedEvent<
  [string, BigNumber],
  {user: string; stake: BigNumber}
>;

export type StakeIncreasedEventFilter = TypedEventFilter<StakeIncreasedEvent>;

export interface PARMinerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PARMinerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    boostConfig(overrides?: CallOverrides): Promise<[BoostConfigStructOutput]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    liquidate(
      vaultId: BigNumberish,
      amount: BigNumberish,
      dexIndex: BigNumberish,
      dexTxData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    liquidateCallerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    par(overrides?: CallOverrides): Promise<[string]>;

    pendingMIMO(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingPAR(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseRewards(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    restakePAR(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setBoostConfig(
      newBoostConfig: BoostConfigStruct,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setLiquidateCallerReward(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    stake(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeWithBoost(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakeWithBoost(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateBoost(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    userInfo(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[UserInfoStructOutput]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  boostConfig(overrides?: CallOverrides): Promise<BoostConfigStructOutput>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  liquidate(
    vaultId: BigNumberish,
    amount: BigNumberish,
    dexIndex: BigNumberish,
    dexTxData: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  liquidateCallerReward(overrides?: CallOverrides): Promise<BigNumber>;

  par(overrides?: CallOverrides): Promise<string>;

  pendingMIMO(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  pendingPAR(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  releaseRewards(
    _user: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  restakePAR(
    _user: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setBoostConfig(
    newBoostConfig: BoostConfigStruct,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setLiquidateCallerReward(
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  stake(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakeWithBoost(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakeWithBoost(overrides?: CallOverrides): Promise<BigNumber>;

  updateBoost(
    _user: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  userInfo(
    _user: string,
    overrides?: CallOverrides
  ): Promise<UserInfoStructOutput>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    boostConfig(overrides?: CallOverrides): Promise<BoostConfigStructOutput>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    liquidate(
      vaultId: BigNumberish,
      amount: BigNumberish,
      dexIndex: BigNumberish,
      dexTxData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateCallerReward(overrides?: CallOverrides): Promise<BigNumber>;

    par(overrides?: CallOverrides): Promise<string>;

    pendingMIMO(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingPAR(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    releaseRewards(_user: string, overrides?: CallOverrides): Promise<void>;

    restakePAR(_user: string, overrides?: CallOverrides): Promise<void>;

    setBoostConfig(
      newBoostConfig: BoostConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidateCallerReward(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeWithBoost(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeWithBoost(overrides?: CallOverrides): Promise<BigNumber>;

    updateBoost(_user: string, overrides?: CallOverrides): Promise<void>;

    userInfo(
      _user: string,
      overrides?: CallOverrides
    ): Promise<UserInfoStructOutput>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BoostConfigSet(tuple)"(undefined?: null): BoostConfigSetEventFilter;
    BoostConfigSet(undefined?: null): BoostConfigSetEventFilter;

    "StakeDecreased(address,uint256)"(
      user?: string | null,
      stake?: null
    ): StakeDecreasedEventFilter;
    StakeDecreased(
      user?: string | null,
      stake?: null
    ): StakeDecreasedEventFilter;

    "StakeIncreased(address,uint256)"(
      user?: string | null,
      stake?: null
    ): StakeIncreasedEventFilter;
    StakeIncreased(
      user?: string | null,
      stake?: null
    ): StakeIncreasedEventFilter;
  };

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    boostConfig(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    liquidate(
      vaultId: BigNumberish,
      amount: BigNumberish,
      dexIndex: BigNumberish,
      dexTxData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    liquidateCallerReward(overrides?: CallOverrides): Promise<BigNumber>;

    par(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMIMO(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingPAR(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    releaseRewards(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    restakePAR(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setBoostConfig(
      newBoostConfig: BoostConfigStruct,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setLiquidateCallerReward(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    stake(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeWithBoost(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeWithBoost(overrides?: CallOverrides): Promise<BigNumber>;

    updateBoost(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    userInfo(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    liquidate(
      vaultId: BigNumberish,
      amount: BigNumberish,
      dexIndex: BigNumberish,
      dexTxData: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    liquidateCallerReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    par(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMIMO(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingPAR(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseRewards(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    restakePAR(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setBoostConfig(
      newBoostConfig: BoostConfigStruct,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setLiquidateCallerReward(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    stake(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeWithBoost(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakeWithBoost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBoost(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    userInfo(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
