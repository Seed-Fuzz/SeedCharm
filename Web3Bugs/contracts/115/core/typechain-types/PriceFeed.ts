/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "PRICE_ORACLE_STALE_THRESHOLD()": FunctionFragment;
    "a()": FunctionFragment;
    "assetOracles(address)": FunctionFragment;
    "convertFrom(address,uint256)": FunctionFragment;
    "convertTo(address,uint256)": FunctionFragment;
    "eurOracle()": FunctionFragment;
    "getAssetPrice(address)": FunctionFragment;
    "setAssetOracle(address,address)": FunctionFragment;
    "setEurOracle(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PRICE_ORACLE_STALE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetOracles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eurOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetOracle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEurOracle",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "PRICE_ORACLE_STALE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convertTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eurOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEurOracle",
    data: BytesLike
  ): Result;

  events: {
    "EurOracleUpdated(address,address)": EventFragment;
    "OracleUpdated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EurOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
}

export type EurOracleUpdatedEvent = TypedEvent<
  [string, string],
  {oracle: string; sender: string}
>;

export type EurOracleUpdatedEventFilter =
  TypedEventFilter<EurOracleUpdatedEvent>;

export type OracleUpdatedEvent = TypedEvent<
  [string, string, string],
  {asset: string; oracle: string; sender: string}
>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface PriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRICE_ORACLE_STALE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    a(overrides?: CallOverrides): Promise<[string]>;

    assetOracles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    convertFrom(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertTo(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eurOracle(overrides?: CallOverrides): Promise<[string]>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & {price: BigNumber}>;

    setAssetOracle(
      _asset: string,
      _oracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setEurOracle(
      _oracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  PRICE_ORACLE_STALE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  a(overrides?: CallOverrides): Promise<string>;

  assetOracles(arg0: string, overrides?: CallOverrides): Promise<string>;

  convertFrom(
    _asset: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertTo(
    _asset: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eurOracle(overrides?: CallOverrides): Promise<string>;

  getAssetPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  setAssetOracle(
    _asset: string,
    _oracle: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setEurOracle(
    _oracle: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    PRICE_ORACLE_STALE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<string>;

    assetOracles(arg0: string, overrides?: CallOverrides): Promise<string>;

    convertFrom(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTo(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eurOracle(overrides?: CallOverrides): Promise<string>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetOracle(
      _asset: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEurOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EurOracleUpdated(address,address)"(
      oracle?: null,
      sender?: null
    ): EurOracleUpdatedEventFilter;
    EurOracleUpdated(oracle?: null, sender?: null): EurOracleUpdatedEventFilter;

    "OracleUpdated(address,address,address)"(
      asset?: string | null,
      oracle?: null,
      sender?: null
    ): OracleUpdatedEventFilter;
    OracleUpdated(
      asset?: string | null,
      oracle?: null,
      sender?: null
    ): OracleUpdatedEventFilter;
  };

  estimateGas: {
    PRICE_ORACLE_STALE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    assetOracles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    convertFrom(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTo(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eurOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetOracle(
      _asset: string,
      _oracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setEurOracle(
      _oracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_ORACLE_STALE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetOracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertFrom(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertTo(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eurOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetOracle(
      _asset: string,
      _oracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setEurOracle(
      _oracle: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
