/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StabilizerInterface extends ethers.utils.Interface {
  functions: {
    "AUTOMATOR_ADDRESS()": FunctionFragment;
    "PAR()": FunctionFragment;
    "WETH()": FunctionFragment;
    "a()": FunctionFragment;
    "demandMiner()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "mimoDistributor()": FunctionFragment;
    "owner()": FunctionFragment;
    "pool()": FunctionFragment;
    "refreshAndRelease()": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
    "withdrawAll(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUTOMATOR_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PAR", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "demandMiner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mimoDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refreshAndRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "withdrawAll", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "AUTOMATOR_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PAR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "demandMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mimoDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshAndRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Stabilizer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StabilizerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTOMATOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    PAR(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    a(overrides?: CallOverrides): Promise<[string]>;

    demandMiner(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    mimoDistributor(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    refreshAndRelease(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    withdrawAll(
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  AUTOMATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  PAR(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  a(overrides?: CallOverrides): Promise<string>;

  demandMiner(overrides?: CallOverrides): Promise<string>;

  liquidate(
    vaultId: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  mimoDistributor(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  refreshAndRelease(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  withdraw(
    tokenAddress: string,
    amount: BigNumberish,
    destination: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  withdrawAll(
    destination: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTOMATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    PAR(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    a(overrides?: CallOverrides): Promise<string>;

    demandMiner(overrides?: CallOverrides): Promise<string>;

    liquidate(vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mimoDistributor(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    refreshAndRelease(overrides?: CallOverrides): Promise<void>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(destination: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    AUTOMATOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    PAR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    demandMiner(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    mimoDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    refreshAndRelease(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    withdrawAll(
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTOMATOR_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    demandMiner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    mimoDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshAndRelease(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      destination: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
