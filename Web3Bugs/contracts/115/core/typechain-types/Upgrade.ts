/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface UpgradeInterface extends ethers.utils.Interface {
  functions: {
    "LIQUIDATION_BONUS()": FunctionFragment;
    "a()": FunctionFragment;
    "bpool()": FunctionFragment;
    "config()": FunctionFragment;
    "core()": FunctionFragment;
    "coreState()": FunctionFragment;
    "debtNotifier()": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "liquidationManager()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "upgrade()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LIQUIDATION_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(functionFragment: "bpool", values?: undefined): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "coreState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtNotifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "LIQUIDATION_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bpool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coreState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {};
}

export interface Upgrade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UpgradeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LIQUIDATION_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    a(overrides?: CallOverrides): Promise<[string]>;

    bpool(overrides?: CallOverrides): Promise<[string]>;

    config(overrides?: CallOverrides): Promise<[string]>;

    core(overrides?: CallOverrides): Promise<[string]>;

    coreState(overrides?: CallOverrides): Promise<[string]>;

    debtNotifier(overrides?: CallOverrides): Promise<[string]>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    liquidationManager(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    upgrade(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  LIQUIDATION_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  a(overrides?: CallOverrides): Promise<string>;

  bpool(overrides?: CallOverrides): Promise<string>;

  config(overrides?: CallOverrides): Promise<string>;

  core(overrides?: CallOverrides): Promise<string>;

  coreState(overrides?: CallOverrides): Promise<string>;

  debtNotifier(overrides?: CallOverrides): Promise<string>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  liquidationManager(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  upgrade(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    LIQUIDATION_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<string>;

    bpool(overrides?: CallOverrides): Promise<string>;

    config(overrides?: CallOverrides): Promise<string>;

    core(overrides?: CallOverrides): Promise<string>;

    coreState(overrides?: CallOverrides): Promise<string>;

    debtNotifier(overrides?: CallOverrides): Promise<string>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    liquidationManager(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    upgrade(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    LIQUIDATION_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    bpool(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    coreState(overrides?: CallOverrides): Promise<BigNumber>;

    debtNotifier(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationManager(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LIQUIDATION_BONUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bpool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coreState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtNotifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
