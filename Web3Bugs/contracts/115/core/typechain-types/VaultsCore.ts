/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VaultsCoreInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "a()": FunctionFragment;
    "acceptUpgrade(address)": FunctionFragment;
    "borrow(uint256,uint256)": FunctionFragment;
    "cumulativeRates(address)": FunctionFragment;
    "debtNotifier()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositAndBorrow(address,uint256,uint256)": FunctionFragment;
    "depositByVaultId(uint256,uint256)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "depositETHAndBorrow(uint256)": FunctionFragment;
    "depositETHByVaultId(uint256)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "liquidatePartial(uint256,uint256)": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "repayAll(uint256)": FunctionFragment;
    "setDebtNotifier(address)": FunctionFragment;
    "state()": FunctionFragment;
    "upgrade(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawETH(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtNotifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndBorrow",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositByVaultId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositETHAndBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETHByVaultId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePartial",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtNotifier",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositByVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositETHAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositETHByVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePartial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "Borrowed(uint256,uint256,address)": EventFragment;
    "Deposited(uint256,uint256,address)": EventFragment;
    "InsurancePaid(uint256,uint256,address)": EventFragment;
    "Liquidated(uint256,uint256,uint256,address,address)": EventFragment;
    "Opened(uint256,address,address)": EventFragment;
    "Repaid(uint256,uint256,address)": EventFragment;
    "Withdrawn(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsurancePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Opened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type BorrowedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  {vaultId: BigNumber; amount: BigNumber; sender: string}
>;

export type BorrowedEventFilter = TypedEventFilter<BorrowedEvent>;

export type DepositedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  {vaultId: BigNumber; amount: BigNumber; sender: string}
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type InsurancePaidEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  {vaultId: BigNumber; insuranceAmount: BigNumber; sender: string}
>;

export type InsurancePaidEventFilter = TypedEventFilter<InsurancePaidEvent>;

export type LiquidatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  {
    vaultId: BigNumber;
    debtRepaid: BigNumber;
    collateralLiquidated: BigNumber;
    owner: string;
    sender: string;
  }
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export type OpenedEvent = TypedEvent<
  [BigNumber, string, string],
  {vaultId: BigNumber; collateralType: string; owner: string}
>;

export type OpenedEventFilter = TypedEventFilter<OpenedEvent>;

export type RepaidEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  {vaultId: BigNumber; amount: BigNumber; sender: string}
>;

export type RepaidEventFilter = TypedEventFilter<RepaidEvent>;

export type WithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  {vaultId: BigNumber; amount: BigNumber; sender: string}
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface VaultsCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultsCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    a(overrides?: CallOverrides): Promise<[string]>;

    acceptUpgrade(
      _oldVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtNotifier(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositByVaultId(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositETH(
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    depositETHByVaultId(
      _vaultId: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    liquidate(
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    liquidatePartial(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    repay(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    repayAll(
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[string]>;

    upgrade(
      _newVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    withdrawETH(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  a(overrides?: CallOverrides): Promise<string>;

  acceptUpgrade(
    _oldVaultsCore: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  borrow(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  cumulativeRates(
    _collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtNotifier(overrides?: CallOverrides): Promise<string>;

  deposit(
    _collateralType: string,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositAndBorrow(
    _collateralType: string,
    _depositAmount: BigNumberish,
    _borrowAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositByVaultId(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositETH(
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositETHAndBorrow(
    _borrowAmount: BigNumberish,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  depositETHByVaultId(
    _vaultId: BigNumberish,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  liquidate(
    _vaultId: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  liquidatePartial(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  repay(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  repayAll(
    _vaultId: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setDebtNotifier(
    _debtNotifier: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<string>;

  upgrade(
    _newVaultsCore: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  withdraw(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  withdrawETH(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    a(overrides?: CallOverrides): Promise<string>;

    acceptUpgrade(
      _oldVaultsCore: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtNotifier(overrides?: CallOverrides): Promise<string>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositByVaultId(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETHByVaultId(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(_vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    liquidatePartial(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAll(_vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<string>;

    upgrade(_newVaultsCore: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Borrowed(uint256,uint256,address)"(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): BorrowedEventFilter;
    Borrowed(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): BorrowedEventFilter;

    "Deposited(uint256,uint256,address)"(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): DepositedEventFilter;
    Deposited(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): DepositedEventFilter;

    "InsurancePaid(uint256,uint256,address)"(
      vaultId?: BigNumberish | null,
      insuranceAmount?: null,
      sender?: string | null
    ): InsurancePaidEventFilter;
    InsurancePaid(
      vaultId?: BigNumberish | null,
      insuranceAmount?: null,
      sender?: string | null
    ): InsurancePaidEventFilter;

    "Liquidated(uint256,uint256,uint256,address,address)"(
      vaultId?: BigNumberish | null,
      debtRepaid?: null,
      collateralLiquidated?: null,
      owner?: string | null,
      sender?: string | null
    ): LiquidatedEventFilter;
    Liquidated(
      vaultId?: BigNumberish | null,
      debtRepaid?: null,
      collateralLiquidated?: null,
      owner?: string | null,
      sender?: string | null
    ): LiquidatedEventFilter;

    "Opened(uint256,address,address)"(
      vaultId?: BigNumberish | null,
      collateralType?: string | null,
      owner?: string | null
    ): OpenedEventFilter;
    Opened(
      vaultId?: BigNumberish | null,
      collateralType?: string | null,
      owner?: string | null
    ): OpenedEventFilter;

    "Repaid(uint256,uint256,address)"(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): RepaidEventFilter;
    Repaid(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): RepaidEventFilter;

    "Withdrawn(uint256,uint256,address)"(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): WithdrawnEventFilter;
    Withdrawn(
      vaultId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    acceptUpgrade(
      _oldVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtNotifier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositByVaultId(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    depositETHByVaultId(
      _vaultId: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    liquidate(
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    liquidatePartial(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    repay(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    repayAll(
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _newVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    withdrawETH(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptUpgrade(
      _oldVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    borrow(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    cumulativeRates(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtNotifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _collateralType: string,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositAndBorrow(
      _collateralType: string,
      _depositAmount: BigNumberish,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositByVaultId(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositETHAndBorrow(
      _borrowAmount: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    depositETHByVaultId(
      _vaultId: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    liquidate(
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    liquidatePartial(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    repay(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    repayAll(
      _vaultId: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setDebtNotifier(
      _debtNotifier: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      _newVaultsCore: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
