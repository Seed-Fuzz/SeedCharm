/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VotingEscrowInterface extends ethers.utils.Interface {
  functions: {
    "MAXTIME()": FunctionFragment;
    "a()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "createLock(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "expireContract()": FunctionFragment;
    "expired()": FunctionFragment;
    "increaseLockAmount(uint256)": FunctionFragment;
    "increaseLockLength(uint256)": FunctionFragment;
    "locked(address)": FunctionFragment;
    "miner()": FunctionFragment;
    "minimumLockTime()": FunctionFragment;
    "name()": FunctionFragment;
    "setMiner(address)": FunctionFragment;
    "setMinimumLockTime(uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "symbol()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAXTIME", values?: undefined): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expireContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expired", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "locked", values: [string]): string;
  encodeFunctionData(functionFragment: "miner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumLockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "setMiner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinimumLockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAXTIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expireContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expired", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "miner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256,uint8,uint256)": EventFragment;
    "Expired()": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Expired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber],
  {
    provider: string;
    value: BigNumber;
    locktime: BigNumber;
    action: number;
    ts: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ExpiredEvent = TypedEvent<[], {}>;

export type ExpiredEventFilter = TypedEventFilter<ExpiredEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {provider: string; value: BigNumber; ts: BigNumber}
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface VotingEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAXTIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    a(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAt(
      _owner: string,
      _blockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createLock(
      _value: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    expireContract(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    expired(overrides?: CallOverrides): Promise<[boolean]>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    increaseLockLength(
      _unlockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & {amount: BigNumber; end: BigNumber}>;

    miner(overrides?: CallOverrides): Promise<[string]>;

    minimumLockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setMiner(
      _miner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setMinimumLockTime(
      _minimumLockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

  a(overrides?: CallOverrides): Promise<string>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAt(
    _owner: string,
    _blockTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createLock(
    _value: BigNumberish,
    _unlockTime: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  expireContract(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  expired(overrides?: CallOverrides): Promise<boolean>;

  increaseLockAmount(
    _value: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  increaseLockLength(
    _unlockTime: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  locked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & {amount: BigNumber; end: BigNumber}>;

  miner(overrides?: CallOverrides): Promise<string>;

  minimumLockTime(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  setMiner(
    _miner: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setMinimumLockTime(
    _minimumLockTime: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<string>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      _owner: string,
      _blockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLock(
      _value: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    expireContract(overrides?: CallOverrides): Promise<void>;

    expired(overrides?: CallOverrides): Promise<boolean>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLockLength(
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & {amount: BigNumber; end: BigNumber}>;

    miner(overrides?: CallOverrides): Promise<string>;

    minimumLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    setMiner(_miner: string, overrides?: CallOverrides): Promise<void>;

    setMinimumLockTime(
      _minimumLockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256,uint8,uint256)"(
      provider?: string | null,
      value?: null,
      locktime?: null,
      action?: BigNumberish | null,
      ts?: null
    ): DepositEventFilter;
    Deposit(
      provider?: string | null,
      value?: null,
      locktime?: null,
      action?: BigNumberish | null,
      ts?: null
    ): DepositEventFilter;

    "Expired()"(): ExpiredEventFilter;
    Expired(): ExpiredEventFilter;

    "Withdraw(address,uint256,uint256)"(
      provider?: string | null,
      value?: null,
      ts?: null
    ): WithdrawEventFilter;
    Withdraw(
      provider?: string | null,
      value?: null,
      ts?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      _owner: string,
      _blockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLock(
      _value: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    expireContract(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    expired(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    increaseLockLength(
      _unlockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    locked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    miner(overrides?: CallOverrides): Promise<BigNumber>;

    minimumLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setMiner(
      _miner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setMinimumLockTime(
      _minimumLockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAXTIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _owner: string,
      _blockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLock(
      _value: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expireContract(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    expired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    increaseLockLength(
      _unlockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    miner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumLockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMiner(
      _miner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setMinimumLockTime(
      _minimumLockTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
