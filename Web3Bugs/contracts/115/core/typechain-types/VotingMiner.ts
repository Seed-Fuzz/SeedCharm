/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type UserInfoStruct = {
  stake: BigNumberish;
  accAmountPerShare: BigNumberish;
};

export type UserInfoStructOutput = [BigNumber, BigNumber] & {
  stake: BigNumber;
  accAmountPerShare: BigNumber;
};

export interface VotingMinerInterface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "pendingMIMO(address)": FunctionFragment;
    "releaseMIMO(address)": FunctionFragment;
    "stake(address)": FunctionFragment;
    "totalStake()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingMIMO", values: [string]): string;
  encodeFunctionData(functionFragment: "releaseMIMO", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingMIMO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseMIMO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "StakeDecreased(address,uint256)": EventFragment;
    "StakeIncreased(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeIncreased"): EventFragment;
}

export type StakeDecreasedEvent = TypedEvent<
  [string, BigNumber],
  {user: string; stake: BigNumber}
>;

export type StakeDecreasedEventFilter = TypedEventFilter<StakeDecreasedEvent>;

export type StakeIncreasedEvent = TypedEvent<
  [string, BigNumber],
  {user: string; stake: BigNumber}
>;

export type StakeIncreasedEventFilter = TypedEventFilter<StakeIncreasedEvent>;

export interface VotingMiner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingMinerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    pendingMIMO(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseMIMO(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    stake(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[UserInfoStructOutput]>;
  };

  a(overrides?: CallOverrides): Promise<string>;

  pendingMIMO(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  releaseMIMO(
    _user: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  stake(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    _user: string,
    overrides?: CallOverrides
  ): Promise<UserInfoStructOutput>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    pendingMIMO(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    releaseMIMO(_user: string, overrides?: CallOverrides): Promise<void>;

    stake(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      _user: string,
      overrides?: CallOverrides
    ): Promise<UserInfoStructOutput>;
  };

  filters: {
    "StakeDecreased(address,uint256)"(
      user?: string | null,
      stake?: null
    ): StakeDecreasedEventFilter;
    StakeDecreased(
      user?: string | null,
      stake?: null
    ): StakeDecreasedEventFilter;

    "StakeIncreased(address,uint256)"(
      user?: string | null,
      stake?: null
    ): StakeIncreasedEventFilter;
    StakeIncreased(
      user?: string | null,
      stake?: null
    ): StakeIncreasedEventFilter;
  };

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMIMO(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    releaseMIMO(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    stake(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMIMO(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseMIMO(
      _user: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    stake(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
