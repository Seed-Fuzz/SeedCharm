/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import type {DemandMiner, DemandMinerInterface} from "../DemandMiner";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IGovernanceAddressProvider",
        name: "_addresses",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "StakeDecreased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "StakeIncreased",
    type: "event",
  },
  {
    inputs: [],
    name: "a",
    outputs: [
      {
        internalType: "contract IGovernanceAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "pendingMIMO",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "releaseMIMO",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stake",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "accAmountPerShare",
            type: "uint256",
          },
        ],
        internalType: "struct IGenericMiner.UserInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012d8380380620012d883398101604081905262000034916200012c565b816001600160a01b0381166200004957600080fd5b600280546001600160a01b0319166001600160a01b0392831617905581166200007157600080fd5b816001600160a01b0316636d9b18236040518163ffffffff1660e01b815260040160206040518083038186803b158015620000ab57600080fd5b505afa158015620000c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e691906200016a565b6001600160a01b0316816001600160a01b031614156200010557600080fd5b600580546001600160a01b0319166001600160a01b039290921691909117905550620001a9565b600080604083850312156200013f578182fd5b82516200014c8162000190565b60208401519092506200015f8162000190565b809150509250929050565b6000602082840312156200017c578081fd5b8151620001898162000190565b9392505050565b6001600160a01b0381168114620001a657600080fd5b50565b61111f80620001b96000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806360ed390a1161006657806360ed390a1461010b5780637c284c0a1461011e5780638b0e9f3f14610131578063b6b55f2514610139578063fc0c546a1461014c57610093565b80630dbe671f146100985780631959a002146100b657806326476204146100d65780632e1a7d4d146100f6575b600080fd5b6100a0610154565b6040516100ad9190610e2f565b60405180910390f35b6100c96100c4366004610d8b565b610163565b6040516100ad9190611088565b6100e96100e4366004610d8b565b61019c565b6040516100ad919061109f565b610109610104366004610de3565b6101b7565b005b610109610119366004610d8b565b6101db565b6100e961012c366004610d8b565b610343565b6100e96104db565b610109610147366004610de3565b6104e1565b6100a0610503565b6002546001600160a01b031681565b61016b610d71565b506001600160a01b031660009081526020818152604091829020825180840190935280548352600101549082015290565b6001600160a01b031660009081526020819052604090205490565b6005546101ce906001600160a01b03163383610512565b6101d83382610568565b50565b6001600160a01b03811660009081526020819052604090206101fb610777565b600061022161021983600101546004546108b690919063ffffffff16565b8354906108e3565b60035490915061023190826108b6565b60035560048054600184015560025460408051636d9b182360e01b815290516001600160a01b0390921692636d9b1823928282019260209290829003018186803b15801561027e57600080fd5b505afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b69190610dc7565b6001600160a01b031663a9059cbb84836040518363ffffffff1660e01b81526004016102e3929190610e67565b602060405180830381600087803b1580156102fd57600080fd5b505af1158015610311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103359190610da7565b61033e57600080fd5b505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316636d9b18236040518163ffffffff1660e01b815260040160206040518083038186803b15801561039457600080fd5b505afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc9190610dc7565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103f79190610e2f565b60206040518083038186803b15801561040f57600080fd5b505afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190610dfb565b90506000610460600354836108b690919063ffffffff16565b9050600061048561047c6001548461092290919063ffffffff16565b60045490610954565b6001600160a01b0386166000908152602081905260409020600101549091506104d2906104b39083906108b6565b6001600160a01b038716600090815260208190526040902054906108e3565b95945050505050565b60015481565b6005546104f9906001600160a01b0316333084610979565b6101d833826109a0565b6005546001600160a01b031681565b61033e8363a9059cbb60e01b8484604051602401610531929190610e67565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b8d565b600081116105915760405162461bcd60e51b815260040161058890610f99565b60405180910390fd5b6001600160a01b038216600090815260208190526040902080548211156105ca5760405162461bcd60e51b815260040161058890611007565b6105d2610777565b60006105f061021983600101546004546108b690919063ffffffff16565b60035490915061060090826108b6565b600355815461060f90846108b6565b82556004546001808401919091555461062890846108b6565b60015560025460408051636d9b182360e01b815290516001600160a01b0390921691636d9b182391600480820192602092909190829003018186803b15801561067057600080fd5b505afa158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190610dc7565b6001600160a01b031663a9059cbb85836040518363ffffffff1660e01b81526004016106d5929190610e67565b602060405180830381600087803b1580156106ef57600080fd5b505af1158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190610da7565b61073057600080fd5b836001600160a01b03167f700865370ffb2a65a2b0242e6a64b21ac907ed5ecd46c9cffc729c177b2b1c6984604051610769919061109f565b60405180910390a250505050565b600154610783576108b4565b60025460408051636d9b182360e01b815290516000926001600160a01b031691636d9b1823916004808301926020929190829003018186803b1580156107c857600080fd5b505afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190610dc7565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161082b9190610e2f565b60206040518083038186803b15801561084357600080fd5b505afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190610dfb565b90506000610894600354836108b690919063ffffffff16565b60038390556001549091506108ae9061047c908390610922565b60045550505b565b6000828211156108d85760405162461bcd60e51b815260040161058890610eea565b508082035b92915050565b600061091b6b033b2e3c9fd0803ce80000006109156109028686610c1c565b6b019d971e4fe8401e7400000090610954565b90610c56565b9392505050565b60006002820461094c83610915610945876b033b2e3c9fd0803ce8000000610c1c565b8490610954565b949350505050565b60008282018381101561091b5760405162461bcd60e51b815260040161058890610eb3565b61099a846323b872dd60e01b85858560405160240161053193929190610e43565b50505050565b600081116109c05760405162461bcd60e51b815260040161058890610f99565b6001600160a01b03821660009081526020819052604090206109e0610777565b805460009015610a1a57610a0661021983600101546004546108b690919063ffffffff16565b600354909150610a1690826108b6565b6003555b600154610a279084610954565b6001558154610a369084610954565b825560045460018301558015610b5457600260009054906101000a90046001600160a01b03166001600160a01b0316636d9b18236040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9457600080fd5b505afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190610dc7565b6001600160a01b031663a9059cbb85836040518363ffffffff1660e01b8152600401610af9929190610e67565b602060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190610da7565b610b5457600080fd5b836001600160a01b03167f8b0ed825817a2e696c9a931715af4609fc60e1701f09c89ee7645130e937eb2d84604051610769919061109f565b6060610be2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c889092919063ffffffff16565b80519091501561033e5780806020019051810190610c009190610da7565b61033e5760405162461bcd60e51b81526004016105889061103e565b600082610c2b575060006108dd565b82820282848281610c3857fe5b041461091b5760405162461bcd60e51b815260040161058890610f58565b6000808211610c775760405162461bcd60e51b815260040161058890610f21565b818381610c8057fe5b049392505050565b606061094c848460008585610c9c85610d32565b610cb85760405162461bcd60e51b815260040161058890610fd0565b60006060866001600160a01b03168587604051610cd59190610e13565b60006040518083038185875af1925050503d8060008114610d12576040519150601f19603f3d011682016040523d82523d6000602084013e610d17565b606091505b5091509150610d27828286610d38565b979650505050505050565b3b151590565b60608315610d4757508161091b565b825115610d575782518084602001fd5b8160405162461bcd60e51b81526004016105889190610e80565b604051806040016040528060008152602001600081525090565b600060208284031215610d9c578081fd5b813561091b816110d4565b600060208284031215610db8578081fd5b8151801515811461091b578182fd5b600060208284031215610dd8578081fd5b815161091b816110d4565b600060208284031215610df4578081fd5b5035919050565b600060208284031215610e0c578081fd5b5051919050565b60008251610e258184602087016110a8565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610e9f8160408501602087016110a8565b601f01601f19169190910160400192915050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601f908201527f5354414b455f4d5553545f42455f475245415445525f5448414e5f5a45524f00604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601b908201527f494e53554646494349454e545f5354414b455f464f525f555345520000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b815181526020918201519181019190915260400190565b90815260200190565b60005b838110156110c35781810151838201526020016110ab565b8381111561099a5750506000910152565b6001600160a01b03811681146101d857600080fdfea26469706673582212209cd04dcd7ae9ce23587b01fb0d0455eeaccdd593dabb25104d9ae2c34eb543c264736f6c634300060c0033";

type DemandMinerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DemandMinerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DemandMiner__factory extends ContractFactory {
  constructor(...args: DemandMinerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _addresses: string,
    _token: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<DemandMiner> {
    return super.deploy(
      _addresses,
      _token,
      overrides || {}
    ) as Promise<DemandMiner>;
  }
  getDeployTransaction(
    _addresses: string,
    _token: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(_addresses, _token, overrides || {});
  }
  attach(address: string): DemandMiner {
    return super.attach(address) as DemandMiner;
  }
  connect(signer: Signer): DemandMiner__factory {
    return super.connect(signer) as DemandMiner__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DemandMinerInterface {
    return new utils.Interface(_abi) as DemandMinerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DemandMiner {
    return new Contract(address, _abi, signerOrProvider) as DemandMiner;
  }
}
