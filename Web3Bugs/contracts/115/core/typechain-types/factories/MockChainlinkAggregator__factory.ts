/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import type {
  MockChainlinkAggregator,
  MockChainlinkAggregatorInterface,
} from "../MockChainlinkAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setLatestPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
    ],
    name: "setUpdatedAt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526003805534801561001457600080fd5b506040516104ba3803806104ba8339818101604052606081101561003757600080fd5b8151602083015160408085018051915193959294830192918464010000000082111561006257600080fd5b90830190602082018581111561007757600080fd5b825164010000000081118282018810171561009157600080fd5b82525081516020918201929091019080838360005b838110156100be5781810151838201526020016100a6565b50505050905090810190601f1680156100eb5780820380516001836020036101000a031916815260200191505b5060405250506004805460ff191660ff86161790555060008290558051610119906002906020840190610127565b505042600155506101ba9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016857805160ff1916838001178555610195565b82800160010185558215610195579182015b8281111561019557825182559160200191906001019061017a565b506101a19291506101a5565b5090565b5b808211156101a157600081556001016101a6565b6102f1806101c96000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637284e4161161005b5780637284e416146100d95780639a6fc8f514610156578063fc9bb7fe146101c9578063feaf968c146101e65761007d565b80631ecc7d8814610082578063313ce567146100a157806354fd4d50146100bf575b600080fd5b61009f6004803603602081101561009857600080fd5b50356101ee565b005b6100a96101f3565b6040805160ff9092168252519081900360200190f35b6100c76101fc565b60408051918252519081900360200190f35b6100e1610202565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561011b578181015183820152602001610103565b50505050905090810190601f1680156101485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017f6004803603602081101561016c57600080fd5b503569ffffffffffffffffffff1661028d565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b61009f600480360360208110156101df57600080fd5b50356102a2565b61017f6102a7565b600155565b60045460ff1681565b60035481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102855780601f1061025a57610100808354040283529160200191610285565b820191906000526020600020905b81548152906001019060200180831161026857829003601f168201915b505050505081565b6000549091635f36ba2f90635f3ae4fc908490565b600055565b600054600154606592635f36ba2f9190849056fea264697066735822122095cce7bbf643cd864ba6dcac8a96eeed70290a96f8d9025b24dce502bf2e6f9364736f6c634300060c0033";

type MockChainlinkAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockChainlinkAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockChainlinkAggregator__factory extends ContractFactory {
  constructor(...args: MockChainlinkAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _decimals: BigNumberish,
    _price: BigNumberish,
    _description: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<MockChainlinkAggregator> {
    return super.deploy(
      _decimals,
      _price,
      _description,
      overrides || {}
    ) as Promise<MockChainlinkAggregator>;
  }
  getDeployTransaction(
    _decimals: BigNumberish,
    _price: BigNumberish,
    _description: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(
      _decimals,
      _price,
      _description,
      overrides || {}
    );
  }
  attach(address: string): MockChainlinkAggregator {
    return super.attach(address) as MockChainlinkAggregator;
  }
  connect(signer: Signer): MockChainlinkAggregator__factory {
    return super.connect(signer) as MockChainlinkAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockChainlinkAggregatorInterface {
    return new utils.Interface(_abi) as MockChainlinkAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockChainlinkAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockChainlinkAggregator;
  }
}
