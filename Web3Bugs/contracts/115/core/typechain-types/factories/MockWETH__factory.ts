/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import type {MockWETH, MockWETHInterface} from "../MockWETH";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604080518082018252600d81526c2bb930b83832b21022ba3432b960991b6020808301918252835180850190945260048452630ae8aa8960e31b90840152815191929161006091600391610089565b508051610074906004906020840190610089565b50506005805460ff191660121790555061011c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ca57805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f75782518255916020019190600101906100dc565b50610103929150610107565b5090565b5b808211156101035760008155600101610108565b610dff8061012b6000396000f3fe6080604052600436106100dd5760003560e01c806340c10f191161007f578063a457c2d711610059578063a457c2d714610334578063a9059cbb1461036d578063d0e30db0146103a6578063dd62ed3e146103ae576100dd565b806340c10f19146102b357806370a08231146102ec57806395d89b411461031f576100dd565b806323b872dd116100bb57806323b872dd146101e05780632e1a7d4d14610223578063313ce5671461024f578063395093511461027a576100dd565b806306fdde03146100e2578063095ea7b31461016c57806318160ddd146101b9575b600080fd5b3480156100ee57600080fd5b506100f76103e9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017857600080fd5b506101a56004803603604081101561018f57600080fd5b506001600160a01b03813516906020013561047f565b604080519115158252519081900360200190f35b3480156101c557600080fd5b506101ce61049c565b60408051918252519081900360200190f35b3480156101ec57600080fd5b506101a56004803603606081101561020357600080fd5b506001600160a01b038135811691602081013590911690604001356104a2565b34801561022f57600080fd5b5061024d6004803603602081101561024657600080fd5b5035610529565b005b34801561025b57600080fd5b50610264610564565b6040805160ff9092168252519081900360200190f35b34801561028657600080fd5b506101a56004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561056d565b3480156102bf57600080fd5b5061024d600480360360408110156102d657600080fd5b506001600160a01b0381351690602001356105bb565b3480156102f857600080fd5b506101ce6004803603602081101561030f57600080fd5b50356001600160a01b03166105c5565b34801561032b57600080fd5b506100f76105e0565b34801561034057600080fd5b506101a56004803603604081101561035757600080fd5b506001600160a01b038135169060200135610641565b34801561037957600080fd5b506101a56004803603604081101561039057600080fd5b506001600160a01b0381351690602001356106a9565b61024d6106bd565b3480156103ba57600080fd5b506101ce600480360360408110156103d157600080fd5b506001600160a01b03813581169160200135166106c9565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b600061049361048c6106f4565b84846106f8565b50600192915050565b60025490565b60006104af8484846107e4565b61051f846104bb6106f4565b61051a85604051806060016040528060288152602001610d13602891396001600160a01b038a166000908152600160205260408120906104f96106f4565b6001600160a01b03168152602081019190915260400160002054919061093f565b6106f8565b5060019392505050565b61053333826109d6565b604051339082156108fc029083906000818181858888f19350505050158015610560573d6000803e3d6000fd5b5050565b60055460ff1690565b600061049361057a6106f4565b8461051a856001600061058b6106f4565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610ad2565b6105608282610b33565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104755780601f1061044a57610100808354040283529160200191610475565b600061049361064e6106f4565b8461051a85604051806060016040528060258152602001610da560259139600160006106786106f4565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061093f565b60006104936106b66106f4565b84846107e4565b6106c73334610b33565b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661073d5760405162461bcd60e51b8152600401808060200182810382526024815260200180610d816024913960400191505060405180910390fd5b6001600160a01b0382166107825760405162461bcd60e51b8152600401808060200182810382526022815260200180610ccb6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166108295760405162461bcd60e51b8152600401808060200182810382526025815260200180610d5c6025913960400191505060405180910390fd5b6001600160a01b03821661086e5760405162461bcd60e51b8152600401808060200182810382526023815260200180610c866023913960400191505060405180910390fd5b610879838383610c23565b6108b681604051806060016040528060268152602001610ced602691396001600160a01b038616600090815260208190526040902054919061093f565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546108e59082610ad2565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109ce5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561099357818101518382015260200161097b565b50505050905090810190601f1680156109c05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216610a1b5760405162461bcd60e51b8152600401808060200182810382526021815260200180610d3b6021913960400191505060405180910390fd5b610a2782600083610c23565b610a6481604051806060016040528060228152602001610ca9602291396001600160a01b038516600090815260208190526040902054919061093f565b6001600160a01b038316600090815260208190526040902055600254610a8a9082610c28565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082820183811015610b2c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610b8e576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610b9a60008383610c23565b600254610ba79082610ad2565b6002556001600160a01b038216600090815260208190526040902054610bcd9082610ad2565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b600082821115610c7f576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f76e3cdb018b1f1c2eb2236d1c2fc11136c0bd422d3ba397eb9d7561c41644a064736f6c634300060c0033";

type MockWETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWETH__factory extends ContractFactory {
  constructor(...args: MockWETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<MockWETH> {
    return super.deploy(overrides || {}) as Promise<MockWETH>;
  }
  getDeployTransaction(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockWETH {
    return super.attach(address) as MockWETH;
  }
  connect(signer: Signer): MockWETH__factory {
    return super.connect(signer) as MockWETH__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWETHInterface {
    return new utils.Interface(_abi) as MockWETHInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWETH {
    return new Contract(address, _abi, signerOrProvider) as MockWETH;
  }
}
