/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import type {RatesManager, RatesManagerInterface} from "../RatesManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "_addresses",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "a",
    outputs: [
      {
        internalType: "contract IAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_borrowRate",
        type: "uint256",
      },
    ],
    name: "annualizedBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_cumulativeRate",
        type: "uint256",
      },
    ],
    name: "calculateBaseDebt",
    outputs: [
      {
        internalType: "uint256",
        name: "baseDebt",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_cumulativeRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timeElapsed",
        type: "uint256",
      },
    ],
    name: "calculateCumulativeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_baseDebt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_cumulativeRate",
        type: "uint256",
      },
    ],
    name: "calculateDebt",
    outputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104ac3803806104ac83398101604081905261002f91610067565b6001600160a01b03811661004257600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055610095565b600060208284031215610078578081fd5b81516001600160a01b038116811461008e578182fd5b9392505050565b610408806100a46000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630dbe671f1461005c5780631c3405e21461007a5780633a282c0a1461009a57806389d224ec146100ad578063e7b5e7bd146100c0575b600080fd5b6100646100d3565b6040516100719190610306565b60405180910390f35b61008d6100883660046102ba565b6100e2565b60405161007191906103c9565b61008d6100a83660046102ba565b6100f7565b61008d6100bb3660046102a2565b610103565b61008d6100ce3660046102db565b610113565b6000546001600160a01b031681565b60006100ee8383610144565b90505b92915050565b60006100ee838361017c565b60006100f1826301e133806101ae565b60008161012157508161013d565b600061012d85846101ae565b90506101398482610144565b9150505b9392505050565b60006100ee6b033b2e3c9fd0803ce80000006101766101638686610208565b6b019d971e4fe8401e740000009061024b565b90610270565b6000600282046101a68361017661019f876b033b2e3c9fd0803ce8000000610208565b849061024b565b949350505050565b6000600282066101ca576b033b2e3c9fd0803ce80000006101cc565b825b90506002820491505b81156100f1576101e58384610144565b925060028206156101fd576101fa8184610144565b90505b6002820491506101d5565b600082610217575060006100f1565b8282028284828161022457fe5b04146100ee5760405162461bcd60e51b815260040161024290610388565b60405180910390fd5b6000828201838110156100ee5760405162461bcd60e51b81526004016102429061031a565b60008082116102915760405162461bcd60e51b815260040161024290610351565b81838161029a57fe5b049392505050565b6000602082840312156102b3578081fd5b5035919050565b600080604083850312156102cc578081fd5b50508035926020909101359150565b6000806000606084860312156102ef578081fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b9081526020019056fea2646970667358221220d74d4cf7bcd6be8ca17ef42405d2574f3c6385e82e96cde9d126750306897d9964736f6c634300060c0033";

type RatesManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RatesManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RatesManager__factory extends ContractFactory {
  constructor(...args: RatesManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _addresses: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<RatesManager> {
    return super.deploy(_addresses, overrides || {}) as Promise<RatesManager>;
  }
  getDeployTransaction(
    _addresses: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(_addresses, overrides || {});
  }
  attach(address: string): RatesManager {
    return super.attach(address) as RatesManager;
  }
  connect(signer: Signer): RatesManager__factory {
    return super.connect(signer) as RatesManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RatesManagerInterface {
    return new utils.Interface(_abi) as RatesManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RatesManager {
    return new Contract(address, _abi, signerOrProvider) as RatesManager;
  }
}
