/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import type {VotingMiner, VotingMinerInterface} from "../VotingMiner";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IGovernanceAddressProvider",
        name: "_addresses",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "StakeDecreased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "StakeIncreased",
    type: "event",
  },
  {
    inputs: [],
    name: "a",
    outputs: [
      {
        internalType: "contract IGovernanceAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "pendingMIMO",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "releaseMIMO",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stake",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "accAmountPerShare",
            type: "uint256",
          },
        ],
        internalType: "struct IGenericMiner.UserInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ae1380380610ae183398101604081905261002f91610069565b806001600160a01b03811661004357600080fd5b600280546001600160a01b0319166001600160a01b039290921691909117905550610097565b60006020828403121561007a578081fd5b81516001600160a01b0381168114610090578182fd5b9392505050565b610a3b806100a66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630dbe671f146100675780631959a0021461008557806326476204146100a557806360ed390a146100c55780637c284c0a146100da5780638b0e9f3f146100ed575b600080fd5b61006f6100f5565b60405161007c91906108ba565b60405180910390f35b61009861009336600461084a565b610104565b60405161007c91906109cd565b6100b86100b336600461084a565b61013d565b60405161007c91906109e4565b6100d86100d336600461084a565b610158565b005b6100b86100e836600461084a565b61041b565b6100b86105b3565b6002546001600160a01b031681565b61010c610830565b506001600160a01b031660009081526020818152604091829020825180840190935280548352600101549082015290565b6001600160a01b031660009081526020819052604090205490565b60025460408051634f2bfe5b60e01b815290516000926001600160a01b031691634f2bfe5b916004808301926020929190829003018186803b15801561019d57600080fd5b505afa1580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610886565b9050336001600160a01b03831614806101f65750336001600160a01b038216145b6101ff57600080fd5b6001600160a01b038216600090815260208190526040902061021f6105b9565b600061024561023d83600101546004546106f890919063ffffffff16565b83549061072e565b60035490915061025590826106f8565b6003556004805460018401556040516370a0823160e01b81526000916001600160a01b038616916370a082319161028e918991016108ba565b60206040518083038186803b1580156102a657600080fd5b505afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de91906108a2565b83546001549192506102fa916102f4908461076d565b906106f8565b600155808355811561041457600260009054906101000a90046001600160a01b03166001600160a01b0316636d9b18236040518163ffffffff1660e01b815260040160206040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610886565b6001600160a01b031663a9059cbb86846040518363ffffffff1660e01b81526004016103b99291906108ce565b602060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610866565b61041457600080fd5b5050505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316636d9b18236040518163ffffffff1660e01b815260040160206040518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610886565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104cf91906108ba565b60206040518083038186803b1580156104e757600080fd5b505afa1580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f91906108a2565b90506000610538600354836106f890919063ffffffff16565b9050600061055d6105546001548461079290919063ffffffff16565b6004549061076d565b6001600160a01b0386166000908152602081905260409020600101549091506105aa9061058b9083906106f8565b6001600160a01b0387166000908152602081905260409020549061072e565b95945050505050565b60015481565b6001546105c5576106f6565b60025460408051636d9b182360e01b815290516000926001600160a01b031691636d9b1823916004808301926020929190829003018186803b15801561060a57600080fd5b505afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106429190610886565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161066d91906108ba565b60206040518083038186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd91906108a2565b905060006106d6600354836106f890919063ffffffff16565b60038390556001549091506106f090610554908390610792565b60045550505b565b6000828211156107235760405162461bcd60e51b815260040161071a9061091e565b60405180910390fd5b508082035b92915050565b60006107666b033b2e3c9fd0803ce800000061076061074d86866107c4565b6b019d971e4fe8401e740000009061076d565b906107fe565b9392505050565b6000828201838110156107665760405162461bcd60e51b815260040161071a906108e7565b6000600282046107bc836107606107b5876b033b2e3c9fd0803ce80000006107c4565b849061076d565b949350505050565b6000826107d357506000610728565b828202828482816107e057fe5b04146107665760405162461bcd60e51b815260040161071a9061098c565b600080821161081f5760405162461bcd60e51b815260040161071a90610955565b81838161082857fe5b049392505050565b604051806040016040528060008152602001600081525090565b60006020828403121561085b578081fd5b8135610766816109ed565b600060208284031215610877578081fd5b81518015158114610766578182fd5b600060208284031215610897578081fd5b8151610766816109ed565b6000602082840312156108b3578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b815181526020918201519181019190915260400190565b90815260200190565b6001600160a01b0381168114610a0257600080fd5b5056fea264697066735822122001bc54332f3e6cfbff7de9c54c24a6e7c62168c59409ca3eef01e110c9b8b29d64736f6c634300060c0033";

type VotingMinerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingMinerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VotingMiner__factory extends ContractFactory {
  constructor(...args: VotingMinerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _addresses: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<VotingMiner> {
    return super.deploy(_addresses, overrides || {}) as Promise<VotingMiner>;
  }
  getDeployTransaction(
    _addresses: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(_addresses, overrides || {});
  }
  attach(address: string): VotingMiner {
    return super.attach(address) as VotingMiner;
  }
  connect(signer: Signer): VotingMiner__factory {
    return super.connect(signer) as VotingMiner__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingMinerInterface {
    return new utils.Interface(_abi) as VotingMinerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingMiner {
    return new Contract(address, _abi, signerOrProvider) as VotingMiner;
  }
}
