/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface AdminInceptionVaultContract
  extends Truffle.Contract<AdminInceptionVaultInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AdminInceptionVaultInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = OwnershipTransferred;

export interface AdminInceptionVaultInstance extends Truffle.ContractInstance {
  /**
   * Needs to be called by `pendingOwner` to claim ownership.
   */
  claimOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.
   * @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.
   * @param newOwner Address of the new owner.
   * @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.
   */
  transferOwnership: {
    (
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _owner: string,
      addressProvider: string,
      debtNotifier: string,
      weth: string,
      mimo: string,
      inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _owner: string,
      addressProvider: string,
      debtNotifier: string,
      weth: string,
      mimo: string,
      inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _owner: string,
      addressProvider: string,
      debtNotifier: string,
      weth: string,
      mimo: string,
      inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      addressProvider: string,
      debtNotifier: string,
      weth: string,
      mimo: string,
      inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A new vault is created if no WETH vault exists*
   * Wraps ETH and deposits WETH into the vault of the msg.sender as collateral
   */
  depositETH: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * see depositETH() and borrow()
   * Wraps ETH and deposits WETH into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI
   * @param _borrowAmount the amount of borrowed StableX tokens in WEI.*
   */
  depositETHAndBorrow: {
    (
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * see deposit() and borrow()
   * Deposit an ERC20 token into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI
   * @param _borrowAmount the amount of borrowed StableX tokens in WEI.*
   * @param _collateralType the address of the collateral type to be deposited
   * @param _depositAmount the amount of tokens to be deposited in WEI.
   */
  depositAndBorrow: {
    (
      _collateralType: string,
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only the owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.
   * Withdraws ERC20 tokens from a vault.
   * @param _amount the amount of ERC20 tokens to be withdrawn in WEI.*
   * @param _vaultId the ID of the vault from which to withdraw the collateral.
   */
  withdraw: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Releases the outstanding MIMO balance.
   */
  claimMimo: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * This function cn only be called by the InceptionVaultsCore.
   * Lends PAR to inceptionVault user.
   * @param _amount the amount of PAR to be lended.
   * @param _to the address of the inceptionVault user.
   */
  lendPAR: {
    (
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC20-transfer}.
   */
  transferMimo: {
    (
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC20-transfer}.
   */
  transferPar: {
    (
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
   * Deposit an ERC20 token into the vault of the msg.sender as collateral
   * @param _amount the amount of tokens to be deposited in WEI.*
   * @param _collateralType the address of the collateral type to be deposited
   */
  deposit: {
    (
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only the owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. `borrow()` will fail if it would bring the vault below the minimum collateralization treshold.
   * Borrow new PAR tokens from a vault.
   * @param _amount the amount of borrowed PAR tokens in WEI.*
   * @param _vaultId the ID of the vault from which to borrow.
   */
  borrow: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

  weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionCore(txDetails?: Truffle.TransactionDetails): Promise<string>;

  collateralCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collaterals(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  collateralId(
    _collateral: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * Needs to be called by `pendingOwner` to claim ownership.
     */
    claimOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.
     * @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.
     * @param newOwner Address of the new owner.
     * @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.
     */
    transferOwnership: {
      (
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialize: {
      (
        _owner: string,
        addressProvider: string,
        debtNotifier: string,
        weth: string,
        mimo: string,
        inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _owner: string,
        addressProvider: string,
        debtNotifier: string,
        weth: string,
        mimo: string,
        inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _owner: string,
        addressProvider: string,
        debtNotifier: string,
        weth: string,
        mimo: string,
        inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        addressProvider: string,
        debtNotifier: string,
        weth: string,
        mimo: string,
        inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A new vault is created if no WETH vault exists*
     * Wraps ETH and deposits WETH into the vault of the msg.sender as collateral
     */
    depositETH: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * see depositETH() and borrow()
     * Wraps ETH and deposits WETH into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI
     * @param _borrowAmount the amount of borrowed StableX tokens in WEI.*
     */
    depositETHAndBorrow: {
      (
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * see deposit() and borrow()
     * Deposit an ERC20 token into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI
     * @param _borrowAmount the amount of borrowed StableX tokens in WEI.*
     * @param _collateralType the address of the collateral type to be deposited
     * @param _depositAmount the amount of tokens to be deposited in WEI.
     */
    depositAndBorrow: {
      (
        _collateralType: string,
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only the owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.
     * Withdraws ERC20 tokens from a vault.
     * @param _amount the amount of ERC20 tokens to be withdrawn in WEI.*
     * @param _vaultId the ID of the vault from which to withdraw the collateral.
     */
    withdraw: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Releases the outstanding MIMO balance.
     */
    claimMimo: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * This function cn only be called by the InceptionVaultsCore.
     * Lends PAR to inceptionVault user.
     * @param _amount the amount of PAR to be lended.
     * @param _to the address of the inceptionVault user.
     */
    lendPAR: {
      (
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC20-transfer}.
     */
    transferMimo: {
      (
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC20-transfer}.
     */
    transferPar: {
      (
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
     * Deposit an ERC20 token into the vault of the msg.sender as collateral
     * @param _amount the amount of tokens to be deposited in WEI.*
     * @param _collateralType the address of the collateral type to be deposited
     */
    deposit: {
      (
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only the owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. `borrow()` will fail if it would bring the vault below the minimum collateralization treshold.
     * Borrow new PAR tokens from a vault.
     * @param _amount the amount of borrowed PAR tokens in WEI.*
     * @param _vaultId the ID of the vault from which to borrow.
     */
    borrow: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

    weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

    inceptionCore(txDetails?: Truffle.TransactionDetails): Promise<string>;

    collateralCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collaterals(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    collateralId(
      _collateral: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
