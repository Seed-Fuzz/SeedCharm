/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface BConstContract extends Truffle.Contract<BConstInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BConstInstance>;
}

type AllEvents = never;

export interface BConstInstance extends Truffle.ContractInstance {
  BONE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  BPOW_PRECISION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  EXIT_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  INIT_POOL_SUPPLY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_BOUND_TOKENS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_BPOW_BASE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_IN_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_OUT_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_TOTAL_WEIGHT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_WEIGHT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MIN_BALANCE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MIN_BOUND_TOKENS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MIN_BPOW_BASE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MIN_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MIN_WEIGHT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    BONE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    BPOW_PRECISION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    EXIT_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    INIT_POOL_SUPPLY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAX_BOUND_TOKENS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAX_BPOW_BASE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAX_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAX_IN_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAX_OUT_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAX_TOTAL_WEIGHT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAX_WEIGHT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MIN_BALANCE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MIN_BOUND_TOKENS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MIN_BPOW_BASE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MIN_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MIN_WEIGHT(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
