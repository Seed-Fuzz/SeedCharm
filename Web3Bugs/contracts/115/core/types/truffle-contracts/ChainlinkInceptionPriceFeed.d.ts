/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface ChainlinkInceptionPriceFeedContract
  extends Truffle.Contract<ChainlinkInceptionPriceFeedInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ChainlinkInceptionPriceFeedInstance>;
}

export interface PriceFeedAdded {
  name: "PriceFeedAdded";
  args: {
    _id: BN;
    _priceFeed: string;
    0: BN;
    1: string;
  };
}

type AllEvents = PriceFeedAdded;

export interface ChainlinkInceptionPriceFeedInstance
  extends Truffle.ContractInstance {
  initialize: {
    (
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _addresses: string,
      inceptionCollateral: string,
      assetOracle: string,
      eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Converts asset balance into stablecoin balance at current price
   * @param _amount amount of collateral
   */
  convertFrom(
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Converts stablecoin balance into collateral balance at current price
   * @param _amount amount of stablecoin
   */
  convertTo(
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * returned value has matching decimals to the asset oracle (not the EUR oracle)
   * Gets the asset price in EUR (PAR)
   */
  getAssetPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionCollateral(txDetails?: Truffle.TransactionDetails): Promise<string>;

  assetOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  eurOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    initialize: {
      (
        _addresses: string,
        inceptionCollateral: string,
        assetOracle: string,
        eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _addresses: string,
        inceptionCollateral: string,
        assetOracle: string,
        eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _addresses: string,
        inceptionCollateral: string,
        assetOracle: string,
        eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _addresses: string,
        inceptionCollateral: string,
        assetOracle: string,
        eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Converts asset balance into stablecoin balance at current price
     * @param _amount amount of collateral
     */
    convertFrom(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Converts stablecoin balance into collateral balance at current price
     * @param _amount amount of stablecoin
     */
    convertTo(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * returned value has matching decimals to the asset oracle (not the EUR oracle)
     * Gets the asset price in EUR (PAR)
     */
    getAssetPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    inceptionCollateral(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    assetOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    eurOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
