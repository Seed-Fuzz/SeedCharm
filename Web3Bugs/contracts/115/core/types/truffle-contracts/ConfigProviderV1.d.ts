/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface ConfigProviderV1Contract
  extends Truffle.Contract<ConfigProviderV1Instance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ConfigProviderV1Instance>;
}

export interface CollateralRemoved {
  name: "CollateralRemoved";
  args: {
    collateralType: string;
    0: string;
  };
}

export interface CollateralUpdated {
  name: "CollateralUpdated";
  args: {
    collateralType: string;
    debtLimit: BN;
    minCollateralRatio: BN;
    borrowRate: BN;
    originationFee: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

type AllEvents = CollateralRemoved | CollateralUpdated;

export interface ConfigProviderV1Instance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  collateralIds(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  liquidationBonus(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  numCollateralConfigs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Creates or overwrites an existing config for a collateral type
   * @param _borrowRate the borrowing rate specified in 1 second interval in RAY accuracy.
   * @param _collateralType address of the collateral type
   * @param _debtLimit the debt ceiling for the collateral type
   * @param _minCollateralRatio the minimum ratio to maintain to avoid liquidation
   * @param _originationFee an optional origination fee for newly created debt. Can be 0.
   */
  setCollateralConfig: {
    (
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Remove the config for a collateral type
   * @param _collateralType address of the collateral type
   */
  removeCollateral: {
    (_collateralType: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets the debt limit for a collateral type
   * @param _collateralType address of the collateral type
   * @param _debtLimit the new debt limit
   */
  setCollateralDebtLimit: {
    (
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this is the liquidation treshold under which a vault is considered open for liquidation.
   * Sets the minimum collateralization ratio for a collateral type
   * @param _collateralType address of the collateral type
   * @param _minCollateralRatio the new minimum collateralization ratio
   */
  setCollateralMinCollateralRatio: {
    (
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * borrowing rate is specified for a 1 sec interval and accurancy is in RAY.
   * Sets the borrowing rate for a collateral type
   * @param _borrowRate the new borrowing rate for a 1 sec interval
   * @param _collateralType address of the collateral type
   */
  setCollateralBorrowRate: {
    (
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this rate is applied as a one time fee for new borrowing and is specified in WAD
   * Sets the origiation fee for a collateral type
   * @param _collateralType address of the collateral type
   * @param _originationFee new origination fee in WAD
   */
  setCollateralOriginationFee: {
    (
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this is a platform wide limit for new debt issuance against a specific collateral type
   * Get the debt limit for a collateral type
   * @param _collateralType address of the collateral type
   */
  collateralDebtLimit(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this is the liquidation treshold under which a vault is considered open for liquidation.
   * Get the minimum collateralization ratio for a collateral type
   * @param _collateralType address of the collateral type
   */
  collateralMinCollateralRatio(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * borrowing rate is specified for a 1 sec interval and accurancy is in RAY.
   * Get the borrowing rate for a collateral type
   * @param _collateralType address of the collateral type
   */
  collateralBorrowRate(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this rate is applied as a one time fee for new borrowing and is specified in WAD
   * Get the origiation fee for a collateral type
   * @param _collateralType address of the collateral type
   */
  collateralOriginationFee(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * the liquidation bonus is specified in WAD
   * Set the platform wide incentive for liquidations.
   * @param _bonus the liquidation bonus to be paid to liquidators
   */
  setLiquidationBonus: {
    (
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Retreives the entire config for a specific config id.
   * @param _id the ID of the conifg to be returned
   */
  collateralConfigs(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralType: string;
    debtLimit: BN;
    minCollateralRatio: BN;
    borrowRate: BN;
    originationFee: BN;
  }>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    collateralIds(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    liquidationBonus(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    numCollateralConfigs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Creates or overwrites an existing config for a collateral type
     * @param _borrowRate the borrowing rate specified in 1 second interval in RAY accuracy.
     * @param _collateralType address of the collateral type
     * @param _debtLimit the debt ceiling for the collateral type
     * @param _minCollateralRatio the minimum ratio to maintain to avoid liquidation
     * @param _originationFee an optional origination fee for newly created debt. Can be 0.
     */
    setCollateralConfig: {
      (
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Remove the config for a collateral type
     * @param _collateralType address of the collateral type
     */
    removeCollateral: {
      (
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets the debt limit for a collateral type
     * @param _collateralType address of the collateral type
     * @param _debtLimit the new debt limit
     */
    setCollateralDebtLimit: {
      (
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this is the liquidation treshold under which a vault is considered open for liquidation.
     * Sets the minimum collateralization ratio for a collateral type
     * @param _collateralType address of the collateral type
     * @param _minCollateralRatio the new minimum collateralization ratio
     */
    setCollateralMinCollateralRatio: {
      (
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * borrowing rate is specified for a 1 sec interval and accurancy is in RAY.
     * Sets the borrowing rate for a collateral type
     * @param _borrowRate the new borrowing rate for a 1 sec interval
     * @param _collateralType address of the collateral type
     */
    setCollateralBorrowRate: {
      (
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this rate is applied as a one time fee for new borrowing and is specified in WAD
     * Sets the origiation fee for a collateral type
     * @param _collateralType address of the collateral type
     * @param _originationFee new origination fee in WAD
     */
    setCollateralOriginationFee: {
      (
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this is a platform wide limit for new debt issuance against a specific collateral type
     * Get the debt limit for a collateral type
     * @param _collateralType address of the collateral type
     */
    collateralDebtLimit(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this is the liquidation treshold under which a vault is considered open for liquidation.
     * Get the minimum collateralization ratio for a collateral type
     * @param _collateralType address of the collateral type
     */
    collateralMinCollateralRatio(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * borrowing rate is specified for a 1 sec interval and accurancy is in RAY.
     * Get the borrowing rate for a collateral type
     * @param _collateralType address of the collateral type
     */
    collateralBorrowRate(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this rate is applied as a one time fee for new borrowing and is specified in WAD
     * Get the origiation fee for a collateral type
     * @param _collateralType address of the collateral type
     */
    collateralOriginationFee(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * the liquidation bonus is specified in WAD
     * Set the platform wide incentive for liquidations.
     * @param _bonus the liquidation bonus to be paid to liquidators
     */
    setLiquidationBonus: {
      (
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Retreives the entire config for a specific config id.
     * @param _id the ID of the conifg to be returned
     */
    collateralConfigs(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralType: string;
      debtLimit: BN;
      minCollateralRatio: BN;
      borrowRate: BN;
      originationFee: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
