/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface DebtNotifierContract
  extends Truffle.Contract<DebtNotifierInstance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<DebtNotifierInstance>;
}

type AllEvents = never;

export interface DebtNotifierInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  collateralSupplyMinerMapping(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Only the vaultsCore can call this. `debtChanged` will silently return if collateralType is not known to prevent any problems in vaultscore.
   * Notifies the correct supplyMiner of a change in debt.
   * @param _vaultId the ID of the vault of which the debt has changed.*
   */
  debtChanged: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Manager role in the AccessController is required to call this.
   * Updates the collateral to supplyMiner mapping.
   * @param collateral the address of the collateralType.
   * @param supplyMiner the address of the supplyMiner which will be notified on debt changes for this collateralType.*
   */
  setCollateralSupplyMiner: {
    (
      collateral: string,
      supplyMiner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      collateral: string,
      supplyMiner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      collateral: string,
      supplyMiner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      collateral: string,
      supplyMiner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    collateralSupplyMinerMapping(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Only the vaultsCore can call this. `debtChanged` will silently return if collateralType is not known to prevent any problems in vaultscore.
     * Notifies the correct supplyMiner of a change in debt.
     * @param _vaultId the ID of the vault of which the debt has changed.*
     */
    debtChanged: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Manager role in the AccessController is required to call this.
     * Updates the collateral to supplyMiner mapping.
     * @param collateral the address of the collateralType.
     * @param supplyMiner the address of the supplyMiner which will be notified on debt changes for this collateralType.*
     */
    setCollateralSupplyMiner: {
      (
        collateral: string,
        supplyMiner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        collateral: string,
        supplyMiner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        collateral: string,
        supplyMiner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        collateral: string,
        supplyMiner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
