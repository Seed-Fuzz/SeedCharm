/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface DemandMinerV2Contract
  extends Truffle.Contract<DemandMinerV2Instance> {
  "new"(
    _addresses: string,
    token: string,
    feeCollector: string,
    _boostConfig: {
      a: number | BN | string;
      b: number | BN | string;
      c: number | BN | string;
      d: number | BN | string;
      e: number | BN | string;
      maxBoost: number | BN | string;
    },
    feeConfig: {
      depositFee: number | BN | string;
      withdrawFee: number | BN | string;
    },
    meta?: Truffle.TransactionDetails
  ): Promise<DemandMinerV2Instance>;
}

export interface BoostConfigSet {
  name: "BoostConfigSet";
  args: {
    0: {a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN};
  };
}

export interface DepositFeeReleased {
  name: "DepositFeeReleased";
  args: {
    income: BN;
    0: BN;
  };
}

export interface FeeCollectorSet {
  name: "FeeCollectorSet";
  args: {
    feeCollector: string;
    0: string;
  };
}

export interface FeeConfigSet {
  name: "FeeConfigSet";
  args: {
    0: {depositFee: BN; withdrawFee: BN};
  };
}

export interface StakeDecreased {
  name: "StakeDecreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

export interface StakeIncreased {
  name: "StakeIncreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

export interface WithdrawFeeReleased {
  name: "WithdrawFeeReleased";
  args: {
    income: BN;
    0: BN;
  };
}

type AllEvents =
  | BoostConfigSet
  | DepositFeeReleased
  | FeeCollectorSet
  | FeeConfigSet
  | StakeDecreased
  | StakeIncreased
  | WithdrawFeeReleased;

export interface DemandMinerV2Instance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  boostConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN}>;

  par(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the number of tokens a user can claim via `releaseMIMO`
   * @param _user the address of the user
   */
  pendingMIMO(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the number of PAR tokens the user has earned as a reward
   * @param _user the address of the user
   */
  pendingPAR(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Releases outstanding rewards balances to the user
   * @param _user the address of the user for which the reward tokens will be released
   */
  releaseRewards: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBoostConfig: {
    (
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the number of tokens a user has staked
   * @param _user the address of the user
   */
  stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the number of tokens a user has staked with the boost
   * @param _user the address of the user
   */
  stakeWithBoost(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalStakeWithBoost(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Reapplies the boost of the user, useful if a whale's vMIMO has decreased but their boost is still the original value
   */
  updateBoost: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the userInfo stored of a user
   * @param _user the address of the user
   */
  userInfo(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    stake: BN;
    stakeWithBoost: BN;
    accAmountPerShare: BN;
    accParAmountPerShare: BN;
  }>;

  /**
   * can only be called by protocol manager
   * Sets new _feeCollector
   * @param feeCollector new feeCollector address
   */
  setFeeCollector: {
    (feeCollector: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      feeCollector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      feeCollector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      feeCollector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFeeConfig: {
    (
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20
   * Deposit an ERC20 pool token for staking
   * @param amount the amount of tokens to be deposited. Unit is in WEI*
   */
  deposit: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw staked ERC20 pool tokens. Will fail if user does not have enough tokens staked
   * @param amount the amount of tokens to be withdrawn. Unit is in WEI*
   */
  withdraw: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  feeCollector(txDetails?: Truffle.TransactionDetails): Promise<string>;

  feeConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{depositFee: BN; withdrawFee: BN}>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    boostConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN}>;

    par(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the number of tokens a user can claim via `releaseMIMO`
     * @param _user the address of the user
     */
    pendingMIMO(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the number of PAR tokens the user has earned as a reward
     * @param _user the address of the user
     */
    pendingPAR(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Releases outstanding rewards balances to the user
     * @param _user the address of the user for which the reward tokens will be released
     */
    releaseRewards: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setBoostConfig: {
      (
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the number of tokens a user has staked
     * @param _user the address of the user
     */
    stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the number of tokens a user has staked with the boost
     * @param _user the address of the user
     */
    stakeWithBoost(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalStakeWithBoost(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Reapplies the boost of the user, useful if a whale's vMIMO has decreased but their boost is still the original value
     */
    updateBoost: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the userInfo stored of a user
     * @param _user the address of the user
     */
    userInfo(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      stake: BN;
      stakeWithBoost: BN;
      accAmountPerShare: BN;
      accParAmountPerShare: BN;
    }>;

    /**
     * can only be called by protocol manager
     * Sets new _feeCollector
     * @param feeCollector new feeCollector address
     */
    setFeeCollector: {
      (feeCollector: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        feeCollector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        feeCollector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        feeCollector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFeeConfig: {
      (
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20
     * Deposit an ERC20 pool token for staking
     * @param amount the amount of tokens to be deposited. Unit is in WEI*
     */
    deposit: {
      (
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw staked ERC20 pool tokens. Will fail if user does not have enough tokens staked
     * @param amount the amount of tokens to be withdrawn. Unit is in WEI*
     */
    withdraw: {
      (
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    feeCollector(txDetails?: Truffle.TransactionDetails): Promise<string>;

    feeConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{depositFee: BN; withdrawFee: BN}>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
