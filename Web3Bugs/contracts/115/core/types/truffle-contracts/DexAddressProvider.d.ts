/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface DexAddressProviderContract
  extends Truffle.Contract<DexAddressProviderInstance> {
  "new"(
    a: string,
    dexes: {proxy: string; router: string}[],
    meta?: Truffle.TransactionDetails
  ): Promise<DexAddressProviderInstance>;
}

export interface DexSet {
  name: "DexSet";
  args: {
    0: BN;
  };
}

type AllEvents = DexSet;

export interface DexAddressProviderInstance extends Truffle.ContractInstance {
  /**
   * only manager or address(this) can call this method.
   * Set the dex address for dexMapping
   * @param _index the index for the dex.
   * @param _proxy the address for the proxy.
   * @param _router the address for the router.
   */
  setDexMapping: {
    (
      _index: number | BN | string,
      _proxy: string,
      _router: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _index: number | BN | string,
      _proxy: string,
      _router: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _index: number | BN | string,
      _proxy: string,
      _router: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _index: number | BN | string,
      _proxy: string,
      _router: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  parallel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns proxy and router address for a specific dex index
   * @param index the index for the dex
   */
  dexMapping(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{0: string; 1: string}>;

  methods: {
    /**
     * only manager or address(this) can call this method.
     * Set the dex address for dexMapping
     * @param _index the index for the dex.
     * @param _proxy the address for the proxy.
     * @param _router the address for the router.
     */
    setDexMapping: {
      (
        _index: number | BN | string,
        _proxy: string,
        _router: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _index: number | BN | string,
        _proxy: string,
        _router: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _index: number | BN | string,
        _proxy: string,
        _router: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _index: number | BN | string,
        _proxy: string,
        _router: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    parallel(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns proxy and router address for a specific dex index
     * @param index the index for the dex
     */
    dexMapping(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{0: string; 1: string}>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
