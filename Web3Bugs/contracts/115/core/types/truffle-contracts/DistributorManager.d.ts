/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface DistributorManagerContract
  extends Truffle.Contract<DistributorManagerInstance> {
  "new"(
    _a: string,
    _mimmoDistributor: string,
    meta?: Truffle.TransactionDetails
  ): Promise<DistributorManagerInstance>;
}

type AllEvents = never;

export interface DistributorManagerInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mimmoDistributor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * anyone can call this.
   * Public function to release the accumulated new MIMO tokens to the payees.
   */
  releaseAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mimmoDistributor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * anyone can call this.
     * Public function to release the accumulated new MIMO tokens to the payees.
     */
    releaseAll: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
