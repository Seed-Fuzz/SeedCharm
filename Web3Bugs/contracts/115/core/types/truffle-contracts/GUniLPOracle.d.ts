/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface GUniLPOracleContract
  extends Truffle.Contract<GUniLPOracleInstance> {
  "new"(
    _decimals: number | BN | string,
    _description: string,
    _pool: string,
    _oracleA: string,
    _oracleB: string,
    meta?: Truffle.TransactionDetails
  ): Promise<GUniLPOracleInstance>;
}

type AllEvents = never;

export interface GUniLPOracleInstance extends Truffle.ContractInstance {
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  description(txDetails?: Truffle.TransactionDetails): Promise<string>;

  oracleA(txDetails?: Truffle.TransactionDetails): Promise<string>;

  oracleB(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  version(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getRoundData(
    _roundId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{0: BN; 1: BN; 2: BN; 3: BN; 4: BN}>;

  /**
   * Note that answer and updatedAt may change between queries.
   * get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.
   */
  latestRoundData(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{0: BN; 1: BN; 2: BN; 3: BN; 4: BN}>;

  methods: {
    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    description(txDetails?: Truffle.TransactionDetails): Promise<string>;

    oracleA(txDetails?: Truffle.TransactionDetails): Promise<string>;

    oracleB(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

    version(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getRoundData(
      _roundId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{0: BN; 1: BN; 2: BN; 3: BN; 4: BN}>;

    /**
     * Note that answer and updatedAt may change between queries.
     * get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.
     */
    latestRoundData(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{0: BN; 1: BN; 2: BN; 3: BN; 4: BN}>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
