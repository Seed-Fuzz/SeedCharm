/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface GenericMinerV2Contract
  extends Truffle.Contract<GenericMinerV2Instance> {
  "new"(
    _addresses: string,
    boostConfig: {
      a: number | BN | string;
      b: number | BN | string;
      c: number | BN | string;
      d: number | BN | string;
      e: number | BN | string;
      maxBoost: number | BN | string;
    },
    meta?: Truffle.TransactionDetails
  ): Promise<GenericMinerV2Instance>;
}

export interface BoostConfigSet {
  name: "BoostConfigSet";
  args: {
    0: {a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN};
  };
}

export interface StakeDecreased {
  name: "StakeDecreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

export interface StakeIncreased {
  name: "StakeIncreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = BoostConfigSet | StakeDecreased | StakeIncreased;

export interface GenericMinerV2Instance extends Truffle.ContractInstance {
  setBoostConfig: {
    (
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newBoostConfig: {
        a: number | BN | string;
        b: number | BN | string;
        c: number | BN | string;
        d: number | BN | string;
        e: number | BN | string;
        maxBoost: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Releases outstanding rewards balances to the user
   * @param _user the address of the user for which the reward tokens will be released
   */
  releaseRewards: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Reapplies the boost of the user, useful if a whale's vMIMO has decreased but their boost is still the original value
   */
  updateBoost: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the number of tokens a user has staked
   * @param _user the address of the user
   */
  stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the number of tokens a user has staked with the boost
   * @param _user the address of the user
   */
  stakeWithBoost(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the number of tokens a user can claim via `releaseMIMO`
   * @param _user the address of the user
   */
  pendingMIMO(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the number of PAR tokens the user has earned as a reward
   * @param _user the address of the user
   */
  pendingPAR(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  par(txDetails?: Truffle.TransactionDetails): Promise<string>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  boostConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN}>;

  totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalStakeWithBoost(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the userInfo stored of a user
   * @param _user the address of the user
   */
  userInfo(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    stake: BN;
    stakeWithBoost: BN;
    accAmountPerShare: BN;
    accParAmountPerShare: BN;
  }>;

  methods: {
    setBoostConfig: {
      (
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newBoostConfig: {
          a: number | BN | string;
          b: number | BN | string;
          c: number | BN | string;
          d: number | BN | string;
          e: number | BN | string;
          maxBoost: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Releases outstanding rewards balances to the user
     * @param _user the address of the user for which the reward tokens will be released
     */
    releaseRewards: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Reapplies the boost of the user, useful if a whale's vMIMO has decreased but their boost is still the original value
     */
    updateBoost: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the number of tokens a user has staked
     * @param _user the address of the user
     */
    stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the number of tokens a user has staked with the boost
     * @param _user the address of the user
     */
    stakeWithBoost(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the number of tokens a user can claim via `releaseMIMO`
     * @param _user the address of the user
     */
    pendingMIMO(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the number of PAR tokens the user has earned as a reward
     * @param _user the address of the user
     */
    pendingPAR(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    par(txDetails?: Truffle.TransactionDetails): Promise<string>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    boostConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN}>;

    totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalStakeWithBoost(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the userInfo stored of a user
     * @param _user the address of the user
     */
    userInfo(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      stake: BN;
      stakeWithBoost: BN;
      accAmountPerShare: BN;
      accParAmountPerShare: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
