/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface GovernanceAddressProviderContract
  extends Truffle.Contract<GovernanceAddressProviderInstance> {
  "new"(
    _parallel: string,
    meta?: Truffle.TransactionDetails
  ): Promise<GovernanceAddressProviderInstance>;
}

type AllEvents = never;

export interface GovernanceAddressProviderInstance
  extends Truffle.ContractInstance {
  debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

  governorAlpha(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  parallel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  timelock(txDetails?: Truffle.TransactionDetails): Promise<string>;

  votingEscrow(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * only manager can call this.
   * Update the `AddressProvider` address that points to main AddressProvider used in the Parallel Protocol
   * @param _parallel the address of the new `AddressProvider` address.
   */
  setParallelAddressProvider: {
    (_parallel: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _parallel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _parallel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _parallel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * only manager can call this.
   * Update the `MIMO` ERC20 token address
   * @param _mimo the address of the new `MIMO` token address.
   */
  setMIMO: {
    (_mimo: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_mimo: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _mimo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mimo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * only manager can call this.
   * Update the `DebtNotifier` address
   * @param _debtNotifier the address of the new `DebtNotifier`.
   */
  setDebtNotifier: {
    (_debtNotifier: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _debtNotifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _debtNotifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _debtNotifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * only manager can call this.
   * Update the `GovernorAlpha` address
   * @param _governorAlpha the address of the new `GovernorAlpha`.
   */
  setGovernorAlpha: {
    (_governorAlpha: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _governorAlpha: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governorAlpha: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governorAlpha: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * only manager can call this.
   * Update the `Timelock` address
   * @param _timelock the address of the new `Timelock`.
   */
  setTimelock: {
    (_timelock: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _timelock: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _timelock: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timelock: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * only manager can call this.
   * Update the `VotingEscrow` address
   * @param _votingEscrow the address of the new `VotingEscrow`.
   */
  setVotingEscrow: {
    (_votingEscrow: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _votingEscrow: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _votingEscrow: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _votingEscrow: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

    governorAlpha(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

    parallel(txDetails?: Truffle.TransactionDetails): Promise<string>;

    timelock(txDetails?: Truffle.TransactionDetails): Promise<string>;

    votingEscrow(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * only manager can call this.
     * Update the `AddressProvider` address that points to main AddressProvider used in the Parallel Protocol
     * @param _parallel the address of the new `AddressProvider` address.
     */
    setParallelAddressProvider: {
      (_parallel: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _parallel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _parallel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _parallel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * only manager can call this.
     * Update the `MIMO` ERC20 token address
     * @param _mimo the address of the new `MIMO` token address.
     */
    setMIMO: {
      (_mimo: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _mimo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _mimo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mimo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * only manager can call this.
     * Update the `DebtNotifier` address
     * @param _debtNotifier the address of the new `DebtNotifier`.
     */
    setDebtNotifier: {
      (_debtNotifier: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _debtNotifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _debtNotifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _debtNotifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * only manager can call this.
     * Update the `GovernorAlpha` address
     * @param _governorAlpha the address of the new `GovernorAlpha`.
     */
    setGovernorAlpha: {
      (_governorAlpha: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _governorAlpha: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governorAlpha: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governorAlpha: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * only manager can call this.
     * Update the `Timelock` address
     * @param _timelock the address of the new `Timelock`.
     */
    setTimelock: {
      (_timelock: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _timelock: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _timelock: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timelock: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * only manager can call this.
     * Update the `VotingEscrow` address
     * @param _votingEscrow the address of the new `VotingEscrow`.
     */
    setVotingEscrow: {
      (_votingEscrow: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _votingEscrow: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _votingEscrow: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _votingEscrow: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    controller(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
