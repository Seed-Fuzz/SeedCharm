/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IAddressProviderV1Contract
  extends Truffle.Contract<IAddressProviderV1Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IAddressProviderV1Instance>;
}

type AllEvents = never;

export interface IAddressProviderV1Instance extends Truffle.ContractInstance {
  setAccessController: {
    (_controller: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setConfigProvider: {
    (_config: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _config: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _config: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _config: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setVaultsCore: {
    (_core: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_core: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _core: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _core: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStableX: {
    (_stablex: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _stablex: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _stablex: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stablex: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRatesManager: {
    (_ratesManager: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _ratesManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _ratesManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _ratesManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPriceFeed: {
    (_priceFeed: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _priceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _priceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _priceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLiquidationManager: {
    (
      _liquidationManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _liquidationManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _liquidationManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _liquidationManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setVaultsDataProvider: {
    (_vaultsData: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _vaultsData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultsData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultsData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFeeDistributor: {
    (_feeDistributor: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _feeDistributor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _feeDistributor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _feeDistributor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  config(txDetails?: Truffle.TransactionDetails): Promise<string>;

  core(txDetails?: Truffle.TransactionDetails): Promise<string>;

  stablex(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ratesManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  priceFeed(txDetails?: Truffle.TransactionDetails): Promise<string>;

  liquidationManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  vaultsData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  feeDistributor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    setAccessController: {
      (_controller: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setConfigProvider: {
      (_config: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _config: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _config: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _config: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setVaultsCore: {
      (_core: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _core: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _core: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _core: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setStableX: {
      (_stablex: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _stablex: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _stablex: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _stablex: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRatesManager: {
      (_ratesManager: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _ratesManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _ratesManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _ratesManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPriceFeed: {
      (_priceFeed: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _priceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _priceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _priceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLiquidationManager: {
      (
        _liquidationManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _liquidationManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _liquidationManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _liquidationManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setVaultsDataProvider: {
      (_vaultsData: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _vaultsData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultsData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultsData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFeeDistributor: {
      (
        _feeDistributor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _feeDistributor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _feeDistributor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _feeDistributor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    config(txDetails?: Truffle.TransactionDetails): Promise<string>;

    core(txDetails?: Truffle.TransactionDetails): Promise<string>;

    stablex(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ratesManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    priceFeed(txDetails?: Truffle.TransactionDetails): Promise<string>;

    liquidationManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    vaultsData(txDetails?: Truffle.TransactionDetails): Promise<string>;

    feeDistributor(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
