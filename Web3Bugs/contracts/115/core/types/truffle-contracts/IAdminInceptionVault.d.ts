/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IAdminInceptionVaultContract
  extends Truffle.Contract<IAdminInceptionVaultInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IAdminInceptionVaultInstance>;
}

type AllEvents = never;

export interface IAdminInceptionVaultInstance extends Truffle.ContractInstance {
  initialize: {
    (
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string,
      _addressProvider: string,
      _debtNotifier: string,
      _WETH: string,
      _mimo: string,
      _inceptionVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositETH: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  depositETHAndBorrow: {
    (
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositAndBorrow: {
    (
      _collateralType: string,
      _depositAmount: number | BN | string,
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _depositAmount: number | BN | string,
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _depositAmount: number | BN | string,
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _depositAmount: number | BN | string,
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  borrow: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimMimo: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  lendPAR: {
    (
      _amoutn: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amoutn: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amoutn: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amoutn: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferMimo: {
    (
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferPar: {
    (
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  inceptionCore(txDetails?: Truffle.TransactionDetails): Promise<string>;

  collateralCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collaterals(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  collateralId(
    _collateral: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

  weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    initialize: {
      (
        owner: string,
        _addressProvider: string,
        _debtNotifier: string,
        _WETH: string,
        _mimo: string,
        _inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        owner: string,
        _addressProvider: string,
        _debtNotifier: string,
        _WETH: string,
        _mimo: string,
        _inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        owner: string,
        _addressProvider: string,
        _debtNotifier: string,
        _WETH: string,
        _mimo: string,
        _inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner: string,
        _addressProvider: string,
        _debtNotifier: string,
        _WETH: string,
        _mimo: string,
        _inceptionVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositETH: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    depositETHAndBorrow: {
      (
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deposit: {
      (
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositAndBorrow: {
      (
        _collateralType: string,
        _depositAmount: number | BN | string,
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _depositAmount: number | BN | string,
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _depositAmount: number | BN | string,
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _depositAmount: number | BN | string,
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    borrow: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimMimo: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    lendPAR: {
      (
        _amoutn: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amoutn: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amoutn: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amoutn: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferMimo: {
      (
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferPar: {
      (
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    inceptionCore(txDetails?: Truffle.TransactionDetails): Promise<string>;

    collateralCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collaterals(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    collateralId(
      _collateral: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

    weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
