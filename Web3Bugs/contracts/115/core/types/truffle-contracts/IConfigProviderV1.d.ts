/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IConfigProviderV1Contract
  extends Truffle.Contract<IConfigProviderV1Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IConfigProviderV1Instance>;
}

export interface CollateralRemoved {
  name: "CollateralRemoved";
  args: {
    collateralType: string;
    0: string;
  };
}

export interface CollateralUpdated {
  name: "CollateralUpdated";
  args: {
    collateralType: string;
    debtLimit: BN;
    minCollateralRatio: BN;
    borrowRate: BN;
    originationFee: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

type AllEvents = CollateralRemoved | CollateralUpdated;

export interface IConfigProviderV1Instance extends Truffle.ContractInstance {
  setCollateralConfig: {
    (
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _debtLimit: number | BN | string,
      _minCollateralRatio: number | BN | string,
      _borrowRate: number | BN | string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeCollateral: {
    (_collateralType: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralDebtLimit: {
    (
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _debtLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralMinCollateralRatio: {
    (
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _minCollateralRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralBorrowRate: {
    (
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralOriginationFee: {
    (
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _originationFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLiquidationBonus: {
    (
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  collateralConfigs(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralType: string;
    debtLimit: BN;
    minCollateralRatio: BN;
    borrowRate: BN;
    originationFee: BN;
  }>;

  collateralIds(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  numCollateralConfigs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  liquidationBonus(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collateralDebtLimit(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  collateralMinCollateralRatio(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  collateralBorrowRate(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  collateralOriginationFee(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    setCollateralConfig: {
      (
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _debtLimit: number | BN | string,
        _minCollateralRatio: number | BN | string,
        _borrowRate: number | BN | string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeCollateral: {
      (
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralDebtLimit: {
      (
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _debtLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralMinCollateralRatio: {
      (
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _minCollateralRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralBorrowRate: {
      (
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _borrowRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralOriginationFee: {
      (
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _originationFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLiquidationBonus: {
      (
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    collateralConfigs(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralType: string;
      debtLimit: BN;
      minCollateralRatio: BN;
      borrowRate: BN;
      originationFee: BN;
    }>;

    collateralIds(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    numCollateralConfigs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    liquidationBonus(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collateralDebtLimit(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    collateralMinCollateralRatio(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    collateralBorrowRate(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    collateralOriginationFee(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
