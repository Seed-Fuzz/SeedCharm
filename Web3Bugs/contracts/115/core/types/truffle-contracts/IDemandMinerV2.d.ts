/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IDemandMinerV2Contract
  extends Truffle.Contract<IDemandMinerV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDemandMinerV2Instance>;
}

export interface DepositFeeReleased {
  name: "DepositFeeReleased";
  args: {
    income: BN;
    0: BN;
  };
}

export interface FeeCollectorSet {
  name: "FeeCollectorSet";
  args: {
    feeCollector: string;
    0: string;
  };
}

export interface FeeConfigSet {
  name: "FeeConfigSet";
  args: {
    0: {depositFee: BN; withdrawFee: BN};
  };
}

export interface WithdrawFeeReleased {
  name: "WithdrawFeeReleased";
  args: {
    income: BN;
    0: BN;
  };
}

type AllEvents =
  | DepositFeeReleased
  | FeeCollectorSet
  | FeeConfigSet
  | WithdrawFeeReleased;

export interface IDemandMinerV2Instance extends Truffle.ContractInstance {
  setFeeCollector: {
    (feeCollector: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      feeCollector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      feeCollector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      feeCollector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFeeConfig: {
    (
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newFeeConfig: {
        depositFee: number | BN | string;
        withdrawFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  feeCollector(txDetails?: Truffle.TransactionDetails): Promise<string>;

  feeConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{depositFee: BN; withdrawFee: BN}>;

  methods: {
    setFeeCollector: {
      (feeCollector: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        feeCollector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        feeCollector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        feeCollector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFeeConfig: {
      (
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newFeeConfig: {
          depositFee: number | BN | string;
          withdrawFee: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deposit: {
      (
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    feeCollector(txDetails?: Truffle.TransactionDetails): Promise<string>;

    feeConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{depositFee: BN; withdrawFee: BN}>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
