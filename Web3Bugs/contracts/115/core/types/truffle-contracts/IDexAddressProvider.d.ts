/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IDexAddressProviderContract
  extends Truffle.Contract<IDexAddressProviderInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IDexAddressProviderInstance>;
}

export interface DexSet {
  name: "DexSet";
  args: {
    0: BN;
  };
}

type AllEvents = DexSet;

export interface IDexAddressProviderInstance extends Truffle.ContractInstance {
  setDexMapping: {
    (
      _index: number | BN | string,
      _proxy: string,
      _dex: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _index: number | BN | string,
      _proxy: string,
      _dex: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _index: number | BN | string,
      _proxy: string,
      _dex: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _index: number | BN | string,
      _proxy: string,
      _dex: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  parallel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  dexMapping(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{0: string; 1: string}>;

  methods: {
    setDexMapping: {
      (
        _index: number | BN | string,
        _proxy: string,
        _dex: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _index: number | BN | string,
        _proxy: string,
        _dex: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _index: number | BN | string,
        _proxy: string,
        _dex: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _index: number | BN | string,
        _proxy: string,
        _dex: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    parallel(txDetails?: Truffle.TransactionDetails): Promise<string>;

    dexMapping(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{0: string; 1: string}>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
