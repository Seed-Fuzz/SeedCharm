/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IGenericMinerV2Contract
  extends Truffle.Contract<IGenericMinerV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IGenericMinerV2Instance>;
}

export interface BoostConfigSet {
  name: "BoostConfigSet";
  args: {
    0: {a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN};
  };
}

export interface StakeDecreased {
  name: "StakeDecreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

export interface StakeIncreased {
  name: "StakeIncreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = BoostConfigSet | StakeDecreased | StakeIncreased;

export interface IGenericMinerV2Instance extends Truffle.ContractInstance {
  releaseRewards: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  stakeWithBoost(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingMIMO(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  pendingPAR(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  par(txDetails?: Truffle.TransactionDetails): Promise<string>;

  boostConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN}>;

  totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalStakeWithBoost(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  userInfo(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    stake: BN;
    stakeWithBoost: BN;
    accAmountPerShare: BN;
    accParAmountPerShare: BN;
  }>;

  methods: {
    releaseRewards: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    stakeWithBoost(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingMIMO(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    pendingPAR(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    par(txDetails?: Truffle.TransactionDetails): Promise<string>;

    boostConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{a: BN; b: BN; c: BN; d: BN; e: BN; maxBoost: BN}>;

    totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalStakeWithBoost(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    userInfo(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      stake: BN;
      stakeWithBoost: BN;
      accAmountPerShare: BN;
      accParAmountPerShare: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
