/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IInceptionVaultPriceFeedContract
  extends Truffle.Contract<IInceptionVaultPriceFeedInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IInceptionVaultPriceFeedInstance>;
}

export interface PriceFeedAdded {
  name: "PriceFeedAdded";
  args: {
    _id: BN;
    _priceFeed: string;
    0: BN;
    1: string;
  };
}

type AllEvents = PriceFeedAdded;

export interface IInceptionVaultPriceFeedInstance
  extends Truffle.ContractInstance {
  initialize: {
    (
      _addresses: string,
      _inceptionCollateral: string,
      _assetOracle: string,
      _eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _addresses: string,
      _inceptionCollateral: string,
      _assetOracle: string,
      _eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _addresses: string,
      _inceptionCollateral: string,
      _assetOracle: string,
      _eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _addresses: string,
      _inceptionCollateral: string,
      _assetOracle: string,
      _eurOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionCollateral(txDetails?: Truffle.TransactionDetails): Promise<string>;

  assetOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  eurOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAssetPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  convertFrom(
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  convertTo(
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    initialize: {
      (
        _addresses: string,
        _inceptionCollateral: string,
        _assetOracle: string,
        _eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _addresses: string,
        _inceptionCollateral: string,
        _assetOracle: string,
        _eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _addresses: string,
        _inceptionCollateral: string,
        _assetOracle: string,
        _eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _addresses: string,
        _inceptionCollateral: string,
        _assetOracle: string,
        _eurOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    inceptionCollateral(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    assetOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    eurOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAssetPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    convertFrom(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    convertTo(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
