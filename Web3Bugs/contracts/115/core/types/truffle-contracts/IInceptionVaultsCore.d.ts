/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IInceptionVaultsCoreContract
  extends Truffle.Contract<IInceptionVaultsCoreInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IInceptionVaultsCoreInstance>;
}

export interface Borrowed {
  name: "Borrowed";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface CumulativeRateUpdated {
  name: "CumulativeRateUpdated";
  args: {
    elapsedTime: BN;
    newCumulativeRate: BN;
    0: BN;
    1: BN;
  };
}

export interface Deposited {
  name: "Deposited";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface Liquidated {
  name: "Liquidated";
  args: {
    vaultId: BN;
    debtRepaid: BN;
    collateralLiquidated: BN;
    owner: string;
    sender: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: string;
  };
}

export interface Repaid {
  name: "Repaid";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface Withdrawn {
  name: "Withdrawn";
  args: {
    vautlId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

type AllEvents =
  | Borrowed
  | CumulativeRateUpdated
  | Deposited
  | Liquidated
  | Repaid
  | Withdrawn;

export interface IInceptionVaultsCoreInstance extends Truffle.ContractInstance {
  initialize: {
    (
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _addressProvider: string,
      _adminInceptionVault: string,
      _inceptionVaultsDataProvider: string,
      _inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _addressProvider: string,
      _adminInceptionVault: string,
      _inceptionVaultsDataProvider: string,
      _inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _addressProvider: string,
      _adminInceptionVault: string,
      _inceptionVaultsDataProvider: string,
      _inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _addressProvider: string,
      _adminInceptionVault: string,
      _inceptionVaultsDataProvider: string,
      _inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositByVaultId: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositAndBorrow: {
    (
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  borrow: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayAll: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repay: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidate: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidatePartial: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  cumulativeRate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lastRefresh(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  vaultConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    liquidationRatio: BN;
    minCollateralRatio: BN;
    borrowRate: BN;
    originationFee: BN;
    liquidationBonus: BN;
    liquidationFee: BN;
  }>;

  adminInceptionVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionVaultsData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionCollateral(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionPriceFeed(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    initialize: {
      (
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _addressProvider: string,
        _adminInceptionVault: string,
        _inceptionVaultsDataProvider: string,
        _inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _addressProvider: string,
        _adminInceptionVault: string,
        _inceptionVaultsDataProvider: string,
        _inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _addressProvider: string,
        _adminInceptionVault: string,
        _inceptionVaultsDataProvider: string,
        _inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _addressProvider: string,
        _adminInceptionVault: string,
        _inceptionVaultsDataProvider: string,
        _inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deposit: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositByVaultId: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositAndBorrow: {
      (
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    borrow: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repayAll: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repay: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidate: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidatePartial: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    cumulativeRate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    lastRefresh(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    vaultConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      liquidationRatio: BN;
      minCollateralRatio: BN;
      borrowRate: BN;
      originationFee: BN;
      liquidationBonus: BN;
      liquidationFee: BN;
    }>;

    adminInceptionVault(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionVaultsData(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionCollateral(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionPriceFeed(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
