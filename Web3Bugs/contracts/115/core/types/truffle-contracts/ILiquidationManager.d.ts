/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface ILiquidationManagerContract
  extends Truffle.Contract<ILiquidationManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ILiquidationManagerInstance>;
}

type AllEvents = never;

export interface ILiquidationManagerInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  calculateHealthFactor(
    _collateralValue: number | BN | string,
    _vaultDebt: number | BN | string,
    _minRatio: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  liquidationBonus(
    _collateralType: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  applyLiquidationDiscount(
    _collateralType: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isHealthy(
    _collateralValue: number | BN | string,
    _vaultDebt: number | BN | string,
    _minRatio: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    calculateHealthFactor(
      _collateralValue: number | BN | string,
      _vaultDebt: number | BN | string,
      _minRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    liquidationBonus(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    applyLiquidationDiscount(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    isHealthy(
      _collateralValue: number | BN | string,
      _vaultDebt: number | BN | string,
      _minRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
