/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IMIMODistributorExtensionContract
  extends Truffle.Contract<IMIMODistributorExtensionInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IMIMODistributorExtensionInstance>;
}

type AllEvents = never;

export interface IMIMODistributorExtensionInstance
  extends Truffle.ContractInstance {
  startTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currentIssuance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  weeklyIssuanceAt(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalSupplyAt(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    startTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    currentIssuance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    weeklyIssuanceAt(
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalSupplyAt(
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
