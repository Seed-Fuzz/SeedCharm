/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IMerkleDistributorContract
  extends Truffle.Contract<IMerkleDistributorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IMerkleDistributorInstance>;
}

export interface Claimed {
  name: "Claimed";
  args: {
    index: BN;
    account: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents = Claimed;

export interface IMerkleDistributorInstance extends Truffle.ContractInstance {
  claim: {
    (
      index: number | BN | string,
      account: string,
      amount: number | BN | string,
      merkleProof: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      account: string,
      amount: number | BN | string,
      merkleProof: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      account: string,
      amount: number | BN | string,
      merkleProof: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      account: string,
      amount: number | BN | string,
      merkleProof: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  merkleRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isClaimed(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  endTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isActive(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  methods: {
    claim: {
      (
        index: number | BN | string,
        account: string,
        amount: number | BN | string,
        merkleProof: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        account: string,
        amount: number | BN | string,
        merkleProof: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        account: string,
        amount: number | BN | string,
        merkleProof: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        account: string,
        amount: number | BN | string,
        merkleProof: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    merkleRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

    isClaimed(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    endTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    isActive(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
