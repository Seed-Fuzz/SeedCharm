/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IPriceFeedContract
  extends Truffle.Contract<IPriceFeedInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPriceFeedInstance>;
}

export interface EurOracleUpdated {
  name: "EurOracleUpdated";
  args: {
    oracle: string;
    sender: string;
    0: string;
    1: string;
  };
}

export interface OracleUpdated {
  name: "OracleUpdated";
  args: {
    asset: string;
    oracle: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents = EurOracleUpdated | OracleUpdated;

export interface IPriceFeedInstance extends Truffle.ContractInstance {
  setAssetOracle: {
    (
      _asset: string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _asset: string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _asset: string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _asset: string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setEurOracle: {
    (_oracle: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  assetOracles(
    _asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  eurOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAssetPrice(
    _asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  convertFrom(
    _asset: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  convertTo(
    _asset: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    setAssetOracle: {
      (
        _asset: string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _asset: string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _asset: string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _asset: string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setEurOracle: {
      (_oracle: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    assetOracles(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    eurOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAssetPrice(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    convertFrom(
      _asset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    convertTo(
      _asset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
