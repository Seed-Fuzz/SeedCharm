/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IRatesManagerContract
  extends Truffle.Contract<IRatesManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRatesManagerInstance>;
}

type AllEvents = never;

export interface IRatesManagerInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  annualizedBorrowRate(
    _currentBorrowRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateDebt(
    _baseDebt: number | BN | string,
    _cumulativeRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateBaseDebt(
    _debt: number | BN | string,
    _cumulativeRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateCumulativeRate(
    _borrowRate: number | BN | string,
    _cumulativeRate: number | BN | string,
    _timeElapsed: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    annualizedBorrowRate(
      _currentBorrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateDebt(
      _baseDebt: number | BN | string,
      _cumulativeRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateBaseDebt(
      _debt: number | BN | string,
      _cumulativeRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateCumulativeRate(
      _borrowRate: number | BN | string,
      _cumulativeRate: number | BN | string,
      _timeElapsed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
