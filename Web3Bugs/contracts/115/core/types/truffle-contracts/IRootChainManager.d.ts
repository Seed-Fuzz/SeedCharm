/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IRootChainManagerContract
  extends Truffle.Contract<IRootChainManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRootChainManagerInstance>;
}

export interface PredicateRegistered {
  name: "PredicateRegistered";
  args: {
    tokenType: string;
    predicateAddress: string;
    0: string;
    1: string;
  };
}

export interface TokenMapped {
  name: "TokenMapped";
  args: {
    rootToken: string;
    childToken: string;
    tokenType: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents = PredicateRegistered | TokenMapped;

export interface IRootChainManagerInstance extends Truffle.ContractInstance {
  registerPredicate: {
    (
      tokenType: string,
      predicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenType: string,
      predicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenType: string,
      predicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenType: string,
      predicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mapToken: {
    (
      rootToken: string,
      childToken: string,
      tokenType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      rootToken: string,
      childToken: string,
      tokenType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      rootToken: string,
      childToken: string,
      tokenType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      rootToken: string,
      childToken: string,
      tokenType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositEtherFor: {
    (user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositFor: {
    (
      user: string,
      rootToken: string,
      depositData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      rootToken: string,
      depositData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string,
      rootToken: string,
      depositData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      rootToken: string,
      depositData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exit: {
    (inputData: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      inputData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      inputData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      inputData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    registerPredicate: {
      (
        tokenType: string,
        predicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenType: string,
        predicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenType: string,
        predicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenType: string,
        predicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mapToken: {
      (
        rootToken: string,
        childToken: string,
        tokenType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        rootToken: string,
        childToken: string,
        tokenType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        rootToken: string,
        childToken: string,
        tokenType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        rootToken: string,
        childToken: string,
        tokenType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositEtherFor: {
      (user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositFor: {
      (
        user: string,
        rootToken: string,
        depositData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        rootToken: string,
        depositData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        rootToken: string,
        depositData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        rootToken: string,
        depositData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exit: {
      (inputData: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        inputData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        inputData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        inputData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
