/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface ISupplyMinerV2Contract
  extends Truffle.Contract<ISupplyMinerV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISupplyMinerV2Instance>;
}

type AllEvents = never;

export interface ISupplyMinerV2Instance extends Truffle.ContractInstance {
  baseDebtChanged: {
    (
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  syncStake: {
    (user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  collateral(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    baseDebtChanged: {
      (
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    syncStake: {
      (user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    collateral(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
