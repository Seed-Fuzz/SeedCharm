/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IVaultContract extends Truffle.Contract<IVaultInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IVaultInstance>;
}

type AllEvents = never;

export interface IVaultInstance extends Truffle.ContractInstance {
  swap: {
    (
      singleSwap: {
        poolId: string;
        kind: number | BN | string;
        assetIn: string;
        assetOut: string;
        amount: number | BN | string;
        userData: string;
      },
      funds: {
        sender: string;
        fromInternalBalance: boolean;
        recipient: string;
        toInternalBalance: boolean;
      },
      limit: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      singleSwap: {
        poolId: string;
        kind: number | BN | string;
        assetIn: string;
        assetOut: string;
        amount: number | BN | string;
        userData: string;
      },
      funds: {
        sender: string;
        fromInternalBalance: boolean;
        recipient: string;
        toInternalBalance: boolean;
      },
      limit: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      singleSwap: {
        poolId: string;
        kind: number | BN | string;
        assetIn: string;
        assetOut: string;
        amount: number | BN | string;
        userData: string;
      },
      funds: {
        sender: string;
        fromInternalBalance: boolean;
        recipient: string;
        toInternalBalance: boolean;
      },
      limit: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      singleSwap: {
        poolId: string;
        kind: number | BN | string;
        assetIn: string;
        assetOut: string;
        amount: number | BN | string;
        userData: string;
      },
      funds: {
        sender: string;
        fromInternalBalance: boolean;
        recipient: string;
        toInternalBalance: boolean;
      },
      limit: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    swap: {
      (
        singleSwap: {
          poolId: string;
          kind: number | BN | string;
          assetIn: string;
          assetOut: string;
          amount: number | BN | string;
          userData: string;
        },
        funds: {
          sender: string;
          fromInternalBalance: boolean;
          recipient: string;
          toInternalBalance: boolean;
        },
        limit: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        singleSwap: {
          poolId: string;
          kind: number | BN | string;
          assetIn: string;
          assetOut: string;
          amount: number | BN | string;
          userData: string;
        },
        funds: {
          sender: string;
          fromInternalBalance: boolean;
          recipient: string;
          toInternalBalance: boolean;
        },
        limit: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        singleSwap: {
          poolId: string;
          kind: number | BN | string;
          assetIn: string;
          assetOut: string;
          amount: number | BN | string;
          userData: string;
        },
        funds: {
          sender: string;
          fromInternalBalance: boolean;
          recipient: string;
          toInternalBalance: boolean;
        },
        limit: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        singleSwap: {
          poolId: string;
          kind: number | BN | string;
          assetIn: string;
          assetOut: string;
          amount: number | BN | string;
          userData: string;
        },
        funds: {
          sender: string;
          fromInternalBalance: boolean;
          recipient: string;
          toInternalBalance: boolean;
        },
        limit: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
