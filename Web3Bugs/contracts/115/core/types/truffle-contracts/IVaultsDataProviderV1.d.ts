/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface IVaultsDataProviderV1Contract
  extends Truffle.Contract<IVaultsDataProviderV1Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IVaultsDataProviderV1Instance>;
}

type AllEvents = never;

export interface IVaultsDataProviderV1Instance
  extends Truffle.ContractInstance {
  createVault: {
    (
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralBalance: {
    (
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBaseDebt: {
    (
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  baseDebt(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  vaultCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  vaults(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralType: string;
    owner: string;
    collateralBalance: BN;
    baseDebt: BN;
    createdAt: BN;
  }>;

  vaultOwner(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  vaultCollateralType(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  vaultCollateralBalance(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  vaultBaseDebt(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  vaultId(
    _collateralType: string,
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  vaultExists(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  vaultDebt(
    _vaultId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  debt(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collateralDebt(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    createVault: {
      (
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralBalance: {
      (
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setBaseDebt: {
      (
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    baseDebt(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    vaultCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    vaults(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralType: string;
      owner: string;
      collateralBalance: BN;
      baseDebt: BN;
      createdAt: BN;
    }>;

    vaultOwner(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    vaultCollateralType(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    vaultCollateralBalance(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    vaultBaseDebt(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    vaultId(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    vaultExists(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    vaultDebt(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    debt(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collateralDebt(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
