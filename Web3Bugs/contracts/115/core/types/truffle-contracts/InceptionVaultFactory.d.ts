/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface InceptionVaultFactoryContract
  extends Truffle.Contract<InceptionVaultFactoryInstance> {
  "new"(
    adminInceptionVaultBase: string,
    inceptionVaultsCoreBase: string,
    inceptionVaultsDataProviderBase: string,
    addressProvider: string,
    debtNotifier: string,
    weth: string,
    mimo: string,
    meta?: Truffle.TransactionDetails
  ): Promise<InceptionVaultFactoryInstance>;
}

export interface InceptionVaultDeployed {
  name: "InceptionVaultDeployed";
  args: {
    owner: string;
    adminInceptionVault: string;
    inceptionVaultsCore: string;
    inceptionVaultsDataProvider: string;
    inceptionVaultPriceFeed: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface PriceFeedAdded {
  name: "PriceFeedAdded";
  args: {
    _id: BN;
    _address: string;
    0: BN;
    1: string;
  };
}

type AllEvents = InceptionVaultDeployed | OwnershipTransferred | PriceFeedAdded;

export interface InceptionVaultFactoryInstance
  extends Truffle.ContractInstance {
  /**
   * Needs to be called by `pendingOwner` to claim ownership.
   */
  claimOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.
   * @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.
   * @param newOwner Address of the new owner.
   * @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.
   */
  transferOwnership: {
    (
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cloneInceptionVault: {
    (
      _vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      _inceptionCollateral: string,
      _inceptionVaultPriceFeed: string,
      _assetOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addPriceFeed: {
    (_address: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

  weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  adminInceptionVaultBase(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  inceptionVaultsCoreBase(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  inceptionVaultsDataProviderBase(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  inceptionVaultCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  priceFeedCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  inceptionVaults(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    owner: string;
    adminInceptionVault: string;
    inceptionVaultsCore: string;
    inceptionVaultsDataProvider: string;
    inceptionVaultPriceFeed: string;
    isCustomPriceFeed: boolean;
  }>;

  priceFeeds(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  priceFeedIds(
    _priceFeed: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * Needs to be called by `pendingOwner` to claim ownership.
     */
    claimOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.
     * @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.
     * @param newOwner Address of the new owner.
     * @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.
     */
    transferOwnership: {
      (
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cloneInceptionVault: {
      (
        _vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _inceptionVaultPriceFeed: string,
        _assetOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _inceptionVaultPriceFeed: string,
        _assetOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _inceptionVaultPriceFeed: string,
        _assetOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        _inceptionCollateral: string,
        _inceptionVaultPriceFeed: string,
        _assetOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addPriceFeed: {
      (_address: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

    weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

    adminInceptionVaultBase(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionVaultsCoreBase(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionVaultsDataProviderBase(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionVaultCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    priceFeedCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    inceptionVaults(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      owner: string;
      adminInceptionVault: string;
      inceptionVaultsCore: string;
      inceptionVaultsDataProvider: string;
      inceptionVaultPriceFeed: string;
      isCustomPriceFeed: boolean;
    }>;

    priceFeeds(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    priceFeedIds(
      _priceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
