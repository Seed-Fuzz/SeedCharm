/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface InceptionVaultsCoreContract
  extends Truffle.Contract<InceptionVaultsCoreInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<InceptionVaultsCoreInstance>;
}

export interface Borrowed {
  name: "Borrowed";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface CumulativeRateUpdated {
  name: "CumulativeRateUpdated";
  args: {
    elapsedTime: BN;
    newCumulativeRate: BN;
    0: BN;
    1: BN;
  };
}

export interface Deposited {
  name: "Deposited";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface Liquidated {
  name: "Liquidated";
  args: {
    vaultId: BN;
    debtRepaid: BN;
    collateralLiquidated: BN;
    owner: string;
    sender: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Repaid {
  name: "Repaid";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface Withdrawn {
  name: "Withdrawn";
  args: {
    vautlId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

type AllEvents =
  | Borrowed
  | CumulativeRateUpdated
  | Deposited
  | Liquidated
  | OwnershipTransferred
  | Repaid
  | Withdrawn;

export interface InceptionVaultsCoreInstance extends Truffle.ContractInstance {
  /**
   * Needs to be called by `pendingOwner` to claim ownership.
   */
  claimOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.
   * @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.
   * @param newOwner Address of the new owner.
   * @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.
   */
  transferOwnership: {
    (
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      inceptionCollateral: string,
      addressProvider: string,
      adminInceptionVault: string,
      inceptionVaultsDataProvider: string,
      inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      inceptionCollateral: string,
      addressProvider: string,
      adminInceptionVault: string,
      inceptionVaultsDataProvider: string,
      inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      inceptionCollateral: string,
      addressProvider: string,
      adminInceptionVault: string,
      inceptionVaultsDataProvider: string,
      inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      vaultConfig: {
        liquidationRatio: number | BN | string;
        minCollateralRatio: number | BN | string;
        borrowRate: number | BN | string;
        originationFee: number | BN | string;
        liquidationBonus: number | BN | string;
        liquidationFee: number | BN | string;
      },
      inceptionCollateral: string,
      addressProvider: string,
      adminInceptionVault: string,
      inceptionVaultsDataProvider: string,
      inceptionPriceFeed: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
   * Deposit inceptionCollateral ERC20 token into the specified vault as collateral
   * @param _amount the amount of tokens to be deposited in WEI.*
   * @param _vaultId the ID of the vault in which to deposit the inceptioCollateral.
   */
  depositByVaultId: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * see deposit() and borrow()
   * Deposit inceptionCollateral ERC20 token into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI
   * @param _borrowAmount the amount of borrowed StableX tokens in WEI.*
   * @param _depositAmount the amount of inceptionCollateral to be deposited in WEI.
   */
  depositAndBorrow: {
    (
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _depositAmount: number | BN | string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only the owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.
   * Withdraws inceptionCollateral ERC20 token from a vault.
   * @param _amount the amount of inceptionCollateral ERC20 tokens to be withdrawn in WEI.*
   * @param _vaultId the ID of the vault from which to withdraw the inceptionCollateral.
   */
  withdraw: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `repayAll()` will update the outstanding vault debt to the current time.
   * Convenience function to repay all debt of a vault
   * @param _vaultId the ID of the vault for which to repay the debt.*
   */
  repayAll: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `liquidate()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. `liquidate()` can be called by anyone.
   * Liquidate a vault that is below the liquidation treshold by repaying its outstanding debt.
   * @param _vaultId the ID of the vault to be liquidated.*
   */
  liquidate: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
   * Deposit inceptionCollateral ERC20 token into the vault of the msg.sender as collateral
   * @param _amount the amount of tokens to be deposited in WEI.*
   */
  deposit: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only the owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. `borrow()` will fail if it would bring the vault below the minimum collateralization treshold.
   * Borrow new PAR tokens from a vault.
   * @param _amount the amount of borrowed inceptionCollateral tokens in WEI.*
   * @param _vaultId the ID of the vault from which to borrow.
   */
  borrow: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `repay()` will update the outstanding vault debt to the current time.
   * Repay an outstanding PAR balance to a vault.
   * @param _amount the amount of PAR tokens in WEI to be repaid.*
   * @param _vaultId the ID of the vault for which to repay the outstanding debt balance.
   */
  repay: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `liquidatePartial()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. A LiquidationFee will be applied to the borrower during the liquidation. This means that the change in outstanding debt can be smaller than the repaid amount. `liquidatePartial()` can be called by anyone.
   * Liquidate a vault partially that is below the liquidation treshold by repaying part of its outstanding debt.
   * @param _amount the amount of debt+liquidationFee to repay.*
   * @param _vaultId the ID of the vault to be liquidated.
   */
  liquidatePartial: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cumulativeRate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lastRefresh(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  vaultConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    liquidationRatio: BN;
    minCollateralRatio: BN;
    borrowRate: BN;
    originationFee: BN;
    liquidationBonus: BN;
    liquidationFee: BN;
  }>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionCollateral(txDetails?: Truffle.TransactionDetails): Promise<string>;

  adminInceptionVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionVaultsData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  inceptionPriceFeed(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    /**
     * Needs to be called by `pendingOwner` to claim ownership.
     */
    claimOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.
     * @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.
     * @param newOwner Address of the new owner.
     * @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.
     */
    transferOwnership: {
      (
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        direct: boolean,
        renounce: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialize: {
      (
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        inceptionCollateral: string,
        addressProvider: string,
        adminInceptionVault: string,
        inceptionVaultsDataProvider: string,
        inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        inceptionCollateral: string,
        addressProvider: string,
        adminInceptionVault: string,
        inceptionVaultsDataProvider: string,
        inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        inceptionCollateral: string,
        addressProvider: string,
        adminInceptionVault: string,
        inceptionVaultsDataProvider: string,
        inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        vaultConfig: {
          liquidationRatio: number | BN | string;
          minCollateralRatio: number | BN | string;
          borrowRate: number | BN | string;
          originationFee: number | BN | string;
          liquidationBonus: number | BN | string;
          liquidationFee: number | BN | string;
        },
        inceptionCollateral: string,
        addressProvider: string,
        adminInceptionVault: string,
        inceptionVaultsDataProvider: string,
        inceptionPriceFeed: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
     * Deposit inceptionCollateral ERC20 token into the specified vault as collateral
     * @param _amount the amount of tokens to be deposited in WEI.*
     * @param _vaultId the ID of the vault in which to deposit the inceptioCollateral.
     */
    depositByVaultId: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * see deposit() and borrow()
     * Deposit inceptionCollateral ERC20 token into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI
     * @param _borrowAmount the amount of borrowed StableX tokens in WEI.*
     * @param _depositAmount the amount of inceptionCollateral to be deposited in WEI.
     */
    depositAndBorrow: {
      (
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _depositAmount: number | BN | string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only the owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.
     * Withdraws inceptionCollateral ERC20 token from a vault.
     * @param _amount the amount of inceptionCollateral ERC20 tokens to be withdrawn in WEI.*
     * @param _vaultId the ID of the vault from which to withdraw the inceptionCollateral.
     */
    withdraw: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `repayAll()` will update the outstanding vault debt to the current time.
     * Convenience function to repay all debt of a vault
     * @param _vaultId the ID of the vault for which to repay the debt.*
     */
    repayAll: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `liquidate()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. `liquidate()` can be called by anyone.
     * Liquidate a vault that is below the liquidation treshold by repaying its outstanding debt.
     * @param _vaultId the ID of the vault to be liquidated.*
     */
    liquidate: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
     * Deposit inceptionCollateral ERC20 token into the vault of the msg.sender as collateral
     * @param _amount the amount of tokens to be deposited in WEI.*
     */
    deposit: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only the owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. `borrow()` will fail if it would bring the vault below the minimum collateralization treshold.
     * Borrow new PAR tokens from a vault.
     * @param _amount the amount of borrowed inceptionCollateral tokens in WEI.*
     * @param _vaultId the ID of the vault from which to borrow.
     */
    borrow: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `repay()` will update the outstanding vault debt to the current time.
     * Repay an outstanding PAR balance to a vault.
     * @param _amount the amount of PAR tokens in WEI to be repaid.*
     * @param _vaultId the ID of the vault for which to repay the outstanding debt balance.
     */
    repay: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `liquidatePartial()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. A LiquidationFee will be applied to the borrower during the liquidation. This means that the change in outstanding debt can be smaller than the repaid amount. `liquidatePartial()` can be called by anyone.
     * Liquidate a vault partially that is below the liquidation treshold by repaying part of its outstanding debt.
     * @param _amount the amount of debt+liquidationFee to repay.*
     * @param _vaultId the ID of the vault to be liquidated.
     */
    liquidatePartial: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cumulativeRate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    lastRefresh(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    vaultConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      liquidationRatio: BN;
      minCollateralRatio: BN;
      borrowRate: BN;
      originationFee: BN;
      liquidationBonus: BN;
      liquidationFee: BN;
    }>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    inceptionCollateral(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    adminInceptionVault(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionVaultsData(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    inceptionPriceFeed(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
