/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface MIMOBuybackUniswapV2Contract
  extends Truffle.Contract<MIMOBuybackUniswapV2Instance> {
  "new"(
    _lockExpiry: number | BN | string,
    _router: string,
    _a: string,
    _mimo: string,
    meta?: Truffle.TransactionDetails
  ): Promise<MIMOBuybackUniswapV2Instance>;
}

type AllEvents = never;

export interface MIMOBuybackUniswapV2Instance extends Truffle.ContractInstance {
  KEEPER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MIMO(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PAR(txDetails?: Truffle.TransactionDetails): Promise<string>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  lockExpiry(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  router(txDetails?: Truffle.TransactionDetails): Promise<string>;

  whitelistEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  withdrawMIMO: {
    (destination: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyMIMO: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setWhitelistEnabled: {
    (_status: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    KEEPER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MIMO(txDetails?: Truffle.TransactionDetails): Promise<string>;

    PAR(txDetails?: Truffle.TransactionDetails): Promise<string>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    lockExpiry(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    router(txDetails?: Truffle.TransactionDetails): Promise<string>;

    whitelistEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    withdrawMIMO: {
      (destination: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyMIMO: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setWhitelistEnabled: {
      (_status: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
