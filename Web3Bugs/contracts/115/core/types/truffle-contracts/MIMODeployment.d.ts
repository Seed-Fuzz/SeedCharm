/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface MIMODeploymentContract
  extends Truffle.Contract<MIMODeploymentInstance> {
  "new"(
    _ga: string,
    _mimo: string,
    _mimoDistributor: string,
    _wethSupplyMiner: string,
    _wbtcSupplyMiner: string,
    _usdcSupplyMiner: string,
    _demandMiner: string,
    _debtNotifier: string,
    _votingEscrow: string,
    _weth: string,
    _wbtc: string,
    _usdc: string,
    meta?: Truffle.TransactionDetails
  ): Promise<MIMODeploymentInstance>;
}

type AllEvents = never;

export interface MIMODeploymentInstance extends Truffle.ContractInstance {
  debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

  demandMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ga(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mimoDistributor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  usdc(txDetails?: Truffle.TransactionDetails): Promise<string>;

  usdcSupplyMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  votingEscrow(txDetails?: Truffle.TransactionDetails): Promise<string>;

  wbtc(txDetails?: Truffle.TransactionDetails): Promise<string>;

  wbtcSupplyMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

  wethSupplyMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setup: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    debtNotifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

    demandMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ga(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mimo(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mimoDistributor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    usdc(txDetails?: Truffle.TransactionDetails): Promise<string>;

    usdcSupplyMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    votingEscrow(txDetails?: Truffle.TransactionDetails): Promise<string>;

    wbtc(txDetails?: Truffle.TransactionDetails): Promise<string>;

    wbtcSupplyMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

    wethSupplyMiner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setup: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
