/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface MIMODistributorContract
  extends Truffle.Contract<MIMODistributorInstance> {
  "new"(
    _a: string,
    _startTime: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<MIMODistributorInstance>;
}

export interface PayeeAdded {
  name: "PayeeAdded";
  args: {
    account: string;
    shares: BN;
    0: string;
    1: BN;
  };
}

export interface TokensReleased {
  name: "TokensReleased";
  args: {
    newTokens: BN;
    releasedAt: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents = PayeeAdded | TokensReleased;

export interface MIMODistributorInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * will release existing fees before the update.
   * Updates the payee configuration to a new one.
   * @param _payees Array of payees
   * @param _shares Array of shares for each payee
   */
  changePayees: {
    (
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get current configured payees.
   */
  getPayees(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  payees(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * anyone can call this.
   * Public function to release the accumulated new MIMO tokens to the payees.
   */
  release: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  shares(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  startTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalShares(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Get current monthly issuance of new MIMO tokens.
   */
  currentIssuance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * invalid for timestamps before deployment
   * Get monthly issuance of new MIMO tokens at `timestamp`.
   * @param timestamp for which to calculate the monthly issuance
   */
  weeklyIssuanceAt(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Calculates how many MIMO tokens can be minted since the last time tokens were minted
   */
  mintableTokens(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Calculates the totalSupply for any point after `startTime`
   * @param timestamp for which to calculate the totalSupply
   */
  totalSupplyAt(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * will release existing fees before the update.
     * Updates the payee configuration to a new one.
     * @param _payees Array of payees
     * @param _shares Array of shares for each payee
     */
    changePayees: {
      (
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get current configured payees.
     */
    getPayees(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    payees(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * anyone can call this.
     * Public function to release the accumulated new MIMO tokens to the payees.
     */
    release: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    shares(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    startTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalShares(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Get current monthly issuance of new MIMO tokens.
     */
    currentIssuance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * invalid for timestamps before deployment
     * Get monthly issuance of new MIMO tokens at `timestamp`.
     * @param timestamp for which to calculate the monthly issuance
     */
    weeklyIssuanceAt(
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Calculates how many MIMO tokens can be minted since the last time tokens were minted
     */
    mintableTokens(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Calculates the totalSupply for any point after `startTime`
     * @param timestamp for which to calculate the totalSupply
     */
    totalSupplyAt(
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
