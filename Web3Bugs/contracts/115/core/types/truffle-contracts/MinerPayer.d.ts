/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface MinerPayerContract
  extends Truffle.Contract<MinerPayerInstance> {
  "new"(
    _a: string,
    meta?: Truffle.TransactionDetails
  ): Promise<MinerPayerInstance>;
}

export interface PayeeAdded {
  name: "PayeeAdded";
  args: {
    account: string;
    shares: BN;
    0: string;
    1: BN;
  };
}

export interface TokensReleased {
  name: "TokensReleased";
  args: {
    newTokens: BN;
    releasedAt: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents = PayeeAdded | TokensReleased;

export interface MinerPayerInstance extends Truffle.ContractInstance {
  KEEPER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  payees(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  shares(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalShares(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  release: {
    (
      totalAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      totalAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      totalAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      totalAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Updates the payee configuration to a new one.
   * @param _payees Array of payees
   * @param _shares Array of shares for each payee
   */
  changePayees: {
    (
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payees: string[],
      _shares: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get current configured payees.
   */
  getPayees(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  methods: {
    KEEPER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    payees(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    shares(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalShares(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    release: {
      (
        totalAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        totalAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        totalAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        totalAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates the payee configuration to a new one.
     * @param _payees Array of payees
     * @param _shares Array of shares for each payee
     */
    changePayees: {
      (
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payees: string[],
        _shares: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get current configured payees.
     */
    getPayees(txDetails?: Truffle.TransactionDetails): Promise<string[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
