/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface MockBalancerPoolContract
  extends Truffle.Contract<MockBalancerPoolInstance> {
  "new"(
    _tokenA: string,
    _tokenB: string,
    meta?: Truffle.TransactionDetails
  ): Promise<MockBalancerPoolInstance>;
}

type AllEvents = never;

export interface MockBalancerPoolInstance extends Truffle.ContractInstance {
  tokenA(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenB(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenBalances(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokenWeights(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setNormalizedWeight: {
    (
      token: string,
      weight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      weight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      weight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      weight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTotalSupply: {
    (
      supply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      supply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      supply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      supply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNormalizedWeights(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

  methods: {
    tokenA(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tokenB(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tokenBalances(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    tokenWeights(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    setNormalizedWeight: {
      (
        token: string,
        weight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        weight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        weight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        weight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTotalSupply: {
      (
        supply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        supply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        supply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        supply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getNormalizedWeights(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
