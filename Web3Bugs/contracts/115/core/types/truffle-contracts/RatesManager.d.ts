/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface RatesManagerContract
  extends Truffle.Contract<RatesManagerInstance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<RatesManagerInstance>;
}

type AllEvents = never;

export interface RatesManagerInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Calculate the annualized borrow rate from the specified borrowing rate.
   * @param _borrowRate rate for a 1 second interval specified in RAY accuracy.
   */
  annualizedBorrowRate(
    _borrowRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Calculate the total debt from a specified base debt and cumulative rate.
   * @param _baseDebt the base debt to be used. Can be a vault base debt or an aggregate base debt
   * @param _cumulativeRate the cumulative rate in RAY accuracy.
   */
  calculateDebt(
    _baseDebt: number | BN | string,
    _cumulativeRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Calculate the base debt from a specified total debt and cumulative rate.
   * @param _cumulativeRate the cumulative rate in RAY accuracy.
   * @param _debt the total debt to be used.
   */
  calculateBaseDebt(
    _debt: number | BN | string,
    _cumulativeRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Bring an existing cumulative rate forward in time
   * @param _borrowRate rate for a 1 second interval specified in RAY accuracy to be applied
   * @param _cumulativeRate the initial cumulative rate from which to apply the borrow rate
   * @param _timeElapsed the time over whicht the borrow rate shall be applied
   */
  calculateCumulativeRate(
    _borrowRate: number | BN | string,
    _cumulativeRate: number | BN | string,
    _timeElapsed: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Calculate the annualized borrow rate from the specified borrowing rate.
     * @param _borrowRate rate for a 1 second interval specified in RAY accuracy.
     */
    annualizedBorrowRate(
      _borrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Calculate the total debt from a specified base debt and cumulative rate.
     * @param _baseDebt the base debt to be used. Can be a vault base debt or an aggregate base debt
     * @param _cumulativeRate the cumulative rate in RAY accuracy.
     */
    calculateDebt(
      _baseDebt: number | BN | string,
      _cumulativeRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Calculate the base debt from a specified total debt and cumulative rate.
     * @param _cumulativeRate the cumulative rate in RAY accuracy.
     * @param _debt the total debt to be used.
     */
    calculateBaseDebt(
      _debt: number | BN | string,
      _cumulativeRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Bring an existing cumulative rate forward in time
     * @param _borrowRate rate for a 1 second interval specified in RAY accuracy to be applied
     * @param _cumulativeRate the initial cumulative rate from which to apply the borrow rate
     * @param _timeElapsed the time over whicht the borrow rate shall be applied
     */
    calculateCumulativeRate(
      _borrowRate: number | BN | string,
      _cumulativeRate: number | BN | string,
      _timeElapsed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
