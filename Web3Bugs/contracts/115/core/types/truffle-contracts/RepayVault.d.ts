/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface RepayVaultContract
  extends Truffle.Contract<RepayVaultInstance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<RepayVaultInstance>;
}

type AllEvents = never;

export interface RepayVaultInstance extends Truffle.ContractInstance {
  REPAY_PER_VAULT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  repay: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    REPAY_PER_VAULT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    repay: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
