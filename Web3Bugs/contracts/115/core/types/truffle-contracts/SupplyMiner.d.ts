/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface SupplyMinerContract
  extends Truffle.Contract<SupplyMinerInstance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SupplyMinerInstance>;
}

export interface StakeDecreased {
  name: "StakeDecreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

export interface StakeIncreased {
  name: "StakeIncreased";
  args: {
    user: string;
    stake: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = StakeDecreased | StakeIncreased;

export interface SupplyMinerInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the number of tokens a user can claim via `releaseMIMO`.
   * @param _user the address of the user.
   */
  pendingMIMO(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Releases the outstanding MIMO balance to the user.
   * @param _user the address of the user for which the MIMO tokens will be released.
   */
  releaseMIMO: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the number of tokens a user has staked.
   * @param _user the address of the user.
   */
  stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the userInfo stored of a user.
   * @param _user the address of the user.
   */
  userInfo(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{stake: BN; accAmountPerShare: BN}>;

  /**
   * Gets called by the `DebtNotifier` and will update the stake of the user to match his current outstanding debt by using his baseDebt.
   * @param newBaseDebt the new baseDebt and therefore stake for the user.
   * @param user address of the user.
   */
  baseDebtChanged: {
    (
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the number of tokens a user can claim via `releaseMIMO`.
     * @param _user the address of the user.
     */
    pendingMIMO(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Releases the outstanding MIMO balance to the user.
     * @param _user the address of the user for which the MIMO tokens will be released.
     */
    releaseMIMO: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the number of tokens a user has staked.
     * @param _user the address of the user.
     */
    stake(_user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the userInfo stored of a user.
     * @param _user the address of the user.
     */
    userInfo(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{stake: BN; accAmountPerShare: BN}>;

    /**
     * Gets called by the `DebtNotifier` and will update the stake of the user to match his current outstanding debt by using his baseDebt.
     * @param newBaseDebt the new baseDebt and therefore stake for the user.
     * @param user address of the user.
     */
    baseDebtChanged: {
      (
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
