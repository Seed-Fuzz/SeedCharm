/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface VaultsCoreStateContract
  extends Truffle.Contract<VaultsCoreStateInstance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<VaultsCoreStateInstance>;
}

export interface CumulativeRateUpdated {
  name: "CumulativeRateUpdated";
  args: {
    collateralType: string;
    elapsedTime: BN;
    newCumulativeRate: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents = CumulativeRateUpdated;

export interface VaultsCoreStateInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  cumulativeRates(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lastRefresh(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  synced(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Calculate the available income
   */
  availableIncome(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * anyone can call this.*
   * Refresh the cumulative rates and debts of all vaults and all collateral types.
   */
  refresh: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * This call will read the state via `cumulativeRates(address collateralType)` and `lastRefresh(address collateralType)`.
   * Sync state with another instance. This is used during version upgrade to keep V2 in sync with V2.
   * @param _stateAddress address from which the state is to be copied.*
   */
  syncState: {
    (_stateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _stateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _stateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This call will read the state via `cumulativeRates(address collateralType)` and `lastRefresh(address collateralType)`.
   * Sync state with v1 core. This is used during version upgrade to keep V2 in sync with V1.
   * @param _core address of core v1 from which the state is to be copied.*
   */
  syncStateFromV1: {
    (_core: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_core: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _core: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _core: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Initialize the cumulative rates to 1 for a new collateral type.
   * @param _collateralType the address of the new collateral type to be initialized*
   */
  initializeRates: {
    (_collateralType: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this updates the debt for all vaults with the specified collateral type.
   * Refresh the cumulative rate of a collateraltype.
   * @param _collateralType the address of the collateral type to be refreshed.*
   */
  refreshCollateral: {
    (_collateralType: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    cumulativeRates(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lastRefresh(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    synced(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Calculate the available income
     */
    availableIncome(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * anyone can call this.*
     * Refresh the cumulative rates and debts of all vaults and all collateral types.
     */
    refresh: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * This call will read the state via `cumulativeRates(address collateralType)` and `lastRefresh(address collateralType)`.
     * Sync state with another instance. This is used during version upgrade to keep V2 in sync with V2.
     * @param _stateAddress address from which the state is to be copied.*
     */
    syncState: {
      (_stateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _stateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _stateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _stateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This call will read the state via `cumulativeRates(address collateralType)` and `lastRefresh(address collateralType)`.
     * Sync state with v1 core. This is used during version upgrade to keep V2 in sync with V1.
     * @param _core address of core v1 from which the state is to be copied.*
     */
    syncStateFromV1: {
      (_core: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _core: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _core: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _core: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Initialize the cumulative rates to 1 for a new collateral type.
     * @param _collateralType the address of the new collateral type to be initialized*
     */
    initializeRates: {
      (
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this updates the debt for all vaults with the specified collateral type.
     * Refresh the cumulative rate of a collateraltype.
     * @param _collateralType the address of the collateral type to be refreshed.*
     */
    refreshCollateral: {
      (
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
