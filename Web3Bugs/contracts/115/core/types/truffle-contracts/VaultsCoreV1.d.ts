/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface VaultsCoreV1Contract
  extends Truffle.Contract<VaultsCoreV1Instance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<VaultsCoreV1Instance>;
}

export interface Borrowed {
  name: "Borrowed";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface CumulativeRateUpdated {
  name: "CumulativeRateUpdated";
  args: {
    collateralType: string;
    elapsedTime: BN;
    newCumulativeRate: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface Deposited {
  name: "Deposited";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface InsurancePaid {
  name: "InsurancePaid";
  args: {
    vaultId: BN;
    insuranceAmount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface Liquidated {
  name: "Liquidated";
  args: {
    vaultId: BN;
    debtRepaid: BN;
    collateralLiquidated: BN;
    owner: string;
    sender: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: string;
  };
}

export interface Opened {
  name: "Opened";
  args: {
    vaultId: BN;
    collateralType: string;
    owner: string;
    0: BN;
    1: string;
    2: string;
  };
}

export interface Repaid {
  name: "Repaid";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface Withdrawn {
  name: "Withdrawn";
  args: {
    vaultId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

type AllEvents =
  | Borrowed
  | CumulativeRateUpdated
  | Deposited
  | InsurancePaid
  | Liquidated
  | Opened
  | Repaid
  | Withdrawn;

export interface VaultsCoreV1Instance extends Truffle.ContractInstance {
  MAX_INT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  cumulativeRates(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lastRefresh(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  upgrade: {
    (_newVaultsCore: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newVaultsCore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Calculate the available income
   */
  availableIncome(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Refresh the cumulative rates and debts of all vaults and all collateral types.*
   */
  refresh: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Initialize the cumulative rates to 1 for a new collateral type.
   * @param _collateralType the address of the new collateral type to be initialized*
   */
  initializeRates: {
    (_collateralType: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this updates the debt for all vaults with the specified collateral type.
   * Refresh the cumulative rate of a collateraltype.
   * @param _collateralType the address of the collateral type to be refreshed.*
   */
  refreshCollateral: {
    (_collateralType: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function used `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
   * Deposit an ERC20 token into the vault of the msg.sender as collateral
   * @param _amount the amount of tokens to be deposited in WEI.*
   * @param _collateralType the address of the collateral type to be deposited
   */
  deposit: {
    (
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only te owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the liquidation treshold.
   * Withdraws ERC20 tokens from a vault.
   * @param _amount the amount of ERC20 tokens to be withdrawn in WEI.*
   * @param _vaultId the ID of the vault from which to withdraw the collateral.
   */
  withdraw: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only te owner of a vault can withdraw collateral from it. `withdrawAll()` will fail if the vault has any outstanding debt attached to it.
   * Convenience function to withdraw all collateral of a vault
   * @param _vaultId the ID of the vault from which to withdraw the collateral.*
   */
  withdrawAll: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only te owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. and will fail if it would bring the vault below the liquidation treshold.
   * Borrow new StableX (Eg: PAR) tokens from a vault.
   * @param _amount the amount of borrowed StableX tokens in WEI.*
   * @param _vaultId the ID of the vault from which to borrow.
   */
  borrow: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `repayAll()` will update the outstanding vault debt to the current time.
   * Convenience function to repay all debt of a vault
   * @param _vaultId the ID of the vault for which to repay the debt.*
   */
  repayAll: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `repay()` will update the outstanding vault debt to the current time.
   * Repay an outstanding StableX balance to a vault.
   * @param _amount the amount of StableX tokens in WEI to be repaid.*
   * @param _vaultId the ID of the vault for which to repay the outstanding debt balance.
   */
  repay: {
    (
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `liquidate()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. `liquidate()` can be called by anyone.
   * Liquidate a vault that is below the liquidation treshold by repaying it's outstanding debt.
   * @param _vaultId the ID of the vault to be liquidated.*
   */
  liquidate: {
    (
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    MAX_INT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    cumulativeRates(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lastRefresh(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    upgrade: {
      (_newVaultsCore: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _newVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newVaultsCore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Calculate the available income
     */
    availableIncome(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Refresh the cumulative rates and debts of all vaults and all collateral types.*
     */
    refresh: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Initialize the cumulative rates to 1 for a new collateral type.
     * @param _collateralType the address of the new collateral type to be initialized*
     */
    initializeRates: {
      (
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this updates the debt for all vaults with the specified collateral type.
     * Refresh the cumulative rate of a collateraltype.
     * @param _collateralType the address of the collateral type to be refreshed.*
     */
    refreshCollateral: {
      (
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function used `transferFrom()` and requires pre-approval via `approve()` on the ERC20.
     * Deposit an ERC20 token into the vault of the msg.sender as collateral
     * @param _amount the amount of tokens to be deposited in WEI.*
     * @param _collateralType the address of the collateral type to be deposited
     */
    deposit: {
      (
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only te owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the liquidation treshold.
     * Withdraws ERC20 tokens from a vault.
     * @param _amount the amount of ERC20 tokens to be withdrawn in WEI.*
     * @param _vaultId the ID of the vault from which to withdraw the collateral.
     */
    withdraw: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only te owner of a vault can withdraw collateral from it. `withdrawAll()` will fail if the vault has any outstanding debt attached to it.
     * Convenience function to withdraw all collateral of a vault
     * @param _vaultId the ID of the vault from which to withdraw the collateral.*
     */
    withdrawAll: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only te owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. and will fail if it would bring the vault below the liquidation treshold.
     * Borrow new StableX (Eg: PAR) tokens from a vault.
     * @param _amount the amount of borrowed StableX tokens in WEI.*
     * @param _vaultId the ID of the vault from which to borrow.
     */
    borrow: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `repayAll()` will update the outstanding vault debt to the current time.
     * Convenience function to repay all debt of a vault
     * @param _vaultId the ID of the vault for which to repay the debt.*
     */
    repayAll: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `repay()` will update the outstanding vault debt to the current time.
     * Repay an outstanding StableX balance to a vault.
     * @param _amount the amount of StableX tokens in WEI to be repaid.*
     * @param _vaultId the ID of the vault for which to repay the outstanding debt balance.
     */
    repay: {
      (
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `liquidate()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. `liquidate()` can be called by anyone.
     * Liquidate a vault that is below the liquidation treshold by repaying it's outstanding debt.
     * @param _vaultId the ID of the vault to be liquidated.*
     */
    liquidate: {
      (
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _vaultId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
