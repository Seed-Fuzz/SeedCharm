/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import {EventData, PastEventOptions} from "web3-eth-contract";

export interface VaultsDataProviderV1Contract
  extends Truffle.Contract<VaultsDataProviderV1Instance> {
  "new"(
    _addresses: string,
    meta?: Truffle.TransactionDetails
  ): Promise<VaultsDataProviderV1Instance>;
}

type AllEvents = never;

export interface VaultsDataProviderV1Instance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  baseDebt(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  vaultCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * only the vaultsCore module can call this function
   * Opens a new vault.
   * @param _collateralType address to the collateral asset e.g. WETH
   * @param _owner the owner of the new vault.
   */
  createVault: {
    (
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * only the vaultsCore module can call this function
   * Set the collateral balance of a vault.
   * @param _balance the new balance of the vault.
   * @param _id Vault ID of which the collateral balance will be updated
   */
  setCollateralBalance: {
    (
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * only the vaultsCore module can call this function
   * Set the base debt of a vault.
   * @param _id Vault ID of which the base debt will be updated
   * @param _newBaseDebt the new base debt of the vault.
   */
  setBaseDebt: {
    (
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      _newBaseDebt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get a vault by vault ID.
   * @param _id The vault's ID to be retrieved
   */
  vaults(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralType: string;
    owner: string;
    collateralBalance: BN;
    baseDebt: BN;
    createdAt: BN;
  }>;

  /**
   * Get the owner of a vault.
   * @param _id the ID of the vault
   */
  vaultOwner(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the collateral type of a vault.
   * @param _id the ID of the vault
   */
  vaultCollateralType(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the collateral balance of a vault.
   * @param _id the ID of the vault
   */
  vaultCollateralBalance(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the base debt of a vault.
   * @param _id the ID of the vault
   */
  vaultBaseDebt(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * returns 0 for non-existing vaults
   * Retrieve the vault id for a specified owner and collateral type.
   * @param _collateralType address of the collateral type (Eg: WETH)
   * @param _owner address of the owner of the vault
   */
  vaultId(
    _collateralType: string,
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Checks if a specified vault exists.
   * @param _id the ID of the vault
   */
  vaultExists(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * uses the existing cumulative rate. Call `refresh()` on `VaultsCore` to make sure it's up to date.
   * Calculated the total outstanding debt for all vaults and all collateral types.
   */
  debt(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * uses the existing cumulative rate. Call `refreshCollateral()` on `VaultsCore` to make sure it's up to date.
   * Calculated the total outstanding debt for all vaults of a specific collateral type.
   * @param _collateralType address of the collateral type (Eg: WETH)
   */
  collateralDebt(
    _collateralType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * uses the existing cumulative rate. Call `refreshCollateral()` on `VaultsCore` to make sure it's up to date.
   * Calculated the total outstanding debt for a specific vault.
   * @param _vaultId the ID of the vault
   */
  vaultDebt(
    _vaultId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    baseDebt(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    vaultCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * only the vaultsCore module can call this function
     * Opens a new vault.
     * @param _collateralType address to the collateral asset e.g. WETH
     * @param _owner the owner of the new vault.
     */
    createVault: {
      (
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralType: string,
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * only the vaultsCore module can call this function
     * Set the collateral balance of a vault.
     * @param _balance the new balance of the vault.
     * @param _id Vault ID of which the collateral balance will be updated
     */
    setCollateralBalance: {
      (
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * only the vaultsCore module can call this function
     * Set the base debt of a vault.
     * @param _id Vault ID of which the base debt will be updated
     * @param _newBaseDebt the new base debt of the vault.
     */
    setBaseDebt: {
      (
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        _newBaseDebt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get a vault by vault ID.
     * @param _id The vault's ID to be retrieved
     */
    vaults(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralType: string;
      owner: string;
      collateralBalance: BN;
      baseDebt: BN;
      createdAt: BN;
    }>;

    /**
     * Get the owner of a vault.
     * @param _id the ID of the vault
     */
    vaultOwner(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the collateral type of a vault.
     * @param _id the ID of the vault
     */
    vaultCollateralType(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the collateral balance of a vault.
     * @param _id the ID of the vault
     */
    vaultCollateralBalance(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the base debt of a vault.
     * @param _id the ID of the vault
     */
    vaultBaseDebt(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * returns 0 for non-existing vaults
     * Retrieve the vault id for a specified owner and collateral type.
     * @param _collateralType address of the collateral type (Eg: WETH)
     * @param _owner address of the owner of the vault
     */
    vaultId(
      _collateralType: string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Checks if a specified vault exists.
     * @param _id the ID of the vault
     */
    vaultExists(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * uses the existing cumulative rate. Call `refresh()` on `VaultsCore` to make sure it's up to date.
     * Calculated the total outstanding debt for all vaults and all collateral types.
     */
    debt(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * uses the existing cumulative rate. Call `refreshCollateral()` on `VaultsCore` to make sure it's up to date.
     * Calculated the total outstanding debt for all vaults of a specific collateral type.
     * @param _collateralType address of the collateral type (Eg: WETH)
     */
    collateralDebt(
      _collateralType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * uses the existing cumulative rate. Call `refreshCollateral()` on `VaultsCore` to make sure it's up to date.
     * Calculated the total outstanding debt for a specific vault.
     * @param _vaultId the ID of the vault
     */
    vaultDebt(
      _vaultId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
