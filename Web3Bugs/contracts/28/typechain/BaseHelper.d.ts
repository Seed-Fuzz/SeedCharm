/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BaseHelperInterface extends ethers.utils.Interface {
  functions: {
    "accessControls()": FunctionFragment;
    "farmFactory()": FunctionFragment;
    "launcher()": FunctionFragment;
    "market()": FunctionFragment;
    "setContracts(address,address,address,address)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "launcher", values?: undefined): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launcher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;

  events: {};
}

export class BaseHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BaseHelperInterface;

  functions: {
    accessControls(overrides?: CallOverrides): Promise<[string]>;

    "accessControls()"(overrides?: CallOverrides): Promise<[string]>;

    farmFactory(overrides?: CallOverrides): Promise<[string]>;

    "farmFactory()"(overrides?: CallOverrides): Promise<[string]>;

    launcher(overrides?: CallOverrides): Promise<[string]>;

    "launcher()"(overrides?: CallOverrides): Promise<[string]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    "market()"(overrides?: CallOverrides): Promise<[string]>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<[string]>;
  };

  accessControls(overrides?: CallOverrides): Promise<string>;

  "accessControls()"(overrides?: CallOverrides): Promise<string>;

  farmFactory(overrides?: CallOverrides): Promise<string>;

  "farmFactory()"(overrides?: CallOverrides): Promise<string>;

  launcher(overrides?: CallOverrides): Promise<string>;

  "launcher()"(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  setContracts(
    _tokenFactory: string,
    _market: string,
    _launcher: string,
    _farmFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContracts(address,address,address,address)"(
    _tokenFactory: string,
    _market: string,
    _launcher: string,
    _farmFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accessControls(overrides?: CallOverrides): Promise<string>;

    "accessControls()"(overrides?: CallOverrides): Promise<string>;

    farmFactory(overrides?: CallOverrides): Promise<string>;

    "farmFactory()"(overrides?: CallOverrides): Promise<string>;

    launcher(overrides?: CallOverrides): Promise<string>;

    "launcher()"(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControls()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "farmFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    launcher(overrides?: CallOverrides): Promise<BigNumber>;

    "launcher()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "launcher()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
