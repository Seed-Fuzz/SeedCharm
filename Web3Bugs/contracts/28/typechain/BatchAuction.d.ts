/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BatchAuctionInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "SMART_CONTRACT_ROLE()": FunctionFragment;
    "addAdminRole(address)": FunctionFragment;
    "addMinterRole(address)": FunctionFragment;
    "addOperatorRole(address)": FunctionFragment;
    "addSmartContractRole(address)": FunctionFragment;
    "auctionEnded()": FunctionFragment;
    "auctionSuccessful()": FunctionFragment;
    "auctionToken()": FunctionFragment;
    "batch(bytes[],bool)": FunctionFragment;
    "cancelAuction()": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "commitEth(address,bool)": FunctionFragment;
    "commitTokens(uint256,bool)": FunctionFragment;
    "commitTokensFrom(address,uint256,bool)": FunctionFragment;
    "commitments(address)": FunctionFragment;
    "enableList(bool)": FunctionFragment;
    "finalize()": FunctionFragment;
    "finalizeTimeExpired()": FunctionFragment;
    "finalized()": FunctionFragment;
    "getAllDocuments()": FunctionFragment;
    "getBaseInformation()": FunctionFragment;
    "getBatchAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,address,address,address)": FunctionFragment;
    "getDocument(string)": FunctionFragment;
    "getDocumentCount()": FunctionFragment;
    "getDocumentName(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTotalTokens()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAdminRole(address)": FunctionFragment;
    "hasMinterRole(address)": FunctionFragment;
    "hasOperatorRole(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasSmartContractRole(address)": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "initAccessControls(address)": FunctionFragment;
    "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)": FunctionFragment;
    "initMarket(bytes)": FunctionFragment;
    "marketInfo()": FunctionFragment;
    "marketParticipationAgreement()": FunctionFragment;
    "marketStatus()": FunctionFragment;
    "marketTemplate()": FunctionFragment;
    "paymentCurrency()": FunctionFragment;
    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "pointList()": FunctionFragment;
    "removeAdminRole(address)": FunctionFragment;
    "removeDocument(string)": FunctionFragment;
    "removeMinterRole(address)": FunctionFragment;
    "removeOperatorRole(address)": FunctionFragment;
    "removeSmartContractRole(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAuctionPrice(uint256)": FunctionFragment;
    "setAuctionTime(uint256,uint256)": FunctionFragment;
    "setAuctionWallet(address)": FunctionFragment;
    "setDocument(string,string)": FunctionFragment;
    "setDocuments(string[],string[])": FunctionFragment;
    "setList(address)": FunctionFragment;
    "tokenPrice()": FunctionFragment;
    "tokensClaimable(address)": FunctionFragment;
    "wallet()": FunctionFragment;
    "withdrawTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SMART_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSuccessful",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "commitEth",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "commitTokens",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "commitTokensFrom",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "commitments", values: [string]): string;
  encodeFunctionData(functionFragment: "enableList", values: [boolean]): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeTimeExpired",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseInformation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchAuctionInitData",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "getDocument", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDocumentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initAccessControls",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initAuction",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initMarket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketParticipationAgreement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "pointList", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDocument",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocuments",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "setList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensClaimable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SMART_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commitEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTokensFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enableList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTimeExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchAuctionInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketParticipationAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pointList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "AddedCommitment(address,uint256)": EventFragment;
    "AdminRoleGranted(address,address)": EventFragment;
    "AdminRoleRemoved(address,address)": EventFragment;
    "AuctionCancelled()": EventFragment;
    "AuctionFinalized()": EventFragment;
    "AuctionPriceUpdated(uint256)": EventFragment;
    "AuctionTimeUpdated(uint256,uint256)": EventFragment;
    "AuctionWalletUpdated(address)": EventFragment;
    "DocumentRemoved(string,string)": EventFragment;
    "DocumentUpdated(string,string)": EventFragment;
    "MinterRoleGranted(address,address)": EventFragment;
    "MinterRoleRemoved(address,address)": EventFragment;
    "OperatorRoleGranted(address,address)": EventFragment;
    "OperatorRoleRemoved(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SmartContractRoleGranted(address,address)": EventFragment;
    "SmartContractRoleRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedCommitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleRemoved"): EventFragment;
}

export class BatchAuction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BatchAuctionInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctionEnded(overrides?: CallOverrides): Promise<[boolean]>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<[boolean]>;

    auctionSuccessful(overrides?: CallOverrides): Promise<[boolean]>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<[boolean]>;

    auctionToken(overrides?: CallOverrides): Promise<[string]>;

    "auctionToken()"(overrides?: CallOverrides): Promise<[string]>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancelAuction(overrides?: Overrides): Promise<ContractTransaction>;

    "cancelAuction()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    commitEth(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "commitEth(address,bool)"(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    commitTokens(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitTokens(uint256,bool)"(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitTokensFrom(address,uint256,bool)"(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitments(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enableList(
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableList(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

    finalizeTimeExpired(overrides?: CallOverrides): Promise<[boolean]>;

    "finalizeTimeExpired()"(overrides?: CallOverrides): Promise<[boolean]>;

    finalized(overrides?: CallOverrides): Promise<[boolean]>;

    "finalized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getAllDocuments(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllDocuments()"(overrides?: CallOverrides): Promise<[string[]]>;

    getBaseInformation(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        token: string;
        startTime: BigNumber;
        endTime: BigNumber;
        marketFinalized: boolean;
      }
    >;

    "getBaseInformation()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        token: string;
        startTime: BigNumber;
        endTime: BigNumber;
        marketFinalized: boolean;
      }
    >;

    getBatchAuctionInitData(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    "getBatchAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    getDocument(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDocumentCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDocumentCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "init(bytes)"(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initMarket(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initMarket(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    "marketInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    marketParticipationAgreement(overrides?: CallOverrides): Promise<[string]>;

    "marketParticipationAgreement()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    marketStatus(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        minimumCommitmentAmount: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    "marketStatus()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        minimumCommitmentAmount: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    marketTemplate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "marketTemplate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    paymentCurrency(overrides?: CallOverrides): Promise<[string]>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pointList(overrides?: CallOverrides): Promise<[string]>;

    "pointList()"(overrides?: CallOverrides): Promise<[string]>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeDocument(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeDocument(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuctionPrice(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionPrice(uint256)"(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuctionTime(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionTime(uint256,uint256)"(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuctionWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDocument(
      _name: string,
      _data: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDocument(string,string)"(
      _name: string,
      _data: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDocuments(
      _name: string[],
      _data: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDocuments(string[],string[])"(
      _name: string[],
      _data: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setList(_list: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setList(address)"(
      _list: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimerCommitment: BigNumber }>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimerCommitment: BigNumber }>;

    wallet(overrides?: CallOverrides): Promise<[string]>;

    "wallet()"(overrides?: CallOverrides): Promise<[string]>;

    "withdrawTokens(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTokens()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctionEnded(overrides?: CallOverrides): Promise<boolean>;

  "auctionEnded()"(overrides?: CallOverrides): Promise<boolean>;

  auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

  "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

  auctionToken(overrides?: CallOverrides): Promise<string>;

  "auctionToken()"(overrides?: CallOverrides): Promise<string>;

  batch(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batch(bytes[],bool)"(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancelAuction(overrides?: Overrides): Promise<ContractTransaction>;

  "cancelAuction()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  commitEth(
    _beneficiary: string,
    readAndAgreedToMarketParticipationAgreement: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "commitEth(address,bool)"(
    _beneficiary: string,
    readAndAgreedToMarketParticipationAgreement: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  commitTokens(
    _amount: BigNumberish,
    readAndAgreedToMarketParticipationAgreement: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitTokens(uint256,bool)"(
    _amount: BigNumberish,
    readAndAgreedToMarketParticipationAgreement: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitTokensFrom(
    _from: string,
    _amount: BigNumberish,
    readAndAgreedToMarketParticipationAgreement: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitTokensFrom(address,uint256,bool)"(
    _from: string,
    _amount: BigNumberish,
    readAndAgreedToMarketParticipationAgreement: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "commitments(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enableList(
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableList(bool)"(
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

  finalizeTimeExpired(overrides?: CallOverrides): Promise<boolean>;

  "finalizeTimeExpired()"(overrides?: CallOverrides): Promise<boolean>;

  finalized(overrides?: CallOverrides): Promise<boolean>;

  "finalized()"(overrides?: CallOverrides): Promise<boolean>;

  getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

  "getAllDocuments()"(overrides?: CallOverrides): Promise<string[]>;

  getBaseInformation(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      token: string;
      startTime: BigNumber;
      endTime: BigNumber;
      marketFinalized: boolean;
    }
  >;

  "getBaseInformation()"(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      token: string;
      startTime: BigNumber;
      endTime: BigNumber;
      marketFinalized: boolean;
    }
  >;

  getBatchAuctionInitData(
    _funder: string,
    _token: string,
    _totalTokens: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _paymentCurrency: string,
    _minimumCommitmentAmount: BigNumberish,
    _admin: string,
    _pointList: string,
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBatchAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
    _funder: string,
    _token: string,
    _totalTokens: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _paymentCurrency: string,
    _minimumCommitmentAmount: BigNumberish,
    _admin: string,
    _pointList: string,
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getDocument(
    _name: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  "getDocument(string)"(
    _name: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getDocumentCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getDocumentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDocumentName(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDocumentName(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAdminRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMinterRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasMinterRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasOperatorRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasOperatorRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSmartContractRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasSmartContractRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "init(bytes)"(
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  initAccessControls(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initAccessControls(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initAuction(
    _funder: string,
    _token: string,
    _totalTokens: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _paymentCurrency: string,
    _minimumCommitmentAmount: BigNumberish,
    _admin: string,
    _pointList: string,
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
    _funder: string,
    _token: string,
    _totalTokens: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _paymentCurrency: string,
    _minimumCommitmentAmount: BigNumberish,
    _admin: string,
    _pointList: string,
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initMarket(
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initMarket(bytes)"(
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
    }
  >;

  "marketInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
    }
  >;

  marketParticipationAgreement(overrides?: CallOverrides): Promise<string>;

  "marketParticipationAgreement()"(overrides?: CallOverrides): Promise<string>;

  marketStatus(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, boolean] & {
      commitmentsTotal: BigNumber;
      minimumCommitmentAmount: BigNumber;
      finalized: boolean;
      usePointList: boolean;
    }
  >;

  "marketStatus()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, boolean] & {
      commitmentsTotal: BigNumber;
      minimumCommitmentAmount: BigNumber;
      finalized: boolean;
      usePointList: boolean;
    }
  >;

  marketTemplate(overrides?: CallOverrides): Promise<BigNumber>;

  "marketTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

  paymentCurrency(overrides?: CallOverrides): Promise<string>;

  "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

  permitToken(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pointList(overrides?: CallOverrides): Promise<string>;

  "pointList()"(overrides?: CallOverrides): Promise<string>;

  removeAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeDocument(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeDocument(string)"(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuctionPrice(
    _minimumCommitmentAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionPrice(uint256)"(
    _minimumCommitmentAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuctionTime(
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionTime(uint256,uint256)"(
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuctionWallet(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionWallet(address)"(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDocument(
    _name: string,
    _data: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDocument(string,string)"(
    _name: string,
    _data: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDocuments(
    _name: string[],
    _data: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDocuments(string[],string[])"(
    _name: string[],
    _data: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setList(_list: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setList(address)"(
    _list: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensClaimable(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokensClaimable(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wallet(overrides?: CallOverrides): Promise<string>;

  "wallet()"(overrides?: CallOverrides): Promise<string>;

  "withdrawTokens(address)"(
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMinterRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOperatorRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionEnded(overrides?: CallOverrides): Promise<boolean>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<boolean>;

    auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

    auctionToken(overrides?: CallOverrides): Promise<string>;

    "auctionToken()"(overrides?: CallOverrides): Promise<string>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { successes: boolean[]; results: string[] }
    >;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { successes: boolean[]; results: string[] }
    >;

    cancelAuction(overrides?: CallOverrides): Promise<void>;

    "cancelAuction()"(overrides?: CallOverrides): Promise<void>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitEth(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitEth(address,bool)"(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    commitTokens(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitTokens(uint256,bool)"(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitTokensFrom(address,uint256,bool)"(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    commitments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableList(_status: boolean, overrides?: CallOverrides): Promise<void>;

    "enableList(bool)"(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    finalize(overrides?: CallOverrides): Promise<void>;

    "finalize()"(overrides?: CallOverrides): Promise<void>;

    finalizeTimeExpired(overrides?: CallOverrides): Promise<boolean>;

    "finalizeTimeExpired()"(overrides?: CallOverrides): Promise<boolean>;

    finalized(overrides?: CallOverrides): Promise<boolean>;

    "finalized()"(overrides?: CallOverrides): Promise<boolean>;

    getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

    "getAllDocuments()"(overrides?: CallOverrides): Promise<string[]>;

    getBaseInformation(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        token: string;
        startTime: BigNumber;
        endTime: BigNumber;
        marketFinalized: boolean;
      }
    >;

    "getBaseInformation()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        token: string;
        startTime: BigNumber;
        endTime: BigNumber;
        marketFinalized: boolean;
      }
    >;

    getBatchAuctionInitData(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBatchAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getDocument(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDocumentCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDocumentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    "init(bytes)"(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    initAccessControls(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initMarket(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    "initMarket(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    marketInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    "marketInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    marketParticipationAgreement(overrides?: CallOverrides): Promise<string>;

    "marketParticipationAgreement()"(
      overrides?: CallOverrides
    ): Promise<string>;

    marketStatus(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        minimumCommitmentAmount: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    "marketStatus()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        minimumCommitmentAmount: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    marketTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "marketTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrency(overrides?: CallOverrides): Promise<string>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pointList(overrides?: CallOverrides): Promise<string>;

    "pointList()"(overrides?: CallOverrides): Promise<string>;

    removeAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDocument(_name: string, overrides?: CallOverrides): Promise<void>;

    "removeDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionPrice(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionPrice(uint256)"(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionTime(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionTime(uint256,uint256)"(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionWallet(_wallet: string, overrides?: CallOverrides): Promise<void>;

    "setAuctionWallet(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDocument(
      _name: string,
      _data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDocument(string,string)"(
      _name: string,
      _data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDocuments(
      _name: string[],
      _data: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setDocuments(string[],string[])"(
      _name: string[],
      _data: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setList(_list: string, overrides?: CallOverrides): Promise<void>;

    "setList(address)"(_list: string, overrides?: CallOverrides): Promise<void>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<string>;

    "wallet()"(overrides?: CallOverrides): Promise<string>;

    "withdrawTokens(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTokens()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AddedCommitment(addr: null, commitment: null): EventFilter;

    AdminRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    AdminRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    AuctionCancelled(): EventFilter;

    AuctionFinalized(): EventFilter;

    AuctionPriceUpdated(minimumCommitmentAmount: null): EventFilter;

    AuctionTimeUpdated(startTime: null, endTime: null): EventFilter;

    AuctionWalletUpdated(wallet: null): EventFilter;

    DocumentRemoved(_name: string | null, _data: null): EventFilter;

    DocumentUpdated(_name: string | null, _data: null): EventFilter;

    MinterRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    MinterRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SmartContractRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    SmartContractRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAdminRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMinterRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctionEnded(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionSuccessful(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionToken(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancelAuction(overrides?: Overrides): Promise<BigNumber>;

    "cancelAuction()"(overrides?: Overrides): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitEth(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "commitEth(address,bool)"(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    commitTokens(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitTokens(uint256,bool)"(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitTokensFrom(address,uint256,bool)"(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableList(_status: boolean, overrides?: Overrides): Promise<BigNumber>;

    "enableList(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalize(overrides?: Overrides): Promise<BigNumber>;

    "finalize()"(overrides?: Overrides): Promise<BigNumber>;

    finalizeTimeExpired(overrides?: CallOverrides): Promise<BigNumber>;

    "finalizeTimeExpired()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalized(overrides?: CallOverrides): Promise<BigNumber>;

    "finalized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllDocuments(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllDocuments()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseInformation(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseInformation()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchAuctionInitData(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatchAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocument(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDocumentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(_data: BytesLike, overrides?: PayableOverrides): Promise<BigNumber>;

    "init(bytes)"(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initMarket(_data: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "initMarket(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "marketInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketParticipationAgreement(overrides?: CallOverrides): Promise<BigNumber>;

    "marketParticipationAgreement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "marketStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "marketTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pointList(overrides?: CallOverrides): Promise<BigNumber>;

    "pointList()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeDocument(_name: string, overrides?: Overrides): Promise<BigNumber>;

    "removeDocument(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuctionPrice(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionPrice(uint256)"(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuctionTime(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionTime(uint256,uint256)"(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuctionWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDocument(
      _name: string,
      _data: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDocument(string,string)"(
      _name: string,
      _data: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDocuments(
      _name: string[],
      _data: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDocuments(string[],string[])"(
      _name: string[],
      _data: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setList(_list: string, overrides?: Overrides): Promise<BigNumber>;

    "setList(address)"(
      _list: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawTokens(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTokens()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SMART_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SMART_CONTRACT_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctionEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionSuccessful(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionSuccessful()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cancelAuction()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitEth(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "commitEth(address,bool)"(
      _beneficiary: string,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    commitTokens(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitTokens(uint256,bool)"(
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitTokensFrom(address,uint256,bool)"(
      _from: string,
      _amount: BigNumberish,
      readAndAgreedToMarketParticipationAgreement: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableList(
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableList(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    finalizeTimeExpired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "finalizeTimeExpired()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finalized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllDocuments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllDocuments()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseInformation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseInformation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchAuctionInitData(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocument(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDocumentCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "init(bytes)"(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _paymentCurrency: string,
      _minimumCommitmentAmount: BigNumberish,
      _admin: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initMarket(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initMarket(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketParticipationAgreement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketParticipationAgreement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketTemplate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentCurrency()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pointList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pointList()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeDocument(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeDocument(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuctionPrice(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionPrice(uint256)"(
      _minimumCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuctionTime(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionTime(uint256,uint256)"(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuctionWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDocument(
      _name: string,
      _data: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDocument(string,string)"(
      _name: string,
      _data: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDocuments(
      _name: string[],
      _data: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDocuments(string[],string[])"(
      _name: string[],
      _data: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setList(
      _list: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setList(address)"(
      _list: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawTokens(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTokens()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
