/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CalculationsSushiswapInterface extends ethers.utils.Interface {
  functions: {
    "getLpTokenPriceUsdc(address)": FunctionFragment;
    "getLpTokenTotalLiquidityUsdc(address)": FunctionFragment;
    "getNormalizedValueUsdc(address,uint256)": FunctionFragment;
    "getPriceFromRouter(address,address)": FunctionFragment;
    "getPriceFromRouterUsdc(address)": FunctionFragment;
    "getPriceUsdc(address)": FunctionFragment;
    "getRouterForLpToken(address)": FunctionFragment;
    "isLpToken(address)": FunctionFragment;
    "primaryFactoryAddress()": FunctionFragment;
    "primaryRouterAddress()": FunctionFragment;
    "secondaryFactoryAddress()": FunctionFragment;
    "secondaryRouterAddress()": FunctionFragment;
    "usdcAddress()": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLpTokenPriceUsdc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpTokenTotalLiquidityUsdc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedValueUsdc",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFromRouter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFromRouterUsdc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceUsdc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterForLpToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isLpToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "primaryFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getLpTokenPriceUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpTokenTotalLiquidityUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedValueUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFromRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFromRouterUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterForLpToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primaryFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class CalculationsSushiswap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CalculationsSushiswapInterface;

  functions: {
    getLpTokenPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLpTokenPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLpTokenTotalLiquidityUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNormalizedValueUsdc(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNormalizedValueUsdc(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFromRouter(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceFromRouter(address,address)"(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFromRouterUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceFromRouterUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRouterForLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRouterForLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    primaryFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    "primaryFactoryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    primaryRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    "primaryRouterAddress()"(overrides?: CallOverrides): Promise<[string]>;

    secondaryFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    "secondaryFactoryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    secondaryRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    "secondaryRouterAddress()"(overrides?: CallOverrides): Promise<[string]>;

    usdcAddress(overrides?: CallOverrides): Promise<[string]>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<[string]>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    "wethAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  getLpTokenPriceUsdc(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLpTokenPriceUsdc(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLpTokenTotalLiquidityUsdc(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLpTokenTotalLiquidityUsdc(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNormalizedValueUsdc(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNormalizedValueUsdc(address,uint256)"(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFromRouter(
    token0Address: string,
    token1Address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceFromRouter(address,address)"(
    token0Address: string,
    token1Address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFromRouterUsdc(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceFromRouterUsdc(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceUsdc(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceUsdc(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRouterForLpToken(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRouterForLpToken(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isLpToken(tokenAddress: string, overrides?: CallOverrides): Promise<boolean>;

  "isLpToken(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  primaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "primaryFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  primaryRouterAddress(overrides?: CallOverrides): Promise<string>;

  "primaryRouterAddress()"(overrides?: CallOverrides): Promise<string>;

  secondaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "secondaryFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  secondaryRouterAddress(overrides?: CallOverrides): Promise<string>;

  "secondaryRouterAddress()"(overrides?: CallOverrides): Promise<string>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  "usdcAddress()"(overrides?: CallOverrides): Promise<string>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getLpTokenPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLpTokenPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLpTokenTotalLiquidityUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNormalizedValueUsdc(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNormalizedValueUsdc(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouter(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceFromRouter(address,address)"(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouterUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceFromRouterUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterForLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRouterForLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    primaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "primaryFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    primaryRouterAddress(overrides?: CallOverrides): Promise<string>;

    "primaryRouterAddress()"(overrides?: CallOverrides): Promise<string>;

    secondaryFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "secondaryFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    secondaryRouterAddress(overrides?: CallOverrides): Promise<string>;

    "secondaryRouterAddress()"(overrides?: CallOverrides): Promise<string>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<string>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getLpTokenPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLpTokenPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLpTokenTotalLiquidityUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNormalizedValueUsdc(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNormalizedValueUsdc(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouter(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceFromRouter(address,address)"(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromRouterUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceFromRouterUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterForLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRouterForLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    primaryFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "primaryFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    primaryRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "primaryRouterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    secondaryFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "secondaryFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    secondaryRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "secondaryRouterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getLpTokenPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLpTokenPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpTokenTotalLiquidityUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLpTokenTotalLiquidityUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNormalizedValueUsdc(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNormalizedValueUsdc(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFromRouter(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceFromRouter(address,address)"(
      token0Address: string,
      token1Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFromRouterUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceFromRouterUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceUsdc(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceUsdc(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterForLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRouterForLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLpToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLpToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    primaryFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "primaryFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    primaryRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "primaryRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondaryFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "secondaryFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondaryRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "secondaryRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdcAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
