/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICrowdsaleInterface extends ethers.utils.Interface {
  functions: {
    "auctionSuccessful()": FunctionFragment;
    "auctionToken()": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "commitments(address)": FunctionFragment;
    "hasAdminRole(address)": FunctionFragment;
    "marketInfo()": FunctionFragment;
    "marketPrice()": FunctionFragment;
    "marketStatus()": FunctionFragment;
    "paymentCurrency()": FunctionFragment;
    "tokensClaimable(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctionSuccessful",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(functionFragment: "commitments", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensClaimable",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensClaimable",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICrowdsale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICrowdsaleInterface;

  functions: {
    auctionSuccessful(overrides?: CallOverrides): Promise<[boolean]>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<[boolean]>;

    auctionToken(overrides?: CallOverrides): Promise<[string]>;

    "auctionToken()"(overrides?: CallOverrides): Promise<[string]>;

    claimed(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimed(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    commitments(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "commitments(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasAdminRole(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    "hasAdminRole(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    "marketInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    marketPrice(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "marketPrice()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    marketStatus(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    "marketStatus()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    paymentCurrency(overrides?: CallOverrides): Promise<[string]>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    tokensClaimable(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokensClaimable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

  "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

  auctionToken(overrides?: CallOverrides): Promise<string>;

  "auctionToken()"(overrides?: CallOverrides): Promise<string>;

  claimed(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimed(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  commitments(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "commitments(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasAdminRole(user: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAdminRole(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
    }
  >;

  "marketInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
    }
  >;

  marketPrice(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  "marketPrice()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  marketStatus(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      commitmentsTotal: BigNumber;
      finalized: boolean;
      usePointList: boolean;
    }
  >;

  "marketStatus()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      commitmentsTotal: BigNumber;
      finalized: boolean;
      usePointList: boolean;
    }
  >;

  paymentCurrency(overrides?: CallOverrides): Promise<string>;

  "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

  tokensClaimable(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokensClaimable(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

    auctionToken(overrides?: CallOverrides): Promise<string>;

    "auctionToken()"(overrides?: CallOverrides): Promise<string>;

    claimed(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitments(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "commitments(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAdminRole(user: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAdminRole(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    "marketInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    marketPrice(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "marketPrice()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    marketStatus(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    "marketStatus()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
      }
    >;

    paymentCurrency(overrides?: CallOverrides): Promise<string>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

    tokensClaimable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensClaimable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    auctionSuccessful(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionToken(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimed(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitments(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "commitments(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAdminRole(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasAdminRole(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "marketInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "marketPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "marketStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensClaimable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensClaimable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionSuccessful(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionSuccessful()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimed(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitments(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "commitments(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAdminRole(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAdminRole(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentCurrency()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensClaimable(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensClaimable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
