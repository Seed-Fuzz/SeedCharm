/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IFarmInterface extends ethers.utils.Interface {
  functions: {
    "bonusMultiplier()": FunctionFragment;
    "pendingRewards(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "rewards()": FunctionFragment;
    "rewardsPerBlock()": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {};
}

export class IFarm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IFarmInterface;

  functions: {
    bonusMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    "rewards()"(overrides?: CallOverrides): Promise<[string]>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  pendingRewards(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingRewards(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardsPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardsPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "userInfo(uint256,address)"(
    pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bonusMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
