/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMasterChefInterface extends ethers.utils.Interface {
  functions: {
    "addToken(uint256,address,bool)": FunctionFragment;
    "initFarm(address,uint256,uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToken",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initFarm",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initFarm", data: BytesLike): Result;

  events: {};
}

export class IMasterChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMasterChefInterface;

  functions: {
    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initFarm(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addToken(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addToken(uint256,address,bool)"(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initFarm(
    _rewards: string,
    _rewardsPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _devaddr: string,
    _accessControls: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initFarm(address,uint256,uint256,address,address)"(
    _rewards: string,
    _rewardsPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _devaddr: string,
    _accessControls: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initFarm(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initFarm(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initFarm(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
