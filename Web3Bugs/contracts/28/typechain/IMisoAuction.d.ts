/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMisoAuctionInterface extends ethers.utils.Interface {
  functions: {
    "auctionSuccessful()": FunctionFragment;
    "auctionToken()": FunctionFragment;
    "finalize()": FunctionFragment;
    "finalized()": FunctionFragment;
    "getTotalTokens()": FunctionFragment;
    "initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)": FunctionFragment;
    "paymentCurrency()": FunctionFragment;
    "tokenPrice()": FunctionFragment;
    "wallet()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctionSuccessful",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initAuction",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;

  events: {};
}

export class IMisoAuction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMisoAuctionInterface;

  functions: {
    auctionSuccessful(overrides?: CallOverrides): Promise<[boolean]>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<[boolean]>;

    auctionToken(overrides?: CallOverrides): Promise<[string]>;

    "auctionToken()"(overrides?: CallOverrides): Promise<[string]>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

    finalized(overrides?: CallOverrides): Promise<[boolean]>;

    "finalized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getTotalTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initAuction(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    paymentCurrency(overrides?: CallOverrides): Promise<[string]>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    wallet(overrides?: CallOverrides): Promise<[string]>;

    "wallet()"(overrides?: CallOverrides): Promise<[string]>;
  };

  auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

  "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

  auctionToken(overrides?: CallOverrides): Promise<string>;

  "auctionToken()"(overrides?: CallOverrides): Promise<string>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

  finalized(overrides?: CallOverrides): Promise<boolean>;

  "finalized()"(overrides?: CallOverrides): Promise<boolean>;

  getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  initAuction(
    _funder: string,
    _token: string,
    _tokenSupply: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _paymentCurrency: string,
    _startPrice: BigNumberish,
    _minimumPrice: BigNumberish,
    _operator: string,
    _pointList: string,
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)"(
    _funder: string,
    _token: string,
    _tokenSupply: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _paymentCurrency: string,
    _startPrice: BigNumberish,
    _minimumPrice: BigNumberish,
    _operator: string,
    _pointList: string,
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  paymentCurrency(overrides?: CallOverrides): Promise<string>;

  "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  wallet(overrides?: CallOverrides): Promise<string>;

  "wallet()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

    auctionToken(overrides?: CallOverrides): Promise<string>;

    "auctionToken()"(overrides?: CallOverrides): Promise<string>;

    finalize(overrides?: CallOverrides): Promise<void>;

    "finalize()"(overrides?: CallOverrides): Promise<void>;

    finalized(overrides?: CallOverrides): Promise<boolean>;

    "finalized()"(overrides?: CallOverrides): Promise<boolean>;

    getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    initAuction(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    paymentCurrency(overrides?: CallOverrides): Promise<string>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<string>;

    "wallet()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    auctionSuccessful(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionToken(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(overrides?: Overrides): Promise<BigNumber>;

    "finalize()"(overrides?: Overrides): Promise<BigNumber>;

    finalized(overrides?: CallOverrides): Promise<BigNumber>;

    "finalized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    initAuction(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    paymentCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionSuccessful(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionSuccessful()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    finalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finalized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initAuction(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)"(
      _funder: string,
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _operator: string,
      _pointList: string,
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    paymentCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentCurrency()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
