/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMisoMarketFactoryInterface extends ethers.utils.Interface {
  functions: {
    "auctions(uint256)": FunctionFragment;
    "getMarketTemplateId(address)": FunctionFragment;
    "getMarkets()": FunctionFragment;
    "numberOfAuctions()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTemplateId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfAuctions",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfAuctions",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMisoMarketFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMisoMarketFactoryInterface;

  functions: {
    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    "getMarkets()"(overrides?: CallOverrides): Promise<[string[]]>;

    numberOfAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "auctions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketTemplateId(
    _auction: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMarketTemplateId(address)"(
    _auction: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarkets(overrides?: CallOverrides): Promise<string[]>;

  "getMarkets()"(overrides?: CallOverrides): Promise<string[]>;

  numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(overrides?: CallOverrides): Promise<string[]>;

    "getMarkets()"(overrides?: CallOverrides): Promise<string[]>;

    numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarkets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfAuctions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
