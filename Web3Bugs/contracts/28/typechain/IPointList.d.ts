/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPointListInterface extends ethers.utils.Interface {
  functions: {
    "hasPoints(address,uint256)": FunctionFragment;
    "initPointList(address)": FunctionFragment;
    "isInList(address)": FunctionFragment;
    "setPoints(address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasPoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initPointList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isInList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPoints",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "hasPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initPointList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPoints", data: BytesLike): Result;

  events: {};
}

export class IPointList extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPointListInterface;

  functions: {
    hasPoints(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPoints(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initPointList(
      accessControl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initPointList(address)"(
      accessControl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isInList(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isInList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setPoints(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoints(address[],uint256[])"(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  hasPoints(
    account: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPoints(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initPointList(
    accessControl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initPointList(address)"(
    accessControl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isInList(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isInList(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setPoints(
    accounts: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoints(address[],uint256[])"(
    accounts: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    hasPoints(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPoints(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initPointList(
      accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initPointList(address)"(
      accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInList(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isInList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPoints(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoints(address[],uint256[])"(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    hasPoints(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPoints(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initPointList(
      accessControl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initPointList(address)"(
      accessControl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isInList(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isInList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPoints(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoints(address[],uint256[])"(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasPoints(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPoints(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initPointList(
      accessControl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initPointList(address)"(
      accessControl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isInList(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPoints(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoints(address[],uint256[])"(
      accounts: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
