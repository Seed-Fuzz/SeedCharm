/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IWhiteListInterface extends ethers.utils.Interface {
  functions: {
    "addWhiteList(address[])": FunctionFragment;
    "initWhiteList(address)": FunctionFragment;
    "isInWhiteList(address)": FunctionFragment;
    "removeWhiteList(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addWhiteList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhiteList",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhiteList",
    data: BytesLike
  ): Result;

  events: {};
}

export class IWhiteList extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IWhiteListInterface;

  functions: {
    addWhiteList(
      accounts: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addWhiteList(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initWhiteList(
      accessControl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initWhiteList(address)"(
      accessControl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isInWhiteList(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isInWhiteList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeWhiteList(
      accounts: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeWhiteList(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addWhiteList(
    accounts: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addWhiteList(address[])"(
    accounts: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initWhiteList(
    accessControl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initWhiteList(address)"(
    accessControl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isInWhiteList(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isInWhiteList(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeWhiteList(
    accounts: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeWhiteList(address[])"(
    accounts: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhiteList(accounts: string[], overrides?: CallOverrides): Promise<void>;

    "addWhiteList(address[])"(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    initWhiteList(
      accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initWhiteList(address)"(
      accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInWhiteList(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isInWhiteList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeWhiteList(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWhiteList(address[])"(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addWhiteList(accounts: string[], overrides?: Overrides): Promise<BigNumber>;

    "addWhiteList(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    initWhiteList(
      accessControl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initWhiteList(address)"(
      accessControl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isInWhiteList(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInWhiteList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeWhiteList(
      accounts: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeWhiteList(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhiteList(
      accounts: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addWhiteList(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initWhiteList(
      accessControl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initWhiteList(address)"(
      accessControl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isInWhiteList(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInWhiteList(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeWhiteList(
      accounts: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeWhiteList(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
