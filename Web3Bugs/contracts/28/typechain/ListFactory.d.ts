/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ListFactoryInterface extends ethers.utils.Interface {
  functions: {
    "accessControls()": FunctionFragment;
    "deployPointList(address,address[],uint256[])": FunctionFragment;
    "deprecateFactory(address)": FunctionFragment;
    "initListFactory(address,address,uint256)": FunctionFragment;
    "isChild(address)": FunctionFragment;
    "lists(uint256)": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "misoDiv()": FunctionFragment;
    "newAddress()": FunctionFragment;
    "numberOfChildren()": FunctionFragment;
    "pointListTemplate()": FunctionFragment;
    "setDividends(address)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
    "transferAnyERC20Token(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployPointList",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initListFactory",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isChild", values: [string]): string;
  encodeFunctionData(functionFragment: "lists", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "misoDiv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfChildren",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointListTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAnyERC20Token",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPointList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initListFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "misoDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointListTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAnyERC20Token",
    data: BytesLike
  ): Result;

  events: {
    "FactoryDeprecated(address)": EventFragment;
    "MinimumFeeUpdated(uint256,uint256)": EventFragment;
    "MisoInitListFactory()": EventFragment;
    "PointListDeployed(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FactoryDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MisoInitListFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointListDeployed"): EventFragment;
}

export class ListFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ListFactoryInterface;

  functions: {
    accessControls(overrides?: CallOverrides): Promise<[string]>;

    "accessControls()"(overrides?: CallOverrides): Promise<[string]>;

    deployPointList(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployPointList(address,address[],uint256[])"(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deprecateFactory(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initListFactory(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initListFactory(address,address,uint256)"(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isChild(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lists(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "lists(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    misoDiv(overrides?: CallOverrides): Promise<[string]>;

    "misoDiv()"(overrides?: CallOverrides): Promise<[string]>;

    newAddress(overrides?: CallOverrides): Promise<[string]>;

    "newAddress()"(overrides?: CallOverrides): Promise<[string]>;

    numberOfChildren(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfChildren()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pointListTemplate(overrides?: CallOverrides): Promise<[string]>;

    "pointListTemplate()"(overrides?: CallOverrides): Promise<[string]>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferAnyERC20Token(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAnyERC20Token(address,uint256)"(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accessControls(overrides?: CallOverrides): Promise<string>;

  "accessControls()"(overrides?: CallOverrides): Promise<string>;

  deployPointList(
    _listOwner: string,
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployPointList(address,address[],uint256[])"(
    _listOwner: string,
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deprecateFactory(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deprecateFactory(address)"(
    _newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initListFactory(
    _accessControls: string,
    _pointListTemplate: string,
    _minimumFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initListFactory(address,address,uint256)"(
    _accessControls: string,
    _pointListTemplate: string,
    _minimumFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isChild(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isChild(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lists(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "lists(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  misoDiv(overrides?: CallOverrides): Promise<string>;

  "misoDiv()"(overrides?: CallOverrides): Promise<string>;

  newAddress(overrides?: CallOverrides): Promise<string>;

  "newAddress()"(overrides?: CallOverrides): Promise<string>;

  numberOfChildren(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

  pointListTemplate(overrides?: CallOverrides): Promise<string>;

  "pointListTemplate()"(overrides?: CallOverrides): Promise<string>;

  setDividends(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDividends(address)"(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _minimumFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _minimumFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferAnyERC20Token(
    _tokenAddress: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAnyERC20Token(address,uint256)"(
    _tokenAddress: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accessControls(overrides?: CallOverrides): Promise<string>;

    "accessControls()"(overrides?: CallOverrides): Promise<string>;

    deployPointList(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "deployPointList(address,address[],uint256[])"(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    deprecateFactory(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initListFactory(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initListFactory(address,address,uint256)"(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isChild(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lists(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "lists(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<string>;

    "misoDiv()"(overrides?: CallOverrides): Promise<string>;

    newAddress(overrides?: CallOverrides): Promise<string>;

    "newAddress()"(overrides?: CallOverrides): Promise<string>;

    numberOfChildren(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

    pointListTemplate(overrides?: CallOverrides): Promise<string>;

    "pointListTemplate()"(overrides?: CallOverrides): Promise<string>;

    setDividends(_divaddr: string, overrides?: CallOverrides): Promise<void>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAnyERC20Token(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferAnyERC20Token(address,uint256)"(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    FactoryDeprecated(newAddress: null): EventFilter;

    MinimumFeeUpdated(oldFee: null, newFee: null): EventFilter;

    MisoInitListFactory(): EventFilter;

    PointListDeployed(
      operator: string | null,
      addr: string | null,
      pointList: null,
      owner: null
    ): EventFilter;
  };

  estimateGas: {
    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControls()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployPointList(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployPointList(address,address[],uint256[])"(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deprecateFactory(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initListFactory(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initListFactory(address,address,uint256)"(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isChild(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lists(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "lists(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<BigNumber>;

    "misoDiv()"(overrides?: CallOverrides): Promise<BigNumber>;

    newAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "newAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfChildren(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

    pointListTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "pointListTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDividends(_divaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferAnyERC20Token(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAnyERC20Token(address,uint256)"(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployPointList(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployPointList(address,address[],uint256[])"(
      _listOwner: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deprecateFactory(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initListFactory(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initListFactory(address,address,uint256)"(
      _accessControls: string,
      _pointListTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isChild(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lists(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    misoDiv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "misoDiv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfChildren(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfChildren()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pointListTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pointListTemplate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferAnyERC20Token(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAnyERC20Token(address,uint256)"(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
