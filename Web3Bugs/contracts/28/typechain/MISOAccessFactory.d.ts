/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MISOAccessFactoryInterface extends ethers.utils.Interface {
  functions: {
    "accessControlTemplate()": FunctionFragment;
    "accessControls()": FunctionFragment;
    "children(uint256)": FunctionFragment;
    "deployAccessControl(address)": FunctionFragment;
    "devaddr()": FunctionFragment;
    "initMISOAccessFactory(uint256,address)": FunctionFragment;
    "isChild(address)": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "numberOfChildren()": FunctionFragment;
    "setDev(address)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
    "updateAccessTemplate(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessControlTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "children",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAccessControl",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "devaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initMISOAccessFactory",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "isChild", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfChildren",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDev", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccessTemplate",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessControlTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "children", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initMISOAccessFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccessTemplate",
    data: BytesLike
  ): Result;

  events: {
    "AccessControlCreated(address,address,address,address)": EventFragment;
    "AccessControlTemplateAdded(address,address)": EventFragment;
    "AccessControlTemplateRemoved(address,uint256)": EventFragment;
    "DevAddressUpdated(address,address)": EventFragment;
    "MinimumFeeUpdated(uint256,uint256)": EventFragment;
    "MisoInitAccessFactory(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccessControlCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccessControlTemplateAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AccessControlTemplateRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MisoInitAccessFactory"): EventFragment;
}

export class MISOAccessFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MISOAccessFactoryInterface;

  functions: {
    accessControlTemplate(overrides?: CallOverrides): Promise<[string]>;

    "accessControlTemplate()"(overrides?: CallOverrides): Promise<[string]>;

    accessControls(overrides?: CallOverrides): Promise<[string]>;

    "accessControls()"(overrides?: CallOverrides): Promise<[string]>;

    children(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "children(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployAccessControl(
      _admin: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployAccessControl(address)"(
      _admin: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    devaddr(overrides?: CallOverrides): Promise<[string]>;

    "devaddr()"(overrides?: CallOverrides): Promise<[string]>;

    initMISOAccessFactory(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initMISOAccessFactory(uint256,address)"(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isChild(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfChildren(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfChildren()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDev(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAccessTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAccessTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accessControlTemplate(overrides?: CallOverrides): Promise<string>;

  "accessControlTemplate()"(overrides?: CallOverrides): Promise<string>;

  accessControls(overrides?: CallOverrides): Promise<string>;

  "accessControls()"(overrides?: CallOverrides): Promise<string>;

  children(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "children(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deployAccessControl(
    _admin: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployAccessControl(address)"(
    _admin: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  devaddr(overrides?: CallOverrides): Promise<string>;

  "devaddr()"(overrides?: CallOverrides): Promise<string>;

  initMISOAccessFactory(
    _minimumFee: BigNumberish,
    _accessControls: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initMISOAccessFactory(uint256,address)"(
    _minimumFee: BigNumberish,
    _accessControls: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isChild(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isChild(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfChildren(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

  setDev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setDev(address)"(
    _devaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _minimumFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _minimumFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAccessTemplate(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAccessTemplate(address)"(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accessControlTemplate(overrides?: CallOverrides): Promise<string>;

    "accessControlTemplate()"(overrides?: CallOverrides): Promise<string>;

    accessControls(overrides?: CallOverrides): Promise<string>;

    "accessControls()"(overrides?: CallOverrides): Promise<string>;

    children(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "children(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployAccessControl(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployAccessControl(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<string>;

    devaddr(overrides?: CallOverrides): Promise<string>;

    "devaddr()"(overrides?: CallOverrides): Promise<string>;

    initMISOAccessFactory(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initMISOAccessFactory(uint256,address)"(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isChild(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfChildren(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDev(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAccessTemplate(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAccessTemplate(address)"(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccessControlCreated(
      owner: string | null,
      accessControls: null,
      admin: null,
      accessTemplate: null
    ): EventFilter;

    AccessControlTemplateAdded(
      oldAccessControl: null,
      newAccessControl: null
    ): EventFilter;

    AccessControlTemplateRemoved(access: null, templateId: null): EventFilter;

    DevAddressUpdated(oldDev: null, newDev: null): EventFilter;

    MinimumFeeUpdated(oldFee: null, newFee: null): EventFilter;

    MisoInitAccessFactory(sender: null): EventFilter;
  };

  estimateGas: {
    accessControlTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControlTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControls()"(overrides?: CallOverrides): Promise<BigNumber>;

    children(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "children(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployAccessControl(
      _admin: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployAccessControl(address)"(
      _admin: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    initMISOAccessFactory(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initMISOAccessFactory(uint256,address)"(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isChild(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfChildren(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDev(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAccessTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAccessTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessControlTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accessControlTemplate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    children(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "children(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployAccessControl(
      _admin: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployAccessControl(address)"(
      _admin: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    devaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initMISOAccessFactory(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initMISOAccessFactory(uint256,address)"(
      _minimumFee: BigNumberish,
      _accessControls: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isChild(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isChild(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfChildren(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfChildren()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDev(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAccessTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAccessTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
