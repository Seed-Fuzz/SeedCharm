/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MISOFarmFactoryInterface extends ethers.utils.Interface {
  functions: {
    "FARM_MINTER_ROLE()": FunctionFragment;
    "accessControls()": FunctionFragment;
    "addFarmTemplate(address)": FunctionFragment;
    "createFarm(uint256,address,bytes)": FunctionFragment;
    "currentTemplateId(uint256)": FunctionFragment;
    "deployFarm(uint256,address)": FunctionFragment;
    "farmInfo(address)": FunctionFragment;
    "farmTemplateId()": FunctionFragment;
    "farms(uint256)": FunctionFragment;
    "getFarmTemplate(uint256)": FunctionFragment;
    "getFarms()": FunctionFragment;
    "getTemplateId(address)": FunctionFragment;
    "hasFarmMinterRole(address)": FunctionFragment;
    "initMISOFarmFactory(address,address,uint256,uint256)": FunctionFragment;
    "integratorFeePct()": FunctionFragment;
    "locked()": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "misoDiv()": FunctionFragment;
    "numberOfFarms()": FunctionFragment;
    "removeFarmTemplate(uint256)": FunctionFragment;
    "setCurrentTemplateId(uint256,uint256)": FunctionFragment;
    "setDividends(address)": FunctionFragment;
    "setIntegratorFeePct(uint256)": FunctionFragment;
    "setLocked(bool)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FARM_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFarmTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createFarm",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTemplateId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployFarm",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "farmInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "farmTemplateId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "farms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getFarmTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFarms", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTemplateId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasFarmMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initMISOFarmFactory",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integratorFeePct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "misoDiv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfFarms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFarmTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTemplateId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntegratorFeePct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setLocked", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FARM_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFarmTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFarmTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFarms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasFarmMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initMISOFarmFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integratorFeePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "misoDiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfFarms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFarmTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntegratorFeePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;

  events: {
    "FarmCreated(address,address,address)": EventFragment;
    "FarmTemplateAdded(address,uint256)": EventFragment;
    "FarmTemplateRemoved(address,uint256)": EventFragment;
    "MisoInitFarmFactory(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FarmCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmTemplateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmTemplateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MisoInitFarmFactory"): EventFragment;
}

export class MISOFarmFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MISOFarmFactoryInterface;

  functions: {
    FARM_MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "FARM_MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    accessControls(overrides?: CallOverrides): Promise<[string]>;

    "accessControls()"(overrides?: CallOverrides): Promise<[string]>;

    addFarmTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFarmTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createFarm(uint256,address,bytes)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployFarm(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    farmInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    "farmInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    farmTemplateId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "farmTemplateId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    farms(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFarmTemplate(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getFarmTemplate(uint256)"(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFarms(overrides?: CallOverrides): Promise<[string[]]>;

    "getFarms()"(overrides?: CallOverrides): Promise<[string[]]>;

    getTemplateId(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTemplateId(address)"(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasFarmMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasFarmMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initMISOFarmFactory(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initMISOFarmFactory(address,address,uint256,uint256)"(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    integratorFeePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    "integratorFeePct()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    "locked()"(overrides?: CallOverrides): Promise<[boolean]>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    misoDiv(overrides?: CallOverrides): Promise<[string]>;

    "misoDiv()"(overrides?: CallOverrides): Promise<[string]>;

    numberOfFarms(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfFarms()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFarmTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFarmTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLocked(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FARM_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "FARM_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  accessControls(overrides?: CallOverrides): Promise<string>;

  "accessControls()"(overrides?: CallOverrides): Promise<string>;

  addFarmTemplate(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFarmTemplate(address)"(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createFarm(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createFarm(uint256,address,bytes)"(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  currentTemplateId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentTemplateId(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployFarm(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployFarm(uint256,address)"(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  farmInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      templateId: BigNumber;
      index: BigNumber;
    }
  >;

  "farmInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      templateId: BigNumber;
      index: BigNumber;
    }
  >;

  farmTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

  "farmTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

  farms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "farms(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFarmTemplate(
    _farmTemplate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getFarmTemplate(uint256)"(
    _farmTemplate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFarms(overrides?: CallOverrides): Promise<string[]>;

  "getFarms()"(overrides?: CallOverrides): Promise<string[]>;

  getTemplateId(
    _farmTemplate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTemplateId(address)"(
    _farmTemplate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasFarmMinterRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasFarmMinterRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initMISOFarmFactory(
    _accessControls: string,
    _misoDiv: string,
    _minimumFee: BigNumberish,
    _integratorFeePct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initMISOFarmFactory(address,address,uint256,uint256)"(
    _accessControls: string,
    _misoDiv: string,
    _minimumFee: BigNumberish,
    _integratorFeePct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  integratorFeePct(overrides?: CallOverrides): Promise<BigNumber>;

  "integratorFeePct()"(overrides?: CallOverrides): Promise<BigNumber>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  "locked()"(overrides?: CallOverrides): Promise<boolean>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  misoDiv(overrides?: CallOverrides): Promise<string>;

  "misoDiv()"(overrides?: CallOverrides): Promise<string>;

  numberOfFarms(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfFarms()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeFarmTemplate(
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFarmTemplate(uint256)"(
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCurrentTemplateId(
    _templateType: BigNumberish,
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurrentTemplateId(uint256,uint256)"(
    _templateType: BigNumberish,
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDividends(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDividends(address)"(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIntegratorFeePct(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIntegratorFeePct(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLocked(
    _locked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLocked(bool)"(
    _locked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FARM_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "FARM_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    accessControls(overrides?: CallOverrides): Promise<string>;

    "accessControls()"(overrides?: CallOverrides): Promise<string>;

    addFarmTemplate(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addFarmTemplate(address)"(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "createFarm(uint256,address,bytes)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployFarm(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    farmInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    "farmInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    farmTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    "farmTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

    farms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFarmTemplate(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getFarmTemplate(uint256)"(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFarms(overrides?: CallOverrides): Promise<string[]>;

    "getFarms()"(overrides?: CallOverrides): Promise<string[]>;

    getTemplateId(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTemplateId(address)"(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasFarmMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasFarmMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initMISOFarmFactory(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initMISOFarmFactory(address,address,uint256,uint256)"(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    integratorFeePct(overrides?: CallOverrides): Promise<BigNumber>;

    "integratorFeePct()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    "locked()"(overrides?: CallOverrides): Promise<boolean>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<string>;

    "misoDiv()"(overrides?: CallOverrides): Promise<string>;

    numberOfFarms(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfFarms()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFarmTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFarmTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDividends(_divaddr: string, overrides?: CallOverrides): Promise<void>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLocked(_locked: boolean, overrides?: CallOverrides): Promise<void>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FarmCreated(
      owner: string | null,
      addr: string | null,
      farmTemplate: null
    ): EventFilter;

    FarmTemplateAdded(newFarm: null, templateId: null): EventFilter;

    FarmTemplateRemoved(farm: null, templateId: null): EventFilter;

    MisoInitFarmFactory(sender: null): EventFilter;
  };

  estimateGas: {
    FARM_MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "FARM_MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControls()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFarmTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addFarmTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createFarm(uint256,address,bytes)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployFarm(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    farmInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "farmInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    "farmTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

    farms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFarmTemplate(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFarmTemplate(uint256)"(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFarms(overrides?: CallOverrides): Promise<BigNumber>;

    "getFarms()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTemplateId(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTemplateId(address)"(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasFarmMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasFarmMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initMISOFarmFactory(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initMISOFarmFactory(address,address,uint256,uint256)"(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    integratorFeePct(overrides?: CallOverrides): Promise<BigNumber>;

    "integratorFeePct()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<BigNumber>;

    "misoDiv()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfFarms(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfFarms()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFarmTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeFarmTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDividends(_divaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLocked(_locked: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FARM_MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FARM_MINTER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFarmTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFarmTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createFarm(uint256,address,bytes)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployFarm(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployFarm(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    farmInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farmInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmTemplateId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmTemplateId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFarmTemplate(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFarmTemplate(uint256)"(
      _farmTemplate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFarms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFarms()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTemplateId(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTemplateId(address)"(
      _farmTemplate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasFarmMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasFarmMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initMISOFarmFactory(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initMISOFarmFactory(address,address,uint256,uint256)"(
      _accessControls: string,
      _misoDiv: string,
      _minimumFee: BigNumberish,
      _integratorFeePct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    integratorFeePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "integratorFeePct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "locked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    misoDiv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "misoDiv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfFarms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfFarms()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFarmTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFarmTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLocked(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
