/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MISOHelperInterface extends ethers.utils.Interface {
  functions: {
    "accessControls()": FunctionFragment;
    "allowance(address,address,address)": FunctionFragment;
    "farmFactory()": FunctionFragment;
    "getBatchAuctionInfo(address)": FunctionFragment;
    "getCrowdsaleInfo(address)": FunctionFragment;
    "getDocuments(address)": FunctionFragment;
    "getDutchAuctionInfo(address)": FunctionFragment;
    "getFarmDetail(address,address)": FunctionFragment;
    "getFarms(uint256,uint256,uint256)": FunctionFragment;
    "getHyperbolicAuctionInfo(address)": FunctionFragment;
    "getMarkets(uint256,uint256,uint256)": FunctionFragment;
    "getPools(address)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getTokens(uint256,uint256)": FunctionFragment;
    "getTokensInfo(address[])": FunctionFragment;
    "getUserMarketInfo(address,address)": FunctionFragment;
    "getUserPoolsInfos(address)": FunctionFragment;
    "launcher()": FunctionFragment;
    "market()": FunctionFragment;
    "setContracts(address,address,address,address)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "farmFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchAuctionInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrowdsaleInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocuments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDutchAuctionInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFarmDetail",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFarms",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHyperbolicAuctionInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensInfo",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMarketInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPoolsInfos",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "launcher", values?: undefined): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrowdsaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDutchAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFarmDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFarms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHyperbolicAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPoolsInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launcher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;

  events: {};
}

export class MISOHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MISOHelperInterface;

  functions: {
    accessControls(overrides?: CallOverrides): Promise<[string]>;

    "accessControls()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address,address)"(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    farmFactory(overrides?: CallOverrides): Promise<[string]>;

    "farmFactory()"(overrides?: CallOverrides): Promise<[string]>;

    getBatchAuctionInfo(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          startTime: BigNumber;
          endTime: BigNumber;
          totalTokens: BigNumber;
          commitmentsTotal: BigNumber;
          minimumCommitmentAmount: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    "getBatchAuctionInfo(address)"(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          startTime: BigNumber;
          endTime: BigNumber;
          totalTokens: BigNumber;
          commitmentsTotal: BigNumber;
          minimumCommitmentAmount: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    getCrowdsaleInfo(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          commitmentsTotal: BigNumber;
          totalTokens: BigNumber;
          rate: BigNumber;
          goal: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    "getCrowdsaleInfo(address)"(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          commitmentsTotal: BigNumber;
          totalTokens: BigNumber;
          rate: BigNumber;
          goal: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    getDocuments(
      _document: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ]
    >;

    "getDocuments(address)"(
      _document: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ]
    >;

    getDutchAuctionInfo(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          startTime: BigNumber;
          endTime: BigNumber;
          totalTokens: BigNumber;
          startPrice: BigNumber;
          minimumPrice: BigNumber;
          commitmentsTotal: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    "getDutchAuctionInfo(address)"(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          startTime: BigNumber;
          endTime: BigNumber;
          totalTokens: BigNumber;
          startPrice: BigNumber;
          minimumPrice: BigNumber;
          commitmentsTotal: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    getFarmDetail(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[]
      ] & {
        farmInfo: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        };
        userInfos: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[];
      }
    >;

    "getFarmDetail(address,address)"(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[]
      ] & {
        farmInfo: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        };
        userInfos: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[];
      }
    >;

    "getFarms(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        })[]
      ]
    >;

    "getFarms()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        })[]
      ]
    >;

    "getFarms(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        })[]
      ]
    >;

    getHyperbolicAuctionInfo(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          startTime: BigNumber;
          endTime: BigNumber;
          totalTokens: BigNumber;
          minimumPrice: BigNumber;
          alpha: BigNumber;
          commitmentsTotal: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    "getHyperbolicAuctionInfo(address)"(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[]
        ] & {
          addr: string;
          paymentCurrency: string;
          startTime: BigNumber;
          endTime: BigNumber;
          totalTokens: BigNumber;
          minimumPrice: BigNumber;
          alpha: BigNumber;
          commitmentsTotal: BigNumber;
          finalized: boolean;
          usePointList: boolean;
          auctionSuccessful: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          paymentCurrencyInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          documents: ([string, string, BigNumber] & {
            name: string;
            data: string;
            lastModified: BigNumber;
          })[];
        }
      ]
    >;

    "getMarkets(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          addr: string;
          templateId: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          finalized: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ]
    >;

    "getMarkets(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          addr: string;
          templateId: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          finalized: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ]
    >;

    "getMarkets()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          addr: string;
          templateId: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          finalized: boolean;
          tokenInfo: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ]
    >;

    getPools(
      _farm: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ]
    >;

    "getPools(address)"(
      _farm: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ]
    >;

    getTokenInfo(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ]
    >;

    "getTokenInfo(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ]
    >;

    "getTokens(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        })[]
      ]
    >;

    "getTokens(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        })[]
      ]
    >;

    "getTokens()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        })[]
      ]
    >;

    getTokensInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        })[]
      ]
    >;

    "getTokensInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        })[]
      ]
    >;

    getUserMarketInfo(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean] & {
          commitments: BigNumber;
          tokensClaimable: BigNumber;
          claimed: BigNumber;
          isAdmin: boolean;
        }
      ] & {
        userInfo: [BigNumber, BigNumber, BigNumber, boolean] & {
          commitments: BigNumber;
          tokensClaimable: BigNumber;
          claimed: BigNumber;
          isAdmin: boolean;
        };
      }
    >;

    "getUserMarketInfo(address,address)"(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean] & {
          commitments: BigNumber;
          tokensClaimable: BigNumber;
          claimed: BigNumber;
          isAdmin: boolean;
        }
      ] & {
        userInfo: [BigNumber, BigNumber, BigNumber, boolean] & {
          commitments: BigNumber;
          tokensClaimable: BigNumber;
          claimed: BigNumber;
          isAdmin: boolean;
        };
      }
    >;

    getUserPoolsInfos(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber[], BigNumber[], BigNumber[]] & {
          farm: string;
          pids: BigNumber[];
          totalStaked: BigNumber[];
          pendingRewards: BigNumber[];
        })[]
      ]
    >;

    "getUserPoolsInfos(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber[], BigNumber[], BigNumber[]] & {
          farm: string;
          pids: BigNumber[];
          totalStaked: BigNumber[];
          pendingRewards: BigNumber[];
        })[]
      ]
    >;

    launcher(overrides?: CallOverrides): Promise<[string]>;

    "launcher()"(overrides?: CallOverrides): Promise<[string]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    "market()"(overrides?: CallOverrides): Promise<[string]>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<[string]>;
  };

  accessControls(overrides?: CallOverrides): Promise<string>;

  "accessControls()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    _token: string,
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address,address)"(
    _token: string,
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  farmFactory(overrides?: CallOverrides): Promise<string>;

  "farmFactory()"(overrides?: CallOverrides): Promise<string>;

  getBatchAuctionInfo(
    _batchAuction: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
      commitmentsTotal: BigNumber;
      minimumCommitmentAmount: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  "getBatchAuctionInfo(address)"(
    _batchAuction: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
      commitmentsTotal: BigNumber;
      minimumCommitmentAmount: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  getCrowdsaleInfo(
    _crowdsale: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      commitmentsTotal: BigNumber;
      totalTokens: BigNumber;
      rate: BigNumber;
      goal: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  "getCrowdsaleInfo(address)"(
    _crowdsale: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      commitmentsTotal: BigNumber;
      totalTokens: BigNumber;
      rate: BigNumber;
      goal: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  getDocuments(
    _document: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber] & {
      name: string;
      data: string;
      lastModified: BigNumber;
    })[]
  >;

  "getDocuments(address)"(
    _document: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber] & {
      name: string;
      data: string;
      lastModified: BigNumber;
    })[]
  >;

  getDutchAuctionInfo(
    _dutchAuction: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
      startPrice: BigNumber;
      minimumPrice: BigNumber;
      commitmentsTotal: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  "getDutchAuctionInfo(address)"(
    _dutchAuction: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
      startPrice: BigNumber;
      minimumPrice: BigNumber;
      commitmentsTotal: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  getFarmDetail(
    _farm: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ] & {
        addr: string;
        templateId: BigNumber;
        rewardsPerBlock: BigNumber;
        bonusMultiplier: BigNumber;
        rewardToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        pools: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[];
      },
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        farm: string;
        pid: BigNumber;
        totalStaked: BigNumber;
        lpBalance: BigNumber;
        lpAllowance: BigNumber;
        rewardDebt: BigNumber;
        pendingRewards: BigNumber;
      })[]
    ] & {
      farmInfo: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ] & {
        addr: string;
        templateId: BigNumber;
        rewardsPerBlock: BigNumber;
        bonusMultiplier: BigNumber;
        rewardToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        pools: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[];
      };
      userInfos: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        farm: string;
        pid: BigNumber;
        totalStaked: BigNumber;
        lpBalance: BigNumber;
        lpAllowance: BigNumber;
        rewardDebt: BigNumber;
        pendingRewards: BigNumber;
      })[];
    }
  >;

  "getFarmDetail(address,address)"(
    _farm: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ] & {
        addr: string;
        templateId: BigNumber;
        rewardsPerBlock: BigNumber;
        bonusMultiplier: BigNumber;
        rewardToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        pools: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[];
      },
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        farm: string;
        pid: BigNumber;
        totalStaked: BigNumber;
        lpBalance: BigNumber;
        lpAllowance: BigNumber;
        rewardDebt: BigNumber;
        pendingRewards: BigNumber;
      })[]
    ] & {
      farmInfo: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ] & {
        addr: string;
        templateId: BigNumber;
        rewardsPerBlock: BigNumber;
        bonusMultiplier: BigNumber;
        rewardToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        pools: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[];
      };
      userInfos: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        farm: string;
        pid: BigNumber;
        totalStaked: BigNumber;
        lpBalance: BigNumber;
        lpAllowance: BigNumber;
        rewardDebt: BigNumber;
        pendingRewards: BigNumber;
      })[];
    }
  >;

  "getFarms(uint256,uint256,uint256)"(
    pageSize: BigNumberish,
    pageNbr: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    ] & {
      addr: string;
      templateId: BigNumber;
      rewardsPerBlock: BigNumber;
      bonusMultiplier: BigNumber;
      rewardToken: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      pools: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[];
    })[]
  >;

  "getFarms()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    ] & {
      addr: string;
      templateId: BigNumber;
      rewardsPerBlock: BigNumber;
      bonusMultiplier: BigNumber;
      rewardToken: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      pools: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[];
    })[]
  >;

  "getFarms(uint256,uint256)"(
    pageSize: BigNumberish,
    pageNbr: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    ] & {
      addr: string;
      templateId: BigNumber;
      rewardsPerBlock: BigNumber;
      bonusMultiplier: BigNumber;
      rewardToken: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      pools: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[];
    })[]
  >;

  getHyperbolicAuctionInfo(
    _hyperbolicAuction: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
      minimumPrice: BigNumber;
      alpha: BigNumber;
      commitmentsTotal: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  "getHyperbolicAuctionInfo(address)"(
    _hyperbolicAuction: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      },
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    ] & {
      addr: string;
      paymentCurrency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      totalTokens: BigNumber;
      minimumPrice: BigNumber;
      alpha: BigNumber;
      commitmentsTotal: BigNumber;
      finalized: boolean;
      usePointList: boolean;
      auctionSuccessful: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      paymentCurrencyInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
      documents: ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[];
    }
  >;

  "getMarkets(uint256,uint256,uint256)"(
    pageSize: BigNumberish,
    pageNbr: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      }
    ] & {
      addr: string;
      templateId: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      finalized: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
    })[]
  >;

  "getMarkets(uint256,uint256)"(
    pageSize: BigNumberish,
    pageNbr: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      }
    ] & {
      addr: string;
      templateId: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      finalized: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
    })[]
  >;

  "getMarkets()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      }
    ] & {
      addr: string;
      templateId: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      finalized: boolean;
      tokenInfo: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
    })[]
  >;

  getPools(
    _farm: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      }
    ] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardsPerShare: BigNumber;
      totalStaked: BigNumber;
      stakingToken: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
    })[]
  >;

  "getPools(address)"(
    _farm: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      }
    ] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardsPerShare: BigNumber;
      totalStaked: BigNumber;
      stakingToken: [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      };
    })[]
  >;

  getTokenInfo(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      addr: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
    }
  >;

  "getTokenInfo(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      addr: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
    }
  >;

  "getTokens(uint256,uint256)"(
    pageSize: BigNumberish,
    pageNbr: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, string] & {
      addr: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
    })[]
  >;

  "getTokens(uint256,uint256,uint256)"(
    pageSize: BigNumberish,
    pageNbr: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, string] & {
      addr: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
    })[]
  >;

  "getTokens()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, string] & {
      addr: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
    })[]
  >;

  getTokensInfo(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, string] & {
      addr: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
    })[]
  >;

  "getTokensInfo(address[])"(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, string] & {
      addr: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
    })[]
  >;

  getUserMarketInfo(
    _action: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      commitments: BigNumber;
      tokensClaimable: BigNumber;
      claimed: BigNumber;
      isAdmin: boolean;
    }
  >;

  "getUserMarketInfo(address,address)"(
    _action: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      commitments: BigNumber;
      tokensClaimable: BigNumber;
      claimed: BigNumber;
      isAdmin: boolean;
    }
  >;

  getUserPoolsInfos(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber[], BigNumber[], BigNumber[]] & {
      farm: string;
      pids: BigNumber[];
      totalStaked: BigNumber[];
      pendingRewards: BigNumber[];
    })[]
  >;

  "getUserPoolsInfos(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber[], BigNumber[], BigNumber[]] & {
      farm: string;
      pids: BigNumber[];
      totalStaked: BigNumber[];
      pendingRewards: BigNumber[];
    })[]
  >;

  launcher(overrides?: CallOverrides): Promise<string>;

  "launcher()"(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  setContracts(
    _tokenFactory: string,
    _market: string,
    _launcher: string,
    _farmFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContracts(address,address,address,address)"(
    _tokenFactory: string,
    _market: string,
    _launcher: string,
    _farmFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accessControls(overrides?: CallOverrides): Promise<string>;

    "accessControls()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address,address)"(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmFactory(overrides?: CallOverrides): Promise<string>;

    "farmFactory()"(overrides?: CallOverrides): Promise<string>;

    getBatchAuctionInfo(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
        commitmentsTotal: BigNumber;
        minimumCommitmentAmount: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    "getBatchAuctionInfo(address)"(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
        commitmentsTotal: BigNumber;
        minimumCommitmentAmount: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    getCrowdsaleInfo(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        commitmentsTotal: BigNumber;
        totalTokens: BigNumber;
        rate: BigNumber;
        goal: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    "getCrowdsaleInfo(address)"(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        commitmentsTotal: BigNumber;
        totalTokens: BigNumber;
        rate: BigNumber;
        goal: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    getDocuments(
      _document: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    >;

    "getDocuments(address)"(
      _document: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber] & {
        name: string;
        data: string;
        lastModified: BigNumber;
      })[]
    >;

    getDutchAuctionInfo(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
        startPrice: BigNumber;
        minimumPrice: BigNumber;
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    "getDutchAuctionInfo(address)"(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
        startPrice: BigNumber;
        minimumPrice: BigNumber;
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    getFarmDetail(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[]
      ] & {
        farmInfo: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        };
        userInfos: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[];
      }
    >;

    "getFarmDetail(address,address)"(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[]
      ] & {
        farmInfo: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          },
          ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[]
        ] & {
          addr: string;
          templateId: BigNumber;
          rewardsPerBlock: BigNumber;
          bonusMultiplier: BigNumber;
          rewardToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
          pools: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            }
          ] & {
            lpToken: string;
            allocPoint: BigNumber;
            lastRewardBlock: BigNumber;
            accRewardsPerShare: BigNumber;
            totalStaked: BigNumber;
            stakingToken: [string, BigNumber, string, string] & {
              addr: string;
              decimals: BigNumber;
              name: string;
              symbol: string;
            };
          })[];
        };
        userInfos: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          farm: string;
          pid: BigNumber;
          totalStaked: BigNumber;
          lpBalance: BigNumber;
          lpAllowance: BigNumber;
          rewardDebt: BigNumber;
          pendingRewards: BigNumber;
        })[];
      }
    >;

    "getFarms(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ] & {
        addr: string;
        templateId: BigNumber;
        rewardsPerBlock: BigNumber;
        bonusMultiplier: BigNumber;
        rewardToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        pools: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[];
      })[]
    >;

    "getFarms()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ] & {
        addr: string;
        templateId: BigNumber;
        rewardsPerBlock: BigNumber;
        bonusMultiplier: BigNumber;
        rewardToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        pools: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[];
      })[]
    >;

    "getFarms(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[]
      ] & {
        addr: string;
        templateId: BigNumber;
        rewardsPerBlock: BigNumber;
        bonusMultiplier: BigNumber;
        rewardToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        pools: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          }
        ] & {
          lpToken: string;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
          accRewardsPerShare: BigNumber;
          totalStaked: BigNumber;
          stakingToken: [string, BigNumber, string, string] & {
            addr: string;
            decimals: BigNumber;
            name: string;
            symbol: string;
          };
        })[];
      })[]
    >;

    getHyperbolicAuctionInfo(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
        minimumPrice: BigNumber;
        alpha: BigNumber;
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    "getHyperbolicAuctionInfo(address)"(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        },
        ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[]
      ] & {
        addr: string;
        paymentCurrency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        totalTokens: BigNumber;
        minimumPrice: BigNumber;
        alpha: BigNumber;
        commitmentsTotal: BigNumber;
        finalized: boolean;
        usePointList: boolean;
        auctionSuccessful: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        paymentCurrencyInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
        documents: ([string, string, BigNumber] & {
          name: string;
          data: string;
          lastModified: BigNumber;
        })[];
      }
    >;

    "getMarkets(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        addr: string;
        templateId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        finalized: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    >;

    "getMarkets(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        addr: string;
        templateId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        finalized: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    >;

    "getMarkets()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        addr: string;
        templateId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        finalized: boolean;
        tokenInfo: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    >;

    getPools(
      _farm: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    >;

    "getPools(address)"(
      _farm: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
        totalStaked: BigNumber;
        stakingToken: [string, BigNumber, string, string] & {
          addr: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
        };
      })[]
    >;

    getTokenInfo(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    "getTokenInfo(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    "getTokens(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      })[]
    >;

    "getTokens(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      })[]
    >;

    "getTokens()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      })[]
    >;

    getTokensInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      })[]
    >;

    "getTokensInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, string] & {
        addr: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
      })[]
    >;

    getUserMarketInfo(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        commitments: BigNumber;
        tokensClaimable: BigNumber;
        claimed: BigNumber;
        isAdmin: boolean;
      }
    >;

    "getUserMarketInfo(address,address)"(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        commitments: BigNumber;
        tokensClaimable: BigNumber;
        claimed: BigNumber;
        isAdmin: boolean;
      }
    >;

    getUserPoolsInfos(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber[], BigNumber[], BigNumber[]] & {
        farm: string;
        pids: BigNumber[];
        totalStaked: BigNumber[];
        pendingRewards: BigNumber[];
      })[]
    >;

    "getUserPoolsInfos(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber[], BigNumber[], BigNumber[]] & {
        farm: string;
        pids: BigNumber[];
        totalStaked: BigNumber[];
        pendingRewards: BigNumber[];
      })[]
    >;

    launcher(overrides?: CallOverrides): Promise<string>;

    "launcher()"(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControls()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address,address)"(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "farmFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchAuctionInfo(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatchAuctionInfo(address)"(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCrowdsaleInfo(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCrowdsaleInfo(address)"(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocuments(
      _document: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDocuments(address)"(
      _document: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDutchAuctionInfo(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDutchAuctionInfo(address)"(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFarmDetail(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFarmDetail(address,address)"(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFarms(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFarms()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getFarms(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHyperbolicAuctionInfo(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHyperbolicAuctionInfo(address)"(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarkets(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarkets(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(_farm: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getPools(address)"(
      _farm: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInfo(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokens(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokens(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokensInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMarketInfo(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserMarketInfo(address,address)"(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPoolsInfos(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserPoolsInfos(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launcher(overrides?: CallOverrides): Promise<BigNumber>;

    "launcher()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address,address)"(
      _token: string,
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBatchAuctionInfo(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchAuctionInfo(address)"(
      _batchAuction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCrowdsaleInfo(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCrowdsaleInfo(address)"(
      _crowdsale: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocuments(
      _document: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocuments(address)"(
      _document: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDutchAuctionInfo(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDutchAuctionInfo(address)"(
      _dutchAuction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFarmDetail(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFarmDetail(address,address)"(
      _farm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFarms(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFarms()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFarms(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHyperbolicAuctionInfo(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getHyperbolicAuctionInfo(address)"(
      _hyperbolicAuction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarkets(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarkets(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarkets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPools(
      _farm: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPools(address)"(
      _farm: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInfo(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokens(uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokens(uint256,uint256,uint256)"(
      pageSize: BigNumberish,
      pageNbr: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokensInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMarketInfo(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserMarketInfo(address,address)"(
      _action: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPoolsInfos(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserPoolsInfos(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "launcher()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContracts(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContracts(address,address,address,address)"(
      _tokenFactory: string,
      _market: string,
      _launcher: string,
      _farmFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
