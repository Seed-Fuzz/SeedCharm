/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MISOLauncherInterface extends ethers.utils.Interface {
  functions: {
    "LAUNCHER_MINTER_ROLE()": FunctionFragment;
    "WETH()": FunctionFragment;
    "accessControls()": FunctionFragment;
    "addLiquidityLauncherTemplate(address)": FunctionFragment;
    "bentoBox()": FunctionFragment;
    "createLauncher(uint256,address,uint256,address,bytes)": FunctionFragment;
    "currentTemplateId(uint256)": FunctionFragment;
    "deployLauncher(uint256,address)": FunctionFragment;
    "getLauncherTemplateId(address)": FunctionFragment;
    "getLaunchers()": FunctionFragment;
    "getLiquidityLauncherTemplate(uint256)": FunctionFragment;
    "getTemplateId(address)": FunctionFragment;
    "hasLauncherMinterRole(address)": FunctionFragment;
    "initMISOLauncher(address,address,address)": FunctionFragment;
    "launcherFees()": FunctionFragment;
    "launcherInfo(address)": FunctionFragment;
    "launcherTemplateId()": FunctionFragment;
    "launchers(uint256)": FunctionFragment;
    "locked()": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "misoDiv()": FunctionFragment;
    "numberOfLiquidityLauncherContracts()": FunctionFragment;
    "removeLiquidityLauncherTemplate(uint256)": FunctionFragment;
    "setCurrentTemplateId(uint256,uint256)": FunctionFragment;
    "setDividends(address)": FunctionFragment;
    "setIntegratorFeePct(uint256)": FunctionFragment;
    "setLocked(bool)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LAUNCHER_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityLauncherTemplate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "bentoBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createLauncher",
    values: [BigNumberish, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTemplateId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployLauncher",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLauncherTemplateId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLaunchers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityLauncherTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplateId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLauncherMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initMISOLauncher",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "launcherFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launcherInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "launcherTemplateId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "misoDiv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfLiquidityLauncherContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityLauncherTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTemplateId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntegratorFeePct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setLocked", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "LAUNCHER_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityLauncherTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bentoBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLauncher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployLauncher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLauncherTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLaunchers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityLauncherTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLauncherMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initMISOLauncher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launcherFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launcherInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launcherTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launchers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "misoDiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfLiquidityLauncherContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityLauncherTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntegratorFeePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;

  events: {
    "LauncherCreated(address,address,address)": EventFragment;
    "LauncherTemplateAdded(address,uint256)": EventFragment;
    "LauncherTemplateRemoved(address,uint256)": EventFragment;
    "MisoInitLauncher(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LauncherCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LauncherTemplateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LauncherTemplateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MisoInitLauncher"): EventFragment;
}

export class MISOLauncher extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MISOLauncherInterface;

  functions: {
    LAUNCHER_MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "LAUNCHER_MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    accessControls(overrides?: CallOverrides): Promise<[string]>;

    "accessControls()"(overrides?: CallOverrides): Promise<[string]>;

    addLiquidityLauncherTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidityLauncherTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bentoBox(overrides?: CallOverrides): Promise<[string]>;

    "bentoBox()"(overrides?: CallOverrides): Promise<[string]>;

    createLauncher(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createLauncher(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployLauncher(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployLauncher(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getLauncherTemplateId(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLauncherTemplateId(address)"(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLaunchers(overrides?: CallOverrides): Promise<[string[]]>;

    "getLaunchers()"(overrides?: CallOverrides): Promise<[string[]]>;

    getLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTemplateId(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTemplateId(address)"(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasLauncherMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasLauncherMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initMISOLauncher(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initMISOLauncher(address,address,address)"(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    launcherFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    "launcherFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    launcherInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    "launcherInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    launcherTemplateId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "launcherTemplateId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    launchers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "launchers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    "locked()"(overrides?: CallOverrides): Promise<[boolean]>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    misoDiv(overrides?: CallOverrides): Promise<[string]>;

    "misoDiv()"(overrides?: CallOverrides): Promise<[string]>;

    numberOfLiquidityLauncherContracts(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "numberOfLiquidityLauncherContracts()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLocked(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  LAUNCHER_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "LAUNCHER_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  accessControls(overrides?: CallOverrides): Promise<string>;

  "accessControls()"(overrides?: CallOverrides): Promise<string>;

  addLiquidityLauncherTemplate(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidityLauncherTemplate(address)"(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bentoBox(overrides?: CallOverrides): Promise<string>;

  "bentoBox()"(overrides?: CallOverrides): Promise<string>;

  createLauncher(
    _templateId: BigNumberish,
    _token: string,
    _tokenSupply: BigNumberish,
    _integratorFeeAccount: string,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createLauncher(uint256,address,uint256,address,bytes)"(
    _templateId: BigNumberish,
    _token: string,
    _tokenSupply: BigNumberish,
    _integratorFeeAccount: string,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  currentTemplateId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentTemplateId(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployLauncher(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployLauncher(uint256,address)"(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getLauncherTemplateId(
    _launcher: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLauncherTemplateId(address)"(
    _launcher: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLaunchers(overrides?: CallOverrides): Promise<string[]>;

  "getLaunchers()"(overrides?: CallOverrides): Promise<string[]>;

  getLiquidityLauncherTemplate(
    _templateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLiquidityLauncherTemplate(uint256)"(
    _templateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTemplateId(
    _launcherTemplate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTemplateId(address)"(
    _launcherTemplate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasLauncherMinterRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasLauncherMinterRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initMISOLauncher(
    _accessControls: string,
    _WETH: string,
    _bentoBox: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initMISOLauncher(address,address,address)"(
    _accessControls: string,
    _WETH: string,
    _bentoBox: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  launcherFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
  >;

  "launcherFees()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
  >;

  launcherInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      templateId: BigNumber;
      index: BigNumber;
    }
  >;

  "launcherInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      templateId: BigNumber;
      index: BigNumber;
    }
  >;

  launcherTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

  "launcherTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

  launchers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "launchers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  "locked()"(overrides?: CallOverrides): Promise<boolean>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  misoDiv(overrides?: CallOverrides): Promise<string>;

  "misoDiv()"(overrides?: CallOverrides): Promise<string>;

  numberOfLiquidityLauncherContracts(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfLiquidityLauncherContracts()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidityLauncherTemplate(
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityLauncherTemplate(uint256)"(
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCurrentTemplateId(
    _templateType: BigNumberish,
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurrentTemplateId(uint256,uint256)"(
    _templateType: BigNumberish,
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDividends(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDividends(address)"(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIntegratorFeePct(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIntegratorFeePct(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLocked(
    _locked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLocked(bool)"(
    _locked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    LAUNCHER_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "LAUNCHER_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    accessControls(overrides?: CallOverrides): Promise<string>;

    "accessControls()"(overrides?: CallOverrides): Promise<string>;

    addLiquidityLauncherTemplate(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityLauncherTemplate(address)"(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bentoBox(overrides?: CallOverrides): Promise<string>;

    "bentoBox()"(overrides?: CallOverrides): Promise<string>;

    createLauncher(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "createLauncher(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployLauncher(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployLauncher(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLauncherTemplateId(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLauncherTemplateId(address)"(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLaunchers(overrides?: CallOverrides): Promise<string[]>;

    "getLaunchers()"(overrides?: CallOverrides): Promise<string[]>;

    getLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTemplateId(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTemplateId(address)"(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLauncherMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasLauncherMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initMISOLauncher(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initMISOLauncher(address,address,address)"(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: CallOverrides
    ): Promise<void>;

    launcherFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    "launcherFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    launcherInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    "launcherInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    launcherTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    "launcherTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

    launchers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "launchers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    "locked()"(overrides?: CallOverrides): Promise<boolean>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<string>;

    "misoDiv()"(overrides?: CallOverrides): Promise<string>;

    numberOfLiquidityLauncherContracts(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfLiquidityLauncherContracts()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDividends(_divaddr: string, overrides?: CallOverrides): Promise<void>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLocked(_locked: boolean, overrides?: CallOverrides): Promise<void>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LauncherCreated(
      owner: string | null,
      addr: string | null,
      launcherTemplate: null
    ): EventFilter;

    LauncherTemplateAdded(newLauncher: null, templateId: null): EventFilter;

    LauncherTemplateRemoved(launcher: null, templateId: null): EventFilter;

    MisoInitLauncher(sender: null): EventFilter;
  };

  estimateGas: {
    LAUNCHER_MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "LAUNCHER_MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControls()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityLauncherTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidityLauncherTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bentoBox(overrides?: CallOverrides): Promise<BigNumber>;

    "bentoBox()"(overrides?: CallOverrides): Promise<BigNumber>;

    createLauncher(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createLauncher(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployLauncher(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployLauncher(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getLauncherTemplateId(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLauncherTemplateId(address)"(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLaunchers(overrides?: CallOverrides): Promise<BigNumber>;

    "getLaunchers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTemplateId(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTemplateId(address)"(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLauncherMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasLauncherMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initMISOLauncher(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initMISOLauncher(address,address,address)"(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    launcherFees(overrides?: CallOverrides): Promise<BigNumber>;

    "launcherFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    launcherInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "launcherInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launcherTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    "launcherTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

    launchers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "launchers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<BigNumber>;

    "misoDiv()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfLiquidityLauncherContracts(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfLiquidityLauncherContracts()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDividends(_divaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLocked(_locked: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LAUNCHER_MINTER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LAUNCHER_MINTER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityLauncherTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityLauncherTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bentoBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bentoBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLauncher(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createLauncher(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployLauncher(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployLauncher(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getLauncherTemplateId(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLauncherTemplateId(address)"(
      _launcher: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLaunchers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLaunchers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTemplateId(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTemplateId(address)"(
      _launcherTemplate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLauncherMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasLauncherMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initMISOLauncher(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initMISOLauncher(address,address,address)"(
      _accessControls: string,
      _WETH: string,
      _bentoBox: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    launcherFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "launcherFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launcherInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "launcherInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launcherTemplateId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "launcherTemplateId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "launchers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "locked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    misoDiv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "misoDiv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfLiquidityLauncherContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfLiquidityLauncherContracts()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityLauncherTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityLauncherTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLocked(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
