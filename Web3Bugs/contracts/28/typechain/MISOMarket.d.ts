/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MISOMarketInterface extends ethers.utils.Interface {
  functions: {
    "MARKET_MINTER_ROLE()": FunctionFragment;
    "accessControls()": FunctionFragment;
    "addAuctionTemplate(address)": FunctionFragment;
    "auctionInfo(address)": FunctionFragment;
    "auctionTemplateId()": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "bentoBox()": FunctionFragment;
    "createMarket(uint256,address,uint256,address,bytes)": FunctionFragment;
    "currentTemplateId(uint256)": FunctionFragment;
    "deployMarket(uint256,address)": FunctionFragment;
    "getAuctionTemplate(uint256)": FunctionFragment;
    "getMarketTemplateId(address)": FunctionFragment;
    "getMarkets()": FunctionFragment;
    "getTemplateId(address)": FunctionFragment;
    "hasMarketMinterRole(address)": FunctionFragment;
    "initMISOMarket(address,address,address[])": FunctionFragment;
    "locked()": FunctionFragment;
    "marketFees()": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "misoDiv()": FunctionFragment;
    "numberOfAuctions()": FunctionFragment;
    "removeAuctionTemplate(uint256)": FunctionFragment;
    "setCurrentTemplateId(uint256,uint256)": FunctionFragment;
    "setDividends(address)": FunctionFragment;
    "setIntegratorFeePct(uint256)": FunctionFragment;
    "setLocked(bool)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MARKET_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuctionTemplate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "auctionInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "auctionTemplateId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bentoBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [BigNumberish, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTemplateId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployMarket",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTemplateId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplateId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMarketMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initMISOMarket",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "misoDiv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuctionTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTemplateId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntegratorFeePct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setLocked", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MARKET_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuctionTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bentoBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMarketMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initMISOMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "misoDiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuctionTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntegratorFeePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;

  events: {
    "AuctionTemplateAdded(address,uint256)": EventFragment;
    "AuctionTemplateRemoved(address,uint256)": EventFragment;
    "MarketCreated(address,address,address)": EventFragment;
    "MisoInitMarket(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionTemplateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTemplateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MisoInitMarket"): EventFragment;
}

export class MISOMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MISOMarketInterface;

  functions: {
    MARKET_MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MARKET_MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    accessControls(overrides?: CallOverrides): Promise<[string]>;

    "accessControls()"(overrides?: CallOverrides): Promise<[string]>;

    addAuctionTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAuctionTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctionInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    "auctionInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    auctionTemplateId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "auctionTemplateId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bentoBox(overrides?: CallOverrides): Promise<[string]>;

    "bentoBox()"(overrides?: CallOverrides): Promise<[string]>;

    createMarket(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createMarket(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployMarket(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployMarket(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    "getMarkets()"(overrides?: CallOverrides): Promise<[string[]]>;

    getTemplateId(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTemplateId(address)"(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasMarketMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasMarketMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initMISOMarket(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initMISOMarket(address,address,address[])"(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    "locked()"(overrides?: CallOverrides): Promise<[boolean]>;

    marketFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    "marketFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    misoDiv(overrides?: CallOverrides): Promise<[string]>;

    "misoDiv()"(overrides?: CallOverrides): Promise<[string]>;

    numberOfAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLocked(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MARKET_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MARKET_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  accessControls(overrides?: CallOverrides): Promise<string>;

  "accessControls()"(overrides?: CallOverrides): Promise<string>;

  addAuctionTemplate(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAuctionTemplate(address)"(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctionInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      templateId: BigNumber;
      index: BigNumber;
    }
  >;

  "auctionInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      templateId: BigNumber;
      index: BigNumber;
    }
  >;

  auctionTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "auctions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  bentoBox(overrides?: CallOverrides): Promise<string>;

  "bentoBox()"(overrides?: CallOverrides): Promise<string>;

  createMarket(
    _templateId: BigNumberish,
    _token: string,
    _tokenSupply: BigNumberish,
    _integratorFeeAccount: string,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createMarket(uint256,address,uint256,address,bytes)"(
    _templateId: BigNumberish,
    _token: string,
    _tokenSupply: BigNumberish,
    _integratorFeeAccount: string,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  currentTemplateId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentTemplateId(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployMarket(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployMarket(uint256,address)"(
    _templateId: BigNumberish,
    _integratorFeeAccount: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getAuctionTemplate(
    _templateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAuctionTemplate(uint256)"(
    _templateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketTemplateId(
    _auction: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMarketTemplateId(address)"(
    _auction: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarkets(overrides?: CallOverrides): Promise<string[]>;

  "getMarkets()"(overrides?: CallOverrides): Promise<string[]>;

  getTemplateId(
    _auctionTemplate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTemplateId(address)"(
    _auctionTemplate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasMarketMinterRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasMarketMinterRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initMISOMarket(
    _accessControls: string,
    _bentoBox: string,
    _templates: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initMISOMarket(address,address,address[])"(
    _accessControls: string,
    _bentoBox: string,
    _templates: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  "locked()"(overrides?: CallOverrides): Promise<boolean>;

  marketFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
  >;

  "marketFees()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
  >;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  misoDiv(overrides?: CallOverrides): Promise<string>;

  "misoDiv()"(overrides?: CallOverrides): Promise<string>;

  numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeAuctionTemplate(
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAuctionTemplate(uint256)"(
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCurrentTemplateId(
    _templateType: BigNumberish,
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurrentTemplateId(uint256,uint256)"(
    _templateType: BigNumberish,
    _templateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDividends(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDividends(address)"(
    _divaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIntegratorFeePct(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIntegratorFeePct(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLocked(
    _locked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLocked(bool)"(
    _locked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MARKET_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MARKET_MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    accessControls(overrides?: CallOverrides): Promise<string>;

    "accessControls()"(overrides?: CallOverrides): Promise<string>;

    addAuctionTemplate(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAuctionTemplate(address)"(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    "auctionInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        templateId: BigNumber;
        index: BigNumber;
      }
    >;

    auctionTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    bentoBox(overrides?: CallOverrides): Promise<string>;

    "bentoBox()"(overrides?: CallOverrides): Promise<string>;

    createMarket(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "createMarket(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployMarket(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployMarket(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(overrides?: CallOverrides): Promise<string[]>;

    "getMarkets()"(overrides?: CallOverrides): Promise<string[]>;

    getTemplateId(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTemplateId(address)"(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMarketMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasMarketMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initMISOMarket(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initMISOMarket(address,address,address[])"(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    "locked()"(overrides?: CallOverrides): Promise<boolean>;

    marketFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    "marketFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { minimumFee: BigNumber; integratorFeePct: number }
    >;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<string>;

    "misoDiv()"(overrides?: CallOverrides): Promise<string>;

    numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDividends(_divaddr: string, overrides?: CallOverrides): Promise<void>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLocked(_locked: boolean, overrides?: CallOverrides): Promise<void>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuctionTemplateAdded(newAuction: null, templateId: null): EventFilter;

    AuctionTemplateRemoved(auction: null, templateId: null): EventFilter;

    MarketCreated(
      owner: string | null,
      addr: string | null,
      marketTemplate: null
    ): EventFilter;

    MisoInitMarket(sender: null): EventFilter;
  };

  estimateGas: {
    MARKET_MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MARKET_MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControls()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAuctionTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAuctionTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctionInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "auctionInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionTemplateId()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bentoBox(overrides?: CallOverrides): Promise<BigNumber>;

    "bentoBox()"(overrides?: CallOverrides): Promise<BigNumber>;

    createMarket(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createMarket(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployMarket(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployMarket(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTemplateId(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTemplateId(address)"(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMarketMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasMarketMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initMISOMarket(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initMISOMarket(address,address,address[])"(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketFees(overrides?: CallOverrides): Promise<BigNumber>;

    "marketFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoDiv(overrides?: CallOverrides): Promise<BigNumber>;

    "misoDiv()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDividends(_divaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLocked(_locked: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MARKET_MINTER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MARKET_MINTER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAuctionTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAuctionTemplate(address)"(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctionInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionTemplateId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionTemplateId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bentoBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bentoBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createMarket(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createMarket(uint256,address,uint256,address,bytes)"(
      _templateId: BigNumberish,
      _token: string,
      _tokenSupply: BigNumberish,
      _integratorFeeAccount: string,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    currentTemplateId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentTemplateId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployMarket(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployMarket(uint256,address)"(
      _templateId: BigNumberish,
      _integratorFeeAccount: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTemplateId(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketTemplateId(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarkets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTemplateId(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTemplateId(address)"(
      _auctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMarketMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasMarketMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initMISOMarket(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initMISOMarket(address,address,address[])"(
      _accessControls: string,
      _bentoBox: string,
      _templates: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "locked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    misoDiv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "misoDiv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfAuctions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAuctionTemplate(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAuctionTemplate(uint256)"(
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCurrentTemplateId(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurrentTemplateId(uint256,uint256)"(
      _templateType: BigNumberish,
      _templateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDividends(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDividends(address)"(
      _divaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIntegratorFeePct(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIntegratorFeePct(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLocked(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLocked(bool)"(
      _locked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
