/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MISOMasterChefInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "SMART_CONTRACT_ROLE()": FunctionFragment;
    "addAdminRole(address)": FunctionFragment;
    "addMinterRole(address)": FunctionFragment;
    "addOperatorRole(address)": FunctionFragment;
    "addSmartContractRole(address)": FunctionFragment;
    "addToken(uint256,address,bool)": FunctionFragment;
    "blocksRemaining()": FunctionFragment;
    "bonusEndBlock()": FunctionFragment;
    "bonusMultiplier()": FunctionFragment;
    "claimTips()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "dev(address)": FunctionFragment;
    "devPercentage()": FunctionFragment;
    "devaddr()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "farmTemplate()": FunctionFragment;
    "getInitData(address,uint256,uint256,address,address)": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAdminRole(address)": FunctionFragment;
    "hasMinterRole(address)": FunctionFragment;
    "hasOperatorRole(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasSmartContractRole(address)": FunctionFragment;
    "initAccessControls(address)": FunctionFragment;
    "initFarm(address,uint256,uint256,address,address)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "pendingRewards(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "removeAdminRole(address)": FunctionFragment;
    "removeMinterRole(address)": FunctionFragment;
    "removeOperatorRole(address)": FunctionFragment;
    "removeSmartContractRole(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "rewardsPerBlock()": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "setBonus(uint256,uint256)": FunctionFragment;
    "setDevPercentage(uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "tips()": FunctionFragment;
    "tokenDebt()": FunctionFragment;
    "tokensRemaining()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "totalRewardDebt()": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SMART_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "blocksRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimTips", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dev", values: [string]): string;
  encodeFunctionData(
    functionFragment: "devPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitData",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initAccessControls",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initFarm",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tips", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SMART_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blocksRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimTips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDevPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminRoleGranted(address,address)": EventFragment;
    "AdminRoleRemoved(address,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "MinterRoleGranted(address,address)": EventFragment;
    "MinterRoleRemoved(address,address)": EventFragment;
    "OperatorRoleGranted(address,address)": EventFragment;
    "OperatorRoleRemoved(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SmartContractRoleGranted(address,address)": EventFragment;
    "SmartContractRoleRemoved(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class MISOMasterChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MISOMasterChefInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    blocksRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    "blocksRemaining()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimTips(overrides?: Overrides): Promise<ContractTransaction>;

    "claimTips()"(overrides?: Overrides): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "dev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    devPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "devPercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    devaddr(overrides?: CallOverrides): Promise<[string]>;

    "devaddr()"(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    farmTemplate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "farmTemplate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInitData(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    "getInitData(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initFarm(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    "rewards()"(overrides?: CallOverrides): Promise<[string]>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBonus(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBonus(uint256,uint256)"(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDevPercentage(
      _devPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevPercentage(uint256)"(
      _devPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tips(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tips()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenDebt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokensRemaining()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalRewardDebt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addToken(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addToken(uint256,address,bool)"(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  blocksRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  "blocksRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

  bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimTips(overrides?: Overrides): Promise<ContractTransaction>;

  "claimTips()"(overrides?: Overrides): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "dev(address)"(
    _devaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  devPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "devPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  devaddr(overrides?: CallOverrides): Promise<string>;

  "devaddr()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  farmTemplate(overrides?: CallOverrides): Promise<BigNumber>;

  "farmTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getInitData(
    _rewards: string,
    _rewardsPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _divaddr: string,
    _accessControls: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getInitData(address,uint256,uint256,address,address)"(
    _rewards: string,
    _rewardsPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _divaddr: string,
    _accessControls: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAdminRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMinterRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasMinterRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasOperatorRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasOperatorRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSmartContractRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasSmartContractRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initAccessControls(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initAccessControls(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initFarm(address,uint256,uint256,address,address)"(
    _rewards: string,
    _rewardsPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _devaddr: string,
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initFarm(bytes)"(
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  pendingRewards(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingRewards(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardsPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardsPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBonus(
    _bonusEndBlock: BigNumberish,
    _bonusMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBonus(uint256,uint256)"(
    _bonusEndBlock: BigNumberish,
    _bonusMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDevPercentage(
    _devPercentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevPercentage(uint256)"(
    _devPercentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  tips(overrides?: CallOverrides): Promise<BigNumber>;

  "tips()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenDebt(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  "tokensRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardDebt(overrides?: CallOverrides): Promise<BigNumber>;

  "totalRewardDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMinterRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOperatorRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    blocksRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "blocksRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimTips(overrides?: CallOverrides): Promise<void>;

    "claimTips()"(overrides?: CallOverrides): Promise<void>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dev(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    "dev(address)"(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    devPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<string>;

    "devaddr()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farmTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "farmTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitData(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getInitData(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initAccessControls(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initFarm(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBonus(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBonus(uint256,uint256)"(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevPercentage(
      _devPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevPercentage(uint256)"(
      _devPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    tips(overrides?: CallOverrides): Promise<BigNumber>;

    "tips()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRewardDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    AdminRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    MinterRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    MinterRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SmartContractRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    SmartContractRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAdminRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMinterRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    blocksRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "blocksRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimTips(overrides?: Overrides): Promise<BigNumber>;

    "claimTips()"(overrides?: Overrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dev(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "dev(address)"(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    devPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    farmTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "farmTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitData(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInitData(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initFarm(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBonus(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBonus(uint256,uint256)"(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDevPercentage(
      _devPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevPercentage(uint256)"(
      _devPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    tips(overrides?: CallOverrides): Promise<BigNumber>;

    "tips()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRewardDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SMART_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SMART_CONTRACT_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addToken(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    blocksRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blocksRemaining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusEndBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTips(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimTips()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dev(_devaddr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "dev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    devPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devPercentage()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    farmTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmTemplate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitData(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitData(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _divaddr: string,
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initFarm(address,uint256,uint256,address,address)"(
      _rewards: string,
      _rewardsPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _devaddr: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initFarm(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBonus(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBonus(uint256,uint256)"(
      _bonusEndBlock: BigNumberish,
      _bonusMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDevPercentage(
      _devPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevPercentage(uint256)"(
      _devPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tips()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenDebt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokensRemaining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalRewardDebt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
