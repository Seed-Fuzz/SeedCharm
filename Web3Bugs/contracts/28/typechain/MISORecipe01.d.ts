/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MISORecipe01Interface extends ethers.utils.Interface {
  functions: {
    "farmFactory()": FunctionFragment;
    "misoLauncher()": FunctionFragment;
    "misoMarket()": FunctionFragment;
    "prepareMiso(string,string,address)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "farmFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "misoLauncher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "misoMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepareMiso",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "farmFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "misoLauncher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "misoMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareMiso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class MISORecipe01 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MISORecipe01Interface;

  functions: {
    farmFactory(overrides?: CallOverrides): Promise<[string]>;

    "farmFactory()"(overrides?: CallOverrides): Promise<[string]>;

    misoLauncher(overrides?: CallOverrides): Promise<[string]>;

    "misoLauncher()"(overrides?: CallOverrides): Promise<[string]>;

    misoMarket(overrides?: CallOverrides): Promise<[string]>;

    "misoMarket()"(overrides?: CallOverrides): Promise<[string]>;

    prepareMiso(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "prepareMiso(string,string,address)"(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  farmFactory(overrides?: CallOverrides): Promise<string>;

  "farmFactory()"(overrides?: CallOverrides): Promise<string>;

  misoLauncher(overrides?: CallOverrides): Promise<string>;

  "misoLauncher()"(overrides?: CallOverrides): Promise<string>;

  misoMarket(overrides?: CallOverrides): Promise<string>;

  "misoMarket()"(overrides?: CallOverrides): Promise<string>;

  prepareMiso(
    _name: string,
    _symbol: string,
    accessControl: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "prepareMiso(string,string,address)"(
    _name: string,
    _symbol: string,
    accessControl: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    farmFactory(overrides?: CallOverrides): Promise<string>;

    "farmFactory()"(overrides?: CallOverrides): Promise<string>;

    misoLauncher(overrides?: CallOverrides): Promise<string>;

    "misoLauncher()"(overrides?: CallOverrides): Promise<string>;

    misoMarket(overrides?: CallOverrides): Promise<string>;

    "misoMarket()"(overrides?: CallOverrides): Promise<string>;

    prepareMiso(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "prepareMiso(string,string,address)"(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    farmFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "farmFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoLauncher(overrides?: CallOverrides): Promise<BigNumber>;

    "misoLauncher()"(overrides?: CallOverrides): Promise<BigNumber>;

    misoMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "misoMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepareMiso(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "prepareMiso(string,string,address)"(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    farmFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    misoLauncher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "misoLauncher()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    misoMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "misoMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareMiso(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "prepareMiso(string,string,address)"(
      _name: string,
      _symbol: string,
      accessControl: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
