/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PointListInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "SMART_CONTRACT_ROLE()": FunctionFragment;
    "addAdminRole(address)": FunctionFragment;
    "addMinterRole(address)": FunctionFragment;
    "addOperatorRole(address)": FunctionFragment;
    "addSmartContractRole(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAdminRole(address)": FunctionFragment;
    "hasMinterRole(address)": FunctionFragment;
    "hasOperatorRole(address)": FunctionFragment;
    "hasPoints(address,uint256)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasSmartContractRole(address)": FunctionFragment;
    "initAccessControls(address)": FunctionFragment;
    "initPointList(address)": FunctionFragment;
    "isInList(address)": FunctionFragment;
    "points(address)": FunctionFragment;
    "removeAdminRole(address)": FunctionFragment;
    "removeMinterRole(address)": FunctionFragment;
    "removeOperatorRole(address)": FunctionFragment;
    "removeSmartContractRole(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setPoints(address[],uint256[])": FunctionFragment;
    "totalPoints()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SMART_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initAccessControls",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initPointList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isInList", values: [string]): string;
  encodeFunctionData(functionFragment: "points", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoints",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoints",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SMART_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initPointList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "points", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPoints",
    data: BytesLike
  ): Result;

  events: {
    "AdminRoleGranted(address,address)": EventFragment;
    "AdminRoleRemoved(address,address)": EventFragment;
    "MinterRoleGranted(address,address)": EventFragment;
    "MinterRoleRemoved(address,address)": EventFragment;
    "OperatorRoleGranted(address,address)": EventFragment;
    "OperatorRoleRemoved(address,address)": EventFragment;
    "PointsUpdated(address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SmartContractRoleGranted(address,address)": EventFragment;
    "SmartContractRoleRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleRemoved"): EventFragment;
}

export class PointList extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PointListInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasPoints(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPoints(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initPointList(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initPointList(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isInList(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isInList(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    points(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoints(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoints(address[],uint256[])"(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalPoints()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAdminRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMinterRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasMinterRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasOperatorRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasOperatorRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasPoints(
    _account: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPoints(address,uint256)"(
    _account: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSmartContractRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasSmartContractRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initAccessControls(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initAccessControls(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initPointList(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initPointList(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isInList(_account: string, overrides?: CallOverrides): Promise<boolean>;

  "isInList(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "points(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoints(
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoints(address[],uint256[])"(
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalPoints(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPoints()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMinterRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOperatorRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasPoints(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPoints(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initAccessControls(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initPointList(_admin: string, overrides?: CallOverrides): Promise<void>;

    "initPointList(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInList(_account: string, overrides?: CallOverrides): Promise<boolean>;

    "isInList(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoints(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoints(address[],uint256[])"(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    totalPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPoints()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AdminRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    AdminRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    MinterRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    MinterRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    PointsUpdated(
      account: string | null,
      oldPoints: null,
      newPoints: null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SmartContractRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    SmartContractRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAdminRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMinterRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPoints(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPoints(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initPointList(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "initPointList(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isInList(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isInList(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoints(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoints(address[],uint256[])"(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPoints()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SMART_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SMART_CONTRACT_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPoints(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPoints(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initPointList(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initPointList(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isInList(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInList(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    points(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoints(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoints(address[],uint256[])"(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalPoints()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
