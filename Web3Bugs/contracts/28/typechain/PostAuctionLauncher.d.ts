/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PostAuctionLauncherInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "SMART_CONTRACT_ROLE()": FunctionFragment;
    "addAdminRole(address)": FunctionFragment;
    "addMinterRole(address)": FunctionFragment;
    "addOperatorRole(address)": FunctionFragment;
    "addSmartContractRole(address)": FunctionFragment;
    "cancelLauncher()": FunctionFragment;
    "createPool()": FunctionFragment;
    "depositETH()": FunctionFragment;
    "depositToken1(uint256)": FunctionFragment;
    "depositToken2(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "finalize()": FunctionFragment;
    "getLPBalance()": FunctionFragment;
    "getLPTokenAddress()": FunctionFragment;
    "getLauncherInitData(address,address,address,address,uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getToken1Balance()": FunctionFragment;
    "getToken2Balance()": FunctionFragment;
    "getTokenAmounts()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAdminRole(address)": FunctionFragment;
    "hasMinterRole(address)": FunctionFragment;
    "hasOperatorRole(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasSmartContractRole(address)": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "initAccessControls(address)": FunctionFragment;
    "initAuctionLauncher(address,address,address,address,uint256,uint256)": FunctionFragment;
    "initLauncher(bytes)": FunctionFragment;
    "launcherInfo()": FunctionFragment;
    "liquidityTemplate()": FunctionFragment;
    "market()": FunctionFragment;
    "marketConnected()": FunctionFragment;
    "removeAdminRole(address)": FunctionFragment;
    "removeMinterRole(address)": FunctionFragment;
    "removeOperatorRole(address)": FunctionFragment;
    "removeSmartContractRole(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setWallet(address)": FunctionFragment;
    "token1()": FunctionFragment;
    "token2()": FunctionFragment;
    "tokenPair()": FunctionFragment;
    "wallet()": FunctionFragment;
    "withdrawDeposits()": FunctionFragment;
    "withdrawLPTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SMART_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLauncher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLPBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLauncherInitData",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken1Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getToken2Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initAccessControls",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initAuctionLauncher",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initLauncher",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "launcherInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketConnected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdminRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSmartContractRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setWallet", values: [string]): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "token2", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLPTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SMART_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLauncher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLPBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLauncherInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getToken1Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getToken2Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initAuctionLauncher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initLauncher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launcherInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketConnected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSmartContractRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPTokens",
    data: BytesLike
  ): Result;

  events: {
    "AdminRoleGranted(address,address)": EventFragment;
    "AdminRoleRemoved(address,address)": EventFragment;
    "InitLiquidityLauncher(address,address,address,address)": EventFragment;
    "LauncherCancelled(address)": EventFragment;
    "LiquidityAdded(uint256)": EventFragment;
    "MinterRoleGranted(address,address)": EventFragment;
    "MinterRoleRemoved(address,address)": EventFragment;
    "OperatorRoleGranted(address,address)": EventFragment;
    "OperatorRoleRemoved(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SmartContractRoleGranted(address,address)": EventFragment;
    "SmartContractRoleRemoved(address,address)": EventFragment;
    "WalletUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitLiquidityLauncher"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LauncherCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletUpdated"): EventFragment;
}

export class PostAuctionLauncher extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PostAuctionLauncherInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelLauncher(overrides?: Overrides): Promise<ContractTransaction>;

    "cancelLauncher()"(overrides?: Overrides): Promise<ContractTransaction>;

    createPool(overrides?: Overrides): Promise<ContractTransaction>;

    "createPool()"(overrides?: Overrides): Promise<ContractTransaction>;

    depositETH(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "depositETH()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    depositToken1(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositToken1(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositToken2(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositToken2(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

    getLPBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLPBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLPTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "getLPTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getLauncherInitData(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    "getLauncherInitData(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getToken1Balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getToken1Balance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getToken2Balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getToken2Balance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        token1Amount: BigNumber;
        token2Amount: BigNumber;
      }
    >;

    "getTokenAmounts()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        token1Amount: BigNumber;
        token2Amount: BigNumber;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "init(bytes)"(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initAuctionLauncher(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initAuctionLauncher(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initLauncher(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initLauncher(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    launcherInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, boolean, BigNumber] & {
        locktime: number;
        unlock: BigNumber;
        liquidityPercent: number;
        launched: boolean;
        liquidityAdded: BigNumber;
      }
    >;

    "launcherInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, boolean, BigNumber] & {
        locktime: number;
        unlock: BigNumber;
        liquidityPercent: number;
        launched: boolean;
        liquidityAdded: BigNumber;
      }
    >;

    liquidityTemplate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidityTemplate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    "market()"(overrides?: CallOverrides): Promise<[string]>;

    marketConnected(overrides?: CallOverrides): Promise<[boolean]>;

    "marketConnected()"(overrides?: CallOverrides): Promise<[boolean]>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    "token1()"(overrides?: CallOverrides): Promise<[string]>;

    token2(overrides?: CallOverrides): Promise<[string]>;

    "token2()"(overrides?: CallOverrides): Promise<[string]>;

    tokenPair(overrides?: CallOverrides): Promise<[string]>;

    "tokenPair()"(overrides?: CallOverrides): Promise<[string]>;

    wallet(overrides?: CallOverrides): Promise<[string]>;

    "wallet()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawDeposits(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawDeposits()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawLPTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawLPTokens()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelLauncher(overrides?: Overrides): Promise<ContractTransaction>;

  "cancelLauncher()"(overrides?: Overrides): Promise<ContractTransaction>;

  createPool(overrides?: Overrides): Promise<ContractTransaction>;

  "createPool()"(overrides?: Overrides): Promise<ContractTransaction>;

  depositETH(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "depositETH()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  depositToken1(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositToken1(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositToken2(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositToken2(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

  getLPBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getLPBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLPTokenAddress(overrides?: CallOverrides): Promise<string>;

  "getLPTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  getLauncherInitData(
    _market: string,
    _factory: string,
    _admin: string,
    _wallet: string,
    _liquidityPercent: BigNumberish,
    _locktime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLauncherInitData(address,address,address,address,uint256,uint256)"(
    _market: string,
    _factory: string,
    _admin: string,
    _wallet: string,
    _liquidityPercent: BigNumberish,
    _locktime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getToken1Balance(overrides?: CallOverrides): Promise<BigNumber>;

  "getToken1Balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getToken2Balance(overrides?: CallOverrides): Promise<BigNumber>;

  "getToken2Balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenAmounts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      token1Amount: BigNumber;
      token2Amount: BigNumber;
    }
  >;

  "getTokenAmounts()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      token1Amount: BigNumber;
      token2Amount: BigNumber;
    }
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAdminRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMinterRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasMinterRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasOperatorRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasOperatorRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSmartContractRole(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasSmartContractRole(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "init(bytes)"(
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  initAccessControls(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initAccessControls(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initAuctionLauncher(
    _market: string,
    _factory: string,
    _admin: string,
    _wallet: string,
    _liquidityPercent: BigNumberish,
    _locktime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initAuctionLauncher(address,address,address,address,uint256,uint256)"(
    _market: string,
    _factory: string,
    _admin: string,
    _wallet: string,
    _liquidityPercent: BigNumberish,
    _locktime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initLauncher(
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initLauncher(bytes)"(
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  launcherInfo(
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number, boolean, BigNumber] & {
      locktime: number;
      unlock: BigNumber;
      liquidityPercent: number;
      launched: boolean;
      liquidityAdded: BigNumber;
    }
  >;

  "launcherInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number, boolean, BigNumber] & {
      locktime: number;
      unlock: BigNumber;
      liquidityPercent: number;
      launched: boolean;
      liquidityAdded: BigNumber;
    }
  >;

  liquidityTemplate(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidityTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  marketConnected(overrides?: CallOverrides): Promise<boolean>;

  "marketConnected()"(overrides?: CallOverrides): Promise<boolean>;

  removeAdminRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAdminRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMinterRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMinterRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeOperatorRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOperatorRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeSmartContractRole(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeSmartContractRole(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWallet(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWallet(address)"(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token1(overrides?: CallOverrides): Promise<string>;

  "token1()"(overrides?: CallOverrides): Promise<string>;

  token2(overrides?: CallOverrides): Promise<string>;

  "token2()"(overrides?: CallOverrides): Promise<string>;

  tokenPair(overrides?: CallOverrides): Promise<string>;

  "tokenPair()"(overrides?: CallOverrides): Promise<string>;

  wallet(overrides?: CallOverrides): Promise<string>;

  "wallet()"(overrides?: CallOverrides): Promise<string>;

  withdrawDeposits(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawDeposits()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawLPTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawLPTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMinterRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOperatorRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelLauncher(overrides?: CallOverrides): Promise<void>;

    "cancelLauncher()"(overrides?: CallOverrides): Promise<void>;

    createPool(overrides?: CallOverrides): Promise<void>;

    "createPool()"(overrides?: CallOverrides): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    "depositETH()"(overrides?: CallOverrides): Promise<void>;

    depositToken1(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "depositToken1(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositToken2(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "depositToken2(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    finalize(overrides?: CallOverrides): Promise<BigNumber>;

    "finalize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLPBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getLPBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLPTokenAddress(overrides?: CallOverrides): Promise<string>;

    "getLPTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    getLauncherInitData(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLauncherInitData(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken1Balance(overrides?: CallOverrides): Promise<BigNumber>;

    "getToken1Balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getToken2Balance(overrides?: CallOverrides): Promise<BigNumber>;

    "getToken2Balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        token1Amount: BigNumber;
        token2Amount: BigNumber;
      }
    >;

    "getTokenAmounts()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        token1Amount: BigNumber;
        token2Amount: BigNumber;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAdminRole(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    "init(bytes)"(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    initAccessControls(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initAuctionLauncher(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initAuctionLauncher(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initLauncher(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    "initLauncher(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    launcherInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, boolean, BigNumber] & {
        locktime: number;
        unlock: BigNumber;
        liquidityPercent: number;
        launched: boolean;
        liquidityAdded: BigNumber;
      }
    >;

    "launcherInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, boolean, BigNumber] & {
        locktime: number;
        unlock: BigNumber;
        liquidityPercent: number;
        launched: boolean;
        liquidityAdded: BigNumber;
      }
    >;

    liquidityTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    marketConnected(overrides?: CallOverrides): Promise<boolean>;

    "marketConnected()"(overrides?: CallOverrides): Promise<boolean>;

    removeAdminRole(_address: string, overrides?: CallOverrides): Promise<void>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallet(_wallet: string, overrides?: CallOverrides): Promise<void>;

    "setWallet(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token1(overrides?: CallOverrides): Promise<string>;

    "token1()"(overrides?: CallOverrides): Promise<string>;

    token2(overrides?: CallOverrides): Promise<string>;

    "token2()"(overrides?: CallOverrides): Promise<string>;

    tokenPair(overrides?: CallOverrides): Promise<string>;

    "tokenPair()"(overrides?: CallOverrides): Promise<string>;

    wallet(overrides?: CallOverrides): Promise<string>;

    "wallet()"(overrides?: CallOverrides): Promise<string>;

    withdrawDeposits(overrides?: CallOverrides): Promise<void>;

    "withdrawDeposits()"(overrides?: CallOverrides): Promise<void>;

    withdrawLPTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawLPTokens()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AdminRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    AdminRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    InitLiquidityLauncher(
      token1: string | null,
      token2: string | null,
      factory: null,
      sender: null
    ): EventFilter;

    LauncherCancelled(wallet: string | null): EventFilter;

    LiquidityAdded(liquidity: null): EventFilter;

    MinterRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    MinterRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    OperatorRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SmartContractRoleGranted(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    SmartContractRoleRemoved(
      beneficiary: string | null,
      caller: string | null
    ): EventFilter;

    WalletUpdated(wallet: string | null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SMART_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SMART_CONTRACT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAdminRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMinterRole(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelLauncher(overrides?: Overrides): Promise<BigNumber>;

    "cancelLauncher()"(overrides?: Overrides): Promise<BigNumber>;

    createPool(overrides?: Overrides): Promise<BigNumber>;

    "createPool()"(overrides?: Overrides): Promise<BigNumber>;

    depositETH(overrides?: PayableOverrides): Promise<BigNumber>;

    "depositETH()"(overrides?: PayableOverrides): Promise<BigNumber>;

    depositToken1(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositToken1(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositToken2(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositToken2(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(overrides?: Overrides): Promise<BigNumber>;

    "finalize()"(overrides?: Overrides): Promise<BigNumber>;

    getLPBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getLPBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLPTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getLPTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLauncherInitData(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLauncherInitData(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken1Balance(overrides?: CallOverrides): Promise<BigNumber>;

    "getToken1Balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getToken2Balance(overrides?: CallOverrides): Promise<BigNumber>;

    "getToken2Balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenAmounts()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(_data: BytesLike, overrides?: PayableOverrides): Promise<BigNumber>;

    "init(bytes)"(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initAuctionLauncher(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initAuctionLauncher(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initLauncher(_data: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "initLauncher(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    launcherInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "launcherInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketConnected(overrides?: CallOverrides): Promise<BigNumber>;

    "marketConnected()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWallet(_wallet: string, overrides?: Overrides): Promise<BigNumber>;

    "setWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    "token1()"(overrides?: CallOverrides): Promise<BigNumber>;

    token2(overrides?: CallOverrides): Promise<BigNumber>;

    "token2()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPair(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDeposits(overrides?: Overrides): Promise<BigNumber>;

    "withdrawDeposits()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawLPTokens(overrides?: Overrides): Promise<BigNumber>;

    "withdrawLPTokens()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SMART_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SMART_CONTRACT_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelLauncher(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cancelLauncher()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    createPool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "createPool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    depositETH(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "depositETH()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    depositToken1(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositToken1(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositToken2(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositToken2(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getLPBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLPBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLPTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLPTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLauncherInitData(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLauncherInitData(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken1Balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getToken1Balance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken2Balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getToken2Balance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokenAmounts()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasAdminRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAdminRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMinterRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasMinterRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOperatorRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasOperatorRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSmartContractRole(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasSmartContractRole(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "init(bytes)"(
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    initAccessControls(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initAccessControls(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initAuctionLauncher(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initAuctionLauncher(address,address,address,address,uint256,uint256)"(
      _market: string,
      _factory: string,
      _admin: string,
      _wallet: string,
      _liquidityPercent: BigNumberish,
      _locktime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initLauncher(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initLauncher(bytes)"(
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    launcherInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "launcherInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityTemplate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketConnected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketConnected()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdminRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAdminRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMinterRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMinterRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeOperatorRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOperatorRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeSmartContractRole(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeSmartContractRole(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawDeposits(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawDeposits()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawLPTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawLPTokens()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
