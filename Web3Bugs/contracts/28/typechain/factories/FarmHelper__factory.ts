/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { FarmHelper } from "../FarmHelper";

export class FarmHelper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<FarmHelper> {
    return super.deploy(overrides || {}) as Promise<FarmHelper>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FarmHelper {
    return super.attach(address) as FarmHelper;
  }
  connect(signer: Signer): FarmHelper__factory {
    return super.connect(signer) as FarmHelper__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FarmHelper {
    return new Contract(address, _abi, signerOrProvider) as FarmHelper;
  }
}

const _abi = [
  {
    inputs: [],
    name: "accessControls",
    outputs: [
      {
        internalType: "contract MISOAccessControls",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "farmFactory",
    outputs: [
      {
        internalType: "contract IMisoFarmFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_farm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getFarmDetail",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "templateId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsPerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bonusMultiplier",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
            ],
            internalType: "struct TokenHelper.TokenInfo",
            name: "rewardToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "lpToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastRewardBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "accRewardsPerShare",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "decimals",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "name",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "symbol",
                    type: "string",
                  },
                ],
                internalType: "struct TokenHelper.TokenInfo",
                name: "stakingToken",
                type: "tuple",
              },
            ],
            internalType: "struct FarmHelper.PoolInfo[]",
            name: "pools",
            type: "tuple[]",
          },
        ],
        internalType: "struct FarmHelper.FarmInfo",
        name: "farmInfo",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "farm",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "pid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalStaked",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lpBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lpAllowance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardDebt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pendingRewards",
            type: "uint256",
          },
        ],
        internalType: "struct FarmHelper.UserPoolInfo[]",
        name: "userInfos",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pageSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pageNbr",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "getFarms",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "templateId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsPerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bonusMultiplier",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
            ],
            internalType: "struct TokenHelper.TokenInfo",
            name: "rewardToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "lpToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastRewardBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "accRewardsPerShare",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "decimals",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "name",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "symbol",
                    type: "string",
                  },
                ],
                internalType: "struct TokenHelper.TokenInfo",
                name: "stakingToken",
                type: "tuple",
              },
            ],
            internalType: "struct FarmHelper.PoolInfo[]",
            name: "pools",
            type: "tuple[]",
          },
        ],
        internalType: "struct FarmHelper.FarmInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFarms",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "templateId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsPerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bonusMultiplier",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
            ],
            internalType: "struct TokenHelper.TokenInfo",
            name: "rewardToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "lpToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastRewardBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "accRewardsPerShare",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "decimals",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "name",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "symbol",
                    type: "string",
                  },
                ],
                internalType: "struct TokenHelper.TokenInfo",
                name: "stakingToken",
                type: "tuple",
              },
            ],
            internalType: "struct FarmHelper.PoolInfo[]",
            name: "pools",
            type: "tuple[]",
          },
        ],
        internalType: "struct FarmHelper.FarmInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pageSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pageNbr",
        type: "uint256",
      },
    ],
    name: "getFarms",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "templateId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsPerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bonusMultiplier",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
            ],
            internalType: "struct TokenHelper.TokenInfo",
            name: "rewardToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "lpToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastRewardBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "accRewardsPerShare",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalStaked",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "decimals",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "name",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "symbol",
                    type: "string",
                  },
                ],
                internalType: "struct TokenHelper.TokenInfo",
                name: "stakingToken",
                type: "tuple",
              },
            ],
            internalType: "struct FarmHelper.PoolInfo[]",
            name: "pools",
            type: "tuple[]",
          },
        ],
        internalType: "struct FarmHelper.FarmInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_farm",
        type: "address",
      },
    ],
    name: "getPools",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "lpToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "allocPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastRewardBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "accRewardsPerShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalStaked",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
            ],
            internalType: "struct TokenHelper.TokenInfo",
            name: "stakingToken",
            type: "tuple",
          },
        ],
        internalType: "struct FarmHelper.PoolInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "decimals",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
        ],
        internalType: "struct TokenHelper.TokenInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    name: "getTokensInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "decimals",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
        ],
        internalType: "struct TokenHelper.TokenInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUserPoolsInfos",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "farm",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "pids",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "totalStaked",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "pendingRewards",
            type: "uint256[]",
          },
        ],
        internalType: "struct FarmHelper.UserPoolsInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "launcher",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "market",
    outputs: [
      {
        internalType: "contract IMisoMarketFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_market",
        type: "address",
      },
      {
        internalType: "address",
        name: "_launcher",
        type: "address",
      },
      {
        internalType: "address",
        name: "_farmFactory",
        type: "address",
      },
    ],
    name: "setContracts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenFactory",
    outputs: [
      {
        internalType: "contract IMisoTokenFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506123c7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636d25e175116100975780639dc4ac8a116100665780639dc4ac8a14610211578063bce16f4b14610219578063bf989b6e1461022c578063e77772fe14610241576100f5565b80636d25e175146101d9578063748365ef146101e157806380f55605146101e9578063927da105146101f1576100f5565b806322aeea09116100d357806322aeea091461015857806346a0fe471461017857806356468ddf146101985780635c39f467146101b9576100f5565b80630cbf4ba7146100fa57806316eebd1e146101235780631f69565f14610138575b600080fd5b61010d610108366004611b6c565b610249565b60405161011a9190612157565b60405180910390f35b61012b610771565b60405161011a9190612063565b61014b610146366004611b6c565b610780565b60405161011a91906122c9565b61016b610166366004611e59565b610916565b60405161011a9190612091565b61018b610186366004611cbf565b610ae9565b60405161011a9190612104565b6101ab6101a6366004611ba4565b610b8e565b60405161011a92919061223d565b6101cc6101c7366004611b6c565b61112a565b60405161011a91906120f1565b61012b6113f6565b61012b611405565b61012b611414565b6102046101ff366004611bdc565b611423565b60405161011a91906122dc565b61016b6114ac565b61016b610227366004611e15565b6116d2565b61023f61023a366004611c26565b6116e9565b005b61012b61183f565b60606000600260009054906101000a90046001600160a01b03166001600160a01b0316638f5185e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561029b57600080fd5b505afa1580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190611dfd565b90506060816001600160401b03811180156102ed57600080fd5b5060405190808252806020026020018201604052801561032757816020015b610314611a30565b81526020019060019003908161030c5790505b50905060005b8281101561076957600254604051633ed2387560e11b81526000916001600160a01b031690637da470ea906103669085906004016122dc565b60206040518083038186803b15801561037e57600080fd5b505afa158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b69190611b88565b905060008190506000816001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f857600080fd5b505afa15801561040c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190611dfd565b90506060816001600160401b038111801561044a57600080fd5b50604051908082528060200260200182016040528015610474578160200160208202803683370190505b5090506060826001600160401b038111801561048f57600080fd5b506040519080825280602002602001820160405280156104b9578160200160208202803683370190505b5090506060836001600160401b03811180156104d457600080fd5b506040519080825280602002602001820160405280156104fe578160200160208202803683370190505b50905060005b848110156106dd57604051631526fe2760e01b81526000906001600160a01b03881690631526fe279061053b9085906004016122dc565b60806040518083038186803b15801561055357600080fd5b505afa158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190611c81565b5050509050866001600160a01b03166393f1a40b838f6040518363ffffffff1660e01b81526004016105be9291906122e5565b604080518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190611e36565b5085838151811061061a57fe5b602002602001018181525050866001600160a01b031663d18df53c838f6040518363ffffffff1660e01b81526004016106549291906122e5565b60206040518083038186803b15801561066c57600080fd5b505afa158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190611dfd565b8483815181106106b057fe5b602002602001018181525050818383815181106106c957fe5b602090810291909101015250600101610504565b50828888815181106106eb57fe5b6020026020010151604001819052508188888151811061070757fe5b6020026020010151606001819052508088888151811061072357fe5b6020026020010151602001819052508588888151811061073f57fe5b60209081029190910101516001600160a01b03909116905250506001909401935061032d92505050565b509392505050565b6003546001600160a01b031681565b610788611a61565b610790611a61565b6001600160a01b038316808252604080516306fdde0360e01b815290518592916306fdde03916004808301926000929190829003018186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108119190810190611d7b565b8260400181905250806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561085257600080fd5b505afa158015610866573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088e9190810190611d7b565b8260600181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108cf57600080fd5b505afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190611e84565b60ff1660208301525092915050565b60606000600260009054906101000a90046001600160a01b03166001600160a01b0316638f5185e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561096857600080fd5b505afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190611dfd565b905083850283018086016060838211156109b8578391505b828210156109cb579350610ae292505050565b8282036001600160401b03811180156109e357600080fd5b50604051908082528060200260200182016040528015610a1d57816020015b610a0a611a92565b815260200190600190039081610a025790505b50905060005b828482011015610adb57600254604051633ed2387560e11b81526000916001600160a01b031690637da470ea90610a6090858901906004016122dc565b60206040518083038186803b158015610a7857600080fd5b505afa158015610a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab09190611b88565b9050610abb8161184e565b838381518110610ac757fe5b602090810291909101015250600101610a23565b5093505050505b9392505050565b60608082516001600160401b0381118015610b0357600080fd5b50604051908082528060200260200182016040528015610b3d57816020015b610b2a611a61565b815260200190600190039081610b225790505b50905060005b8351811015610b8757610b68848281518110610b5b57fe5b6020026020010151610780565b828281518110610b7457fe5b6020908102919091010152600101610b43565b5092915050565b610b96611a92565b6001600160a01b03808416825260025460405163699af5ed60e11b81526060928692169063d335ebda90610bce908490600401612063565b60206040518083038186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e9190611dfd565b836020018181525050806001600160a01b0316635eeb67106040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6057600080fd5b505afa158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c989190611dfd565b836040018181525050806001600160a01b031663a8b973a16040518163ffffffff1660e01b815260040160206040518083038186803b158015610cda57600080fd5b505afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d129190611dfd565b836060018181525050610d8f816001600160a01b0316639ec5a8946040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5757600080fd5b505afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101469190611b88565b6080840152610d9d8561112a565b60a08401526001600160a01b038416156111225760a083015180516001600160401b0381118015610dcd57600080fd5b50604051908082528060200260200182016040528015610e0757816020015b610df4611ad7565b815260200190600190039081610dec5790505b50925060005b815181101561111f57610e1e611ad7565b848281518110610e2a57fe5b602002602001015190506000838381518110610e4257fe5b602002602001015160a00151600001519050846001600160a01b03166393f1a40b848a6040518363ffffffff1660e01b8152600401610e829291906122e5565b604080518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190611e36565b60a0840152604080840191909152516370a0823160e01b81526001600160a01b038216906370a0823190610f09908b90600401612063565b60206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f599190611dfd565b6060830152604051636eb1769f60e11b81526001600160a01b0382169063dd62ed3e90610f8c908b908d90600401612077565b60206040518083038186803b158015610fa457600080fd5b505afa158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdc9190611dfd565b60808301526040516334637d4f60e21b81526001600160a01b0386169063d18df53c9061100f9086908c906004016122e5565b60206040518083038186803b15801561102757600080fd5b505afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f9190611dfd565b60c08301526040516393f1a40b60e01b81526001600160a01b038616906393f1a40b906110929086908c906004016122e5565b604080518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190611e36565b5060408301526001600160a01b0389168252602082018390528551829087908590811061110a57fe5b60209081029190910101525050600101610e0d565b50505b509250929050565b606060008290506000816001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116c57600080fd5b505afa158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a49190611dfd565b90506060816001600160401b03811180156111be57600080fd5b506040519080825280602002602001820160405280156111f857816020015b6111e5611b1d565b8152602001906001900390816111dd5790505b50905060005b828110156113ed57604051631526fe2760e01b81526001600160a01b03851690631526fe27906112329084906004016122dc565b60806040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190611c81565b85858151811061128e57fe5b60200260200101516000018686815181106112a557fe5b60200260200101516020018787815181106112bc57fe5b60200260200101516040018888815181106112d357fe5b602090810291909101015160600193909352929091529190526001600160a01b039091169052815182908290811061130757fe5b6020026020010151600001516001600160a01b03166370a08231876040518263ffffffff1660e01b815260040161133e9190612063565b60206040518083038186803b15801561135657600080fd5b505afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611dfd565b82828151811061139a57fe5b602002602001015160800181815250506113ca8282815181106113b957fe5b602002602001015160000151610780565b8282815181106113d657fe5b602090810291909101015160a001526001016111fe565b50949350505050565b6002546001600160a01b031681565b6004546001600160a01b031681565b6000546001600160a01b031681565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e906114549086908690600401612077565b60206040518083038186803b15801561146c57600080fd5b505afa158015611480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a49190611dfd565b949350505050565b60606000600260009054906101000a90046001600160a01b03166001600160a01b0316638f5185e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fe57600080fd5b505afa158015611512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115369190611dfd565b90506060816001600160401b038111801561155057600080fd5b5060405190808252806020026020018201604052801561158a57816020015b611577611a92565b81526020019060019003908161156f5790505b50905060005b828110156116cb57600254604051633ed2387560e11b81526000916001600160a01b031690637da470ea906115c99085906004016122dc565b60206040518083038186803b1580156115e157600080fd5b505afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190611b88565b60025460405163699af5ed60e11b81529192506000916001600160a01b039091169063d335ebda9061164f908590600401612063565b60206040518083038186803b15801561166757600080fd5b505afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f9190611dfd565b90506116aa8261184e565b8484815181106116b657fe5b60209081029190910101525050600101611590565b5091505090565b60606116e083836000610916565b90505b92915050565b6004805460405163c395fcb360e01b81526001600160a01b039091169163c395fcb39161171891339101612063565b60206040518083038186803b15801561173057600080fd5b505afa158015611744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117689190611d5b565b61178d5760405162461bcd60e51b815260040161178490612208565b60405180910390fd5b6001600160a01b038316156117b857600080546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038416156117e357600180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b0382161561180e57600380546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0381161561183957600280546001600160a01b0319166001600160a01b0383161790555b50505050565b6001546001600160a01b031681565b611856611a92565b6001600160a01b03808316825260025460405163699af5ed60e11b81528492919091169063d335ebda9061188e908490600401612063565b60206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118de9190611dfd565b826020018181525050806001600160a01b0316635eeb67106040518163ffffffff1660e01b815260040160206040518083038186803b15801561192057600080fd5b505afa158015611934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119589190611dfd565b826040018181525050806001600160a01b031663a8b973a16040518163ffffffff1660e01b815260040160206040518083038186803b15801561199a57600080fd5b505afa1580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d29190611dfd565b826060018181525050611a17816001600160a01b0316639ec5a8946040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5757600080fd5b6080830152611a258361112a565b60a083015250919050565b604051806080016040528060006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001611aca611a61565b8152602001606081525090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001611b5c611a61565b905290565b80356116e381612379565b600060208284031215611b7d578081fd5b8135610ae281612379565b600060208284031215611b99578081fd5b8151610ae281612379565b60008060408385031215611bb6578081fd5b8235611bc181612379565b91506020830135611bd181612379565b809150509250929050565b600080600060608486031215611bf0578081fd5b8335611bfb81612379565b92506020840135611c0b81612379565b91506040840135611c1b81612379565b809150509250925092565b60008060008060808587031215611c3b578081fd5b8435611c4681612379565b93506020850135611c5681612379565b92506040850135611c6681612379565b91506060850135611c7681612379565b939692955090935050565b60008060008060808587031215611c96578384fd5b8451611ca181612379565b60208601516040870151606090970151919890975090945092505050565b60006020808385031215611cd1578182fd5b82356001600160401b03811115611ce6578283fd5b8301601f81018513611cf6578283fd5b8035611d09611d0482612322565b6122fc565b8181528381019083850185840285018601891015611d25578687fd5b8694505b83851015611d4f57611d3b8982611b61565b835260019490940193918501918501611d29565b50979650505050505050565b600060208284031215611d6c578081fd5b81518015158114610ae2578182fd5b600060208284031215611d8c578081fd5b81516001600160401b0380821115611da2578283fd5b818401915084601f830112611db5578283fd5b815181811115611dc3578384fd5b611dd6601f8201601f19166020016122fc565b9150808252856020828501011115611dec578384fd5b6113ed81602084016020860161234d565b600060208284031215611e0e578081fd5b5051919050565b60008060408385031215611e27578182fd5b50508035926020909101359150565b60008060408385031215611e48578182fd5b505080516020909101519092909150565b600080600060608486031215611e6d578283fd5b505081359360208301359350604090920135919050565b600060208284031215611e95578081fd5b815160ff81168114610ae2578182fd5b6001600160a01b03169052565b6000815180845260208085018081965082840281019150828601855b85811015611f3f578284038952815180516001600160a01b03168552858101518686015260408082015190860152606080820151908601526080808201519086015260a09081015160c091860182905290611f2b81870183612019565b9a87019a9550505090840190600101611ece565b5091979650505050505050565b6000815180845260208085019450808401835b83811015611f7b57815187529582019590820190600101611f5f565b509495945050505050565b60008151808452611f9e81602086016020860161234d565b601f01601f19169290920160200192915050565b600060018060a01b038251168352602082015160208401526040820151604084015260608201516060840152608082015160c06080850152611ff760c0850182612019565b905060a083015184820360a08601526120108282611eb2565b95945050505050565b600060018060a01b0382511683526020820151602084015260408201516080604085015261204a6080850182611f86565b9050606083015184820360608601526120108282611f86565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156120e457603f198886030184526120d2858351611fb2565b945092850192908501906001016120b6565b5092979650505050505050565b6000602082526116e06020830184611eb2565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156120e457603f19888603018452612145858351612019565b94509285019290850190600101612129565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156121fa57603f198984030185528151608061219a8251612341565b855288820151818a8701526121b182870182611f4c565b91505087820151858203898701526121c98282611f4c565b915050606080830151925085820381870152506121e68183611f4c565b96890196945050509086019060010161217b565b509098975050505050505050565b6020808252818101527f4d49534f48656c7065723a2053656e646572206d7573742062652041646d696e604082015260600190565b6000604080835261225081840186611fb2565b838103602085810191909152855180835286820192820190855b818110156121fa57845161227f848251611ea5565b80850151848601528681015187850152606080820151908501526080808201519085015260a0808201519085015260c090810151908401529383019360e09092019160010161226a565b6000602082526116e06020830184612019565b90815260200190565b9182526001600160a01b0316602082015260400190565b6040518181016001600160401b038111828210171561231a57600080fd5b604052919050565b60006001600160401b03821115612337578081fd5b5060209081020190565b6001600160a01b031690565b60005b83811015612368578181015183820152602001612350565b838111156118395750506000910152565b6001600160a01b038116811461238e57600080fd5b5056fea26469706673582212208a9efeac7dd0094fa3cfc307074da869ab2a77ed1c7c763de998de0646b3e03c64736f6c634300060c0033";
