/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AirdropDistributionInterface extends ethers.utils.Interface {
  functions: {
    "airdrop(address)": FunctionFragment;
    "available_supply()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimExact(uint256)": FunctionFragment;
    "mainToken()": FunctionFragment;
    "miningEpoch()": FunctionFragment;
    "paused()": FunctionFragment;
    "rate()": FunctionFragment;
    "startEpochTime()": FunctionFragment;
    "updateEmission()": FunctionFragment;
    "validate()": FunctionFragment;
    "validated(address)": FunctionFragment;
    "vestLock()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "airdrop", values: [string]): string;
  encodeFunctionData(
    functionFragment: "available_supply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimExact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mainToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startEpochTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmission",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "validate", values?: undefined): string;
  encodeFunctionData(functionFragment: "validated", values: [string]): string;
  encodeFunctionData(functionFragment: "vestLock", values?: undefined): string;

  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "available_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimExact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mainToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startEpochTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vestLock", data: BytesLike): Result;

  events: {
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Validated(address,uint256,uint256)": EventFragment;
    "Vested(address,uint256,uint256)": EventFragment;
    "updateMiningParameters(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Validated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateMiningParameters"): EventFragment;
}

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type ValidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    investor: string;
    amount: BigNumber;
    timeStamp: BigNumber;
  }
>;

export type VestedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    investor: string;
    amount: BigNumber;
    timeStamp: BigNumber;
  }
>;

export type updateMiningParametersEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    time: BigNumber;
    rate: BigNumber;
    supply: BigNumber;
  }
>;

export class AirdropDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AirdropDistributionInterface;

  functions: {
    airdrop(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        claimed: BigNumber;
        total_tokens: BigNumber;
        fraction: BigNumber;
      }
    >;

    available_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimExact(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mainToken(overrides?: CallOverrides): Promise<[string]>;

    miningEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    startEpochTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateEmission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validated(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    vestLock(overrides?: CallOverrides): Promise<[string]>;
  };

  airdrop(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      claimed: BigNumber;
      total_tokens: BigNumber;
      fraction: BigNumber;
    }
  >;

  available_supply(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimExact(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mainToken(overrides?: CallOverrides): Promise<string>;

  miningEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  startEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

  updateEmission(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  vestLock(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    airdrop(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        claimed: BigNumber;
        total_tokens: BigNumber;
        fraction: BigNumber;
      }
    >;

    available_supply(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimExact(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mainToken(overrides?: CallOverrides): Promise<string>;

    miningEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    startEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateEmission(overrides?: CallOverrides): Promise<void>;

    validate(overrides?: CallOverrides): Promise<void>;

    validated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestLock(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Validated(address,uint256,uint256)"(
      investor?: string | null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { investor: string; amount: BigNumber; timeStamp: BigNumber }
    >;

    Validated(
      investor?: string | null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { investor: string; amount: BigNumber; timeStamp: BigNumber }
    >;

    "Vested(address,uint256,uint256)"(
      investor?: string | null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { investor: string; amount: BigNumber; timeStamp: BigNumber }
    >;

    Vested(
      investor?: string | null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { investor: string; amount: BigNumber; timeStamp: BigNumber }
    >;

    "updateMiningParameters(uint256,uint256,uint256)"(
      time?: null,
      rate?: null,
      supply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { time: BigNumber; rate: BigNumber; supply: BigNumber }
    >;

    updateMiningParameters(
      time?: null,
      rate?: null,
      supply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { time: BigNumber; rate: BigNumber; supply: BigNumber }
    >;
  };

  estimateGas: {
    airdrop(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    available_supply(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimExact(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mainToken(overrides?: CallOverrides): Promise<BigNumber>;

    miningEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    startEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateEmission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestLock(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    airdrop(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    available_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimExact(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mainToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startEpochTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateEmission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validated(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
