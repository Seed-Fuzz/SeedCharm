/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VestingInterface extends ethers.utils.Interface {
  functions: {
    "benClaimed(address)": FunctionFragment;
    "benRevocable(address,uint256)": FunctionFragment;
    "benTotal(address)": FunctionFragment;
    "benVested(address,uint256)": FunctionFragment;
    "benVestingIndex(address)": FunctionFragment;
    "calcClaimableAmount(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "multiSig()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(address)": FunctionFragment;
    "timelocks(address,uint256)": FunctionFragment;
    "totalClaimedAmount()": FunctionFragment;
    "totalVestedAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vest(address,uint256,uint256)": FunctionFragment;
    "vestingToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "benClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "benRevocable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "benTotal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "benVested",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "benVestingIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcClaimableAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "multiSig", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [string]): string;
  encodeFunctionData(
    functionFragment: "timelocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVestedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vest",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "benClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "benRevocable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "benTotal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "benVested", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "benVestingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiSig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Revoke(address,uint256)": EventFragment;
    "TokenClaimed(address,uint256,uint256)": EventFragment;
    "TokenRevoked(address,uint256,uint256)": EventFragment;
    "TokenVested(address,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenVested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RevokeEvent = TypedEvent<
  [string, BigNumber] & { account: string; currentTimestamp: BigNumber }
>;

export type TokenClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    beneficiary: string;
    amount: BigNumber;
    currentTimestamp: BigNumber;
  }
>;

export type TokenRevokedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    beneficiary: string;
    amount: BigNumber;
    currentTimestamp: BigNumber;
  }
>;

export type TokenVestedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    amount: BigNumber;
    releaseTimestamp: BigNumber;
    currentTimestamp: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestingInterface;

  functions: {
    benClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    benRevocable(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    benTotal(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    benVested(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    benVestingIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcClaimableAmount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiSig(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        releaseTimestamp: BigNumber;
      }
    >;

    totalClaimedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVestedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vest(
      _beneficiary: string,
      _amount: BigNumberish,
      _isRevocable: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingToken(overrides?: CallOverrides): Promise<[string]>;
  };

  benClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  benRevocable(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  benTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  benVested(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  benVestingIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcClaimableAmount(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiSig(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelocks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; releaseTimestamp: BigNumber }
  >;

  totalClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalVestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vest(
    _beneficiary: string,
    _amount: BigNumberish,
    _isRevocable: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    benClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    benRevocable(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    benTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    benVested(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    benVestingIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcClaimableAmount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    multiSig(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(_addr: string, overrides?: CallOverrides): Promise<void>;

    timelocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        releaseTimestamp: BigNumber;
      }
    >;

    totalClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vest(
      _beneficiary: string,
      _amount: BigNumberish,
      _isRevocable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Revoke(address,uint256)"(
      account?: string | null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; currentTimestamp: BigNumber }
    >;

    Revoke(
      account?: string | null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; currentTimestamp: BigNumber }
    >;

    "TokenClaimed(address,uint256,uint256)"(
      beneficiary?: string | null,
      amount?: null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { beneficiary: string; amount: BigNumber; currentTimestamp: BigNumber }
    >;

    TokenClaimed(
      beneficiary?: string | null,
      amount?: null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { beneficiary: string; amount: BigNumber; currentTimestamp: BigNumber }
    >;

    "TokenRevoked(address,uint256,uint256)"(
      beneficiary?: string | null,
      amount?: null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { beneficiary: string; amount: BigNumber; currentTimestamp: BigNumber }
    >;

    TokenRevoked(
      beneficiary?: string | null,
      amount?: null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { beneficiary: string; amount: BigNumber; currentTimestamp: BigNumber }
    >;

    "TokenVested(address,uint256,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      releaseTimestamp?: null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        amount: BigNumber;
        releaseTimestamp: BigNumber;
        currentTimestamp: BigNumber;
      }
    >;

    TokenVested(
      sender?: string | null,
      amount?: null,
      releaseTimestamp?: null,
      currentTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        amount: BigNumber;
        releaseTimestamp: BigNumber;
        currentTimestamp: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    benClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    benRevocable(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    benTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    benVested(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    benVestingIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcClaimableAmount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiSig(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vest(
      _beneficiary: string,
      _amount: BigNumberish,
      _isRevocable: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    benClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    benRevocable(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    benTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    benVested(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    benVestingIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcClaimableAmount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiSig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalClaimedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVestedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vest(
      _beneficiary: string,
      _amount: BigNumberish,
      _isRevocable: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
