{
  "version": "3.2",
  "log": [
    {
      "Clone2Factory": {
        "src": "contracts/utils/Clone2Factory.sol:7",
        "version": {
          "withMetadata": "3882dcc317d8c434f09bf4e961c6a2babb26b1359f008c8bc5b0aa30edd58632",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:26",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:39"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)452_storage)",
              "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:41"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:346"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)452_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)452_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)5754_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)5754_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)5754_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol:13",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol:221"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:23",
        "version": {
          "withMetadata": "4d5168a4f1cc35769353f7813369e4b5af13e56b9379a386c78479322de20649",
          "withoutMetadata": "d3da051db5ce0d16e8241d9f9a3d8574d9f97cd9ed76401df7045a966dc25057",
          "linkedWithoutMetadata": "d3da051db5ce0d16e8241d9f9a3d8574d9f97cd9ed76401df7045a966dc25057"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:29"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:364"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCountingSimpleUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:13",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCountingSimpleUpgradeable",
              "label": "_proposalVotes",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)2343_storage)",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:39"
            },
            {
              "contract": "GovernorCountingSimpleUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:115"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalVote)2343_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalVote)2343_storage": {
              "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:21",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2295",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:22"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:23"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:162"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2295": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:14",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:15"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:57"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(ERC20VotesUpgradeable)4577",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:35"
            }
          ],
          "types": {
            "t_contract(ERC20VotesUpgradeable)4577": {
              "label": "contract ERC20VotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol:13",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol:33"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "2f9589419719b1127be42885c8101e97e62b474393c793c1fee087b37ba46408",
          "withoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f",
          "linkedWithoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:39"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)3941_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)3941_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:262"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)3941_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)3941_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)3941_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:22",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)5372_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:93"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)5372_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)5372_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "9094afb645efd1850dc1d3d1d113ebfece7969efcfa2bf4281dd49baa1a08651",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "f7c68e4404bdfe4e4cc5fa0f63cc8fb5e58973e20b6aeec8b7bc9c25fd922f5e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:13",
        "version": {
          "withMetadata": "9cee6c19cc41af8dd8ee5dd25634d618c4bed7a951b15eab5eb3f2927fdd83dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "4ec59d73d20af951eedc5e0819aa372f743bb613bddabe73f07647db25943c3f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/TimersUpgradeable.sol:8",
        "version": {
          "withMetadata": "eaff4cb59416590e1fabeb2bc4c2f3c0ef9f4523cced4d671b81f9f46ea520a4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:11",
        "version": {
          "withMetadata": "145d1a91027918092f278773323ddc9b6380c29b2e29c793b3dd984aebc1083c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:27",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:29"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:111"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165StorageUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol:14",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165StorageUpgradeable",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol:25"
            },
            {
              "contract": "ERC165StorageUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:8",
        "version": {
          "withMetadata": "1653505b9ba3a705f4102666dd8a2b2643ecac477634dd50a850cc96e6fad3f1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:20",
        "version": {
          "withMetadata": "17e3287fe78ba698483e0638d3555031d7441c87b5bd95b3a4574bfbcd17c385",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "72c9ce3df4af13d6d08687aa15cdf2398a166ecf0d824615492860d4df7cafc5",
          "withoutMetadata": "72c9ce3df4af13d6d08687aa15cdf2398a166ecf0d824615492860d4df7cafc5",
          "linkedWithoutMetadata": "72c9ce3df4af13d6d08687aa15cdf2398a166ecf0d824615492860d4df7cafc5"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:12",
        "version": {
          "withMetadata": "dabf1bed1f67e5d6935f2a8d81e4d101a4c44889abbe2842263030cb8489876b",
          "withoutMetadata": "a686f647c7a40e80f315b418f84e29466c64bde047596badb2f85ebeb04e5591",
          "linkedWithoutMetadata": "a686f647c7a40e80f315b418f84e29466c64bde047596badb2f85ebeb04e5591"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "33f9809458d652e31f09ddbed6c443d350d8f971be17a5bd6722cabf7a653518",
          "withoutMetadata": "33f9809458d652e31f09ddbed6c443d350d8f971be17a5bd6722cabf7a653518",
          "linkedWithoutMetadata": "33f9809458d652e31f09ddbed6c443d350d8f971be17a5bd6722cabf7a653518"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "f537df0abfe1f8940cc0555580f077e44f5fbc249cc31ffa1b8f6db12cde085b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "82ccbb77179ff9be2544afc51d69f93854b03342034bd54a06a6bb61b48a4edb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PublicLock": {
        "src": "contracts/PublicLock.sol:27",
        "version": {
          "withMetadata": "c34715f1a4e595178943a8a3982cf0e1b6834589c05fbc170c3bf5af2ba63988",
          "withoutMetadata": "ac97bf0d3c722527bf1c3ef0261f2d340363bbcf33055236a9f1c5b81ec6cbd0",
          "linkedWithoutMetadata": "ac97bf0d3c722527bf1c3ef0261f2d340363bbcf33055236a9f1c5b81ec6cbd0"
        },
        "inherit": [
          "MixinRefunds",
          "MixinTransfer",
          "MixinPurchase",
          "MixinGrantKeys",
          "MixinERC721Enumerable",
          "MixinLockMetadata",
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165StorageUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address payable,uint256,address,uint256,uint256,string)",
          "()",
          "()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Unlock": {
        "src": "contracts/Unlock.sol:40",
        "version": {
          "withMetadata": "1c6a0368ea50095057e88dbfc4ceaa7d679ce04bdfe4a8119b51b7f8d4399b94",
          "withoutMetadata": "228003c6d52309e8295e62d877f6a7452466525a1161928940ffe90b0b225a9a",
          "linkedWithoutMetadata": "228003c6d52309e8295e62d877f6a7452466525a1161928940ffe90b0b225a9a"
        },
        "inherit": [
          "UnlockOwnable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "initializeProxyAdmin()",
          "publicLockVersions(address)",
          "publicLockImpls(uint16)",
          "addLockTemplate(address,uint16)",
          "createLock(bytes)",
          "upgradeLock(address payable,uint16)",
          "computeAvailableDiscountFor(address,uint256)",
          "recordKeyPurchase(uint256,address)",
          "recordConsumedDiscount(uint256,uint256)",
          "unlockVersion()",
          "configUnlock(address,address,uint256,string,string,uint256)",
          "setLockTemplate(address)",
          "setOracle(address,address)",
          "resetTrackedValue(uint256,uint256)",
          "getGlobalBaseTokenURI()",
          "getGlobalTokenSymbol()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Unlock",
              "label": "grossNetworkProduct",
              "type": "t_uint256",
              "src": "contracts/Unlock.sol:63"
            },
            {
              "contract": "Unlock",
              "label": "totalDiscountGranted",
              "type": "t_uint256",
              "src": "contracts/Unlock.sol:65"
            },
            {
              "contract": "Unlock",
              "label": "locks",
              "type": "t_mapping(t_address,t_struct(LockBalances)8392_storage)",
              "src": "contracts/Unlock.sol:68"
            },
            {
              "contract": "Unlock",
              "label": "globalBaseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/Unlock.sol:72"
            },
            {
              "contract": "Unlock",
              "label": "globalTokenSymbol",
              "type": "t_string_storage",
              "src": "contracts/Unlock.sol:76"
            },
            {
              "contract": "Unlock",
              "label": "publicLockAddress",
              "type": "t_address",
              "src": "contracts/Unlock.sol:79"
            },
            {
              "contract": "Unlock",
              "label": "uniswapOracles",
              "type": "t_mapping(t_address,t_contract(IUniswapOracle)22135)",
              "src": "contracts/Unlock.sol:83"
            },
            {
              "contract": "Unlock",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Unlock.sol:86"
            },
            {
              "contract": "Unlock",
              "label": "udt",
              "type": "t_address",
              "src": "contracts/Unlock.sol:89"
            },
            {
              "contract": "Unlock",
              "label": "estimatedGasForPurchase",
              "type": "t_uint256",
              "src": "contracts/Unlock.sol:92"
            },
            {
              "contract": "Unlock",
              "label": "chainId",
              "type": "t_uint256",
              "src": "contracts/Unlock.sol:95"
            },
            {
              "contract": "Unlock",
              "label": "proxyAdminAddress",
              "type": "t_address",
              "src": "contracts/Unlock.sol:98"
            },
            {
              "contract": "Unlock",
              "label": "proxyAdmin",
              "type": "t_contract(ProxyAdmin)7692",
              "src": "contracts/Unlock.sol:99"
            },
            {
              "contract": "Unlock",
              "label": "_publicLockVersions",
              "type": "t_mapping(t_address,t_uint16)",
              "src": "contracts/Unlock.sol:102"
            },
            {
              "contract": "Unlock",
              "label": "_publicLockImpls",
              "type": "t_mapping(t_uint16,t_address)",
              "src": "contracts/Unlock.sol:103"
            },
            {
              "contract": "Unlock",
              "label": "publicLockLatestVersion",
              "type": "t_uint16",
              "src": "contracts/Unlock.sol:104"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(LockBalances)8392_storage)": {
              "label": "mapping(address => struct Unlock.LockBalances)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LockBalances)8392_storage": {
              "label": "struct Unlock.LockBalances",
              "members": [
                {
                  "label": "deployed",
                  "type": "t_bool"
                },
                {
                  "label": "totalSales",
                  "type": "t_uint256"
                },
                {
                  "label": "yieldedDiscountTokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_contract(IUniswapOracle)22135)": {
              "label": "mapping(address => contract IUniswapOracle)"
            },
            "t_contract(IUniswapOracle)22135": {
              "label": "contract IUniswapOracle"
            },
            "t_contract(ProxyAdmin)7692": {
              "label": "contract ProxyAdmin"
            },
            "t_mapping(t_address,t_uint16)": {
              "label": "mapping(address => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_uint16,t_address)": {
              "label": "mapping(uint16 => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UnlockProtocolGovernor": {
        "src": "contracts/UnlockProtocolGovernor.sol:11",
        "version": {
          "withMetadata": "8666e650ef7b6299f7a8960477b8172eda4c4f6876a00d623fac1eae198d3f3b",
          "withoutMetadata": "00665921dd4092e5a592c018673dd289594b03e02406f5a1dc23732c4fd55110",
          "linkedWithoutMetadata": "00665921dd4092e5a592c018673dd289594b03e02406f5a1dc23732c4fd55110"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCountingSimpleUpgradeable",
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setQuorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UnlockProtocolGovernor",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "contracts/UnlockProtocolGovernor.sol:18"
            },
            {
              "contract": "UnlockProtocolGovernor",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "contracts/UnlockProtocolGovernor.sol:19"
            },
            {
              "contract": "UnlockProtocolGovernor",
              "label": "_quorum",
              "type": "t_uint256",
              "src": "contracts/UnlockProtocolGovernor.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UnlockProtocolTimelock": {
        "src": "contracts/UnlockProtocolTimelock.sol:6",
        "version": {
          "withMetadata": "1d61c84fd0a560c0d111bc848753303d1c090db7e162af56cd075bdf50b712f6",
          "withoutMetadata": "e5288b9e5b584f637445a56288bf8f82e5e05335b3cc8f7b8253c6bf5d8bdefb",
          "linkedWithoutMetadata": "e5288b9e5b584f637445a56288bf8f82e5e05335b3cc8f7b8253c6bf5d8bdefb"
        },
        "inherit": [
          "TimelockControllerUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UnlockUtils": {
        "src": "contracts/UnlockUtils.sol:8",
        "version": {
          "withMetadata": "c33f4c632c9f26c56c4725e365b56a52988eeb0b5418d3a0c7e80bc3fcb77810",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMintableERC20": {
        "src": "contracts/interfaces/IMintableERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "totalSupply()",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPublicLock": {
        "src": "contracts/interfaces/IPublicLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,uint256,address,uint256,uint256,string)",
          "DEFAULT_ADMIN_ROLE()",
          "KEY_GRANTER_ROLE()",
          "LOCK_MANAGER_ROLE()",
          "publicLockVersion()",
          "disableLock()",
          "withdraw(address,uint256)",
          "approveBeneficiary(address,uint256)",
          "updateKeyPricing(uint256,address)",
          "updateBeneficiary(address)",
          "getHasValidKey(address)",
          "getTokenIdFor(address)",
          "keyExpirationTimestampFor(address)",
          "numberOfOwners()",
          "updateLockName(string)",
          "updateLockSymbol(string)",
          "symbol()",
          "setBaseTokenURI(string)",
          "tokenURI(uint256)",
          "setEventHooks(address,address)",
          "grantKeys(address[],uint256[],address[])",
          "purchase(uint256,address,address,bytes)",
          "purchasePriceFor(address,address,bytes)",
          "updateTransferFee(uint256)",
          "getTransferFee(address,uint256)",
          "expireAndRefundFor(address,uint256)",
          "cancelAndRefund(uint256)",
          "updateRefundPenalty(uint256,uint256)",
          "getCancelAndRefundValueFor(address)",
          "addKeyGranter(address)",
          "addLockManager(address)",
          "isKeyGranter(address)",
          "isLockManager(address)",
          "onKeyPurchaseHook()",
          "onKeyCancelHook()",
          "revokeKeyGranter(address)",
          "renounceLockManager()",
          "beneficiary()",
          "expirationDuration()",
          "freeTrialLength()",
          "isAlive()",
          "keyPrice()",
          "maxNumberOfKeys()",
          "owners(uint256)",
          "refundPenaltyBasisPoints()",
          "tokenAddress()",
          "transferFeeBasisPoints()",
          "unlockProtocol()",
          "keyManagerOf(uint256)",
          "shareKey(address,uint256,uint256)",
          "setKeyManagerOf(uint256,address)",
          "name()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "hasRole(bytes32,address)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUnlock": {
        "src": "contracts/interfaces/IUnlock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "initializeProxyAdmin()",
          "proxyAdminAddress()",
          "createLock(uint256,address,uint256,uint256,string,bytes12)",
          "upgradeLock(address payable,uint16)",
          "recordKeyPurchase(uint256,address)",
          "recordConsumedDiscount(uint256,uint256)",
          "computeAvailableDiscountFor(address,uint256)",
          "globalBaseTokenURI()",
          "getGlobalBaseTokenURI()",
          "globalTokenSymbol()",
          "chainId()",
          "getGlobalTokenSymbol()",
          "configUnlock(address,address,uint256,string,string,uint256)",
          "addLockTemplate(address,uint16)",
          "publicLockImpls(uint16)",
          "publicLockVersions(address)",
          "publicLockLatestVersion()",
          "setLockTemplate(address payable)",
          "resetTrackedValue(uint256,uint256)",
          "grossNetworkProduct()",
          "totalDiscountGranted()",
          "locks(address)",
          "publicLockAddress()",
          "uniswapOracles(address)",
          "weth()",
          "udt()",
          "estimatedGasForPurchase()",
          "unlockVersion()",
          "setOracle(address,address)",
          "__initializeOwnable(address)",
          "isOwner()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILockKeyCancelHook": {
        "src": "contracts/interfaces/hooks/ILockKeyCancelHook.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onKeyCancel(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILockKeyPurchaseHook": {
        "src": "contracts/interfaces/hooks/ILockKeyPurchaseHook.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "keyPurchasePrice(address,address,address,bytes)",
          "onKeyPurchase(address,address,address,bytes,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MixinDisable": {
        "src": "contracts/mixins/MixinDisable.sol:14",
        "version": {
          "withMetadata": "8804f35882f02c4ee58c10a3b621696b214af43e64fe073ba10e189e4c1eb7d9",
          "withoutMetadata": "5817e7fcf72c90e2c9c58bb9ceb9e2e182babb12e119aeff3f1e31e383915521",
          "linkedWithoutMetadata": "5817e7fcf72c90e2c9c58bb9ceb9e2e182babb12e119aeff3f1e31e383915521"
        },
        "inherit": [
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "disableLock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MixinDisable",
              "label": "isAlive",
              "type": "t_bool",
              "src": "contracts/mixins/MixinDisable.sol:19"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MixinERC721Enumerable": {
        "src": "contracts/mixins/MixinERC721Enumerable.sol:13",
        "version": {
          "withMetadata": "89af4ad984d41a00274ca9254d4928aa4e48597747f1f6528c8b17f40dbd3b1b",
          "withoutMetadata": "2d2a35951a9f51fadff435ba9394a97481f09a3b53521ad18ea22120460d5b79",
          "linkedWithoutMetadata": "2d2a35951a9f51fadff435ba9394a97481f09a3b53521ad18ea22120460d5b79"
        },
        "inherit": [
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165StorageUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "tokenByIndex(uint256)",
          "tokenOfOwnerByIndex(address,uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MixinFunds": {
        "src": "contracts/mixins/MixinFunds.sol:13",
        "version": {
          "withMetadata": "94767a08955c4ebd434f0141c0236c8614c804f2b7c73e9990728e76440074fa",
          "withoutMetadata": "8eca8d7cf04b5ba779eba34f8d1f4f133019ed0a381e1b319f48ad14c030844d",
          "linkedWithoutMetadata": "8eca8d7cf04b5ba779eba34f8d1f4f133019ed0a381e1b319f48ad14c030844d"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MixinFunds",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/mixins/MixinFunds.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MixinGrantKeys": {
        "src": "contracts/mixins/MixinGrantKeys.sol:14",
        "version": {
          "withMetadata": "a195cda3538da02bcda5c77a33a5f2957afe14172f5fb549a77baa1e078c9a65",
          "withoutMetadata": "8c45657fb63e405d3b9cc776177256310f6f260a88e109ec690b14fd79a928f4",
          "linkedWithoutMetadata": "8c45657fb63e405d3b9cc776177256310f6f260a88e109ec690b14fd79a928f4"
        },
        "inherit": [
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "grantKeys(address[],uint256[],address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MixinKeys": {
        "src": "contracts/mixins/MixinKeys.sol:14",
        "version": {
          "withMetadata": "e576832b8b9986f50bdc6f43ddf9ea86a09033c1e0d303125c9c23c6fc0f5e60",
          "withoutMetadata": "0d64e40ac701004d1b91285e636449fa22b063261430eebeaf234f20d6b661a2",
          "linkedWithoutMetadata": "0d64e40ac701004d1b91285e636449fa22b063261430eebeaf234f20d6b661a2"
        },
        "inherit": [
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "getHasValidKey(address)",
          "getTokenIdFor(address)",
          "keyExpirationTimestampFor(address)",
          "numberOfOwners()",
          "ownerOf(uint256)",
          "setKeyManagerOf(uint256,address)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MixinKeys",
              "label": "keyByOwner",
              "type": "t_mapping(t_address,t_struct(Key)11047_storage)",
              "src": "contracts/mixins/MixinKeys.sol:40"
            },
            {
              "contract": "MixinKeys",
              "label": "_ownerOf",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/mixins/MixinKeys.sol:46"
            },
            {
              "contract": "MixinKeys",
              "label": "owners",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/mixins/MixinKeys.sol:50"
            },
            {
              "contract": "MixinKeys",
              "label": "keyManagerOf",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/mixins/MixinKeys.sol:55"
            },
            {
              "contract": "MixinKeys",
              "label": "approved",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/mixins/MixinKeys.sol:62"
            },
            {
              "contract": "MixinKeys",
              "label": "managerToOperatorApproved",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/mixins/MixinKeys.sol:69"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Key)11047_storage)": {
              "label": "mapping(address => struct MixinKeys.Key)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Key)11047_storage": {
              "label": "struct MixinKeys.Key",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256"
                },
                {
                  "label": "expirationTimestamp",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MixinLockCore": {
        "src": "contracts/mixins/MixinLockCore.sol:20",
        "version": {
          "withMetadata": "5c0a929d87ea56210db6ee5c00dd8c04ff6b7c7db73b85941eb0682a4163f00f",
          "withoutMetadata": "b11409749912fb1c9eda67faab35c0cc8c17dbbcaaccdf4bd8d61b3f6edc68df",
          "linkedWithoutMetadata": "b11409749912fb1c9eda67faab35c0cc8c17dbbcaaccdf4bd8d61b3f6edc68df"
        },
        "inherit": [
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [
          "publicLockVersion()",
          "withdraw(address,uint256)",
          "updateKeyPricing(uint256,address)",
          "updateBeneficiary(address payable)",
          "setEventHooks(address,address)",
          "totalSupply()",
          "approveBeneficiary(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MixinLockCore",
              "label": "unlockProtocol",
              "type": "t_contract(IUnlock)10643",
              "src": "contracts/mixins/MixinLockCore.sol:58"
            },
            {
              "contract": "MixinLockCore",
              "label": "expirationDuration",
              "type": "t_uint256",
              "src": "contracts/mixins/MixinLockCore.sol:63"
            },
            {
              "contract": "MixinLockCore",
              "label": "keyPrice",
              "type": "t_uint256",
              "src": "contracts/mixins/MixinLockCore.sol:67"
            },
            {
              "contract": "MixinLockCore",
              "label": "maxNumberOfKeys",
              "type": "t_uint256",
              "src": "contracts/mixins/MixinLockCore.sol:70"
            },
            {
              "contract": "MixinLockCore",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/mixins/MixinLockCore.sol:73"
            },
            {
              "contract": "MixinLockCore",
              "label": "beneficiary",
              "type": "t_address_payable",
              "src": "contracts/mixins/MixinLockCore.sol:76"
            },
            {
              "contract": "MixinLockCore",
              "label": "onKeyPurchaseHook",
              "type": "t_contract(ILockKeyPurchaseHook)10691",
              "src": "contracts/mixins/MixinLockCore.sol:81"
            },
            {
              "contract": "MixinLockCore",
              "label": "onKeyCancelHook",
              "type": "t_contract(ILockKeyCancelHook)10657",
              "src": "contracts/mixins/MixinLockCore.sol:82"
            }
          ],
          "types": {
            "t_contract(IUnlock)10643": {
              "label": "contract IUnlock"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ILockKeyPurchaseHook)10691": {
              "label": "contract ILockKeyPurchaseHook"
            },
            "t_contract(ILockKeyCancelHook)10657": {
              "label": "contract ILockKeyCancelHook"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MixinLockMetadata": {
        "src": "contracts/mixins/MixinLockMetadata.sol:17",
        "version": {
          "withMetadata": "c4b088bbe4e1fb66e1a2f3a3c2150f27756cd96b7f6d1da310e68469bf8fe9d6",
          "withoutMetadata": "52be4c3b33072cb39e0da80dddfcbc5f03d2390f21bb7cb1fea553a32845a867",
          "linkedWithoutMetadata": "52be4c3b33072cb39e0da80dddfcbc5f03d2390f21bb7cb1fea553a32845a867"
        },
        "inherit": [
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165StorageUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "UnlockUtils"
        ],
        "methods": [
          "updateLockName(string)",
          "updateLockSymbol(string)",
          "symbol()",
          "setBaseTokenURI(string)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MixinLockMetadata",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/mixins/MixinLockMetadata.sol:28"
            },
            {
              "contract": "MixinLockMetadata",
              "label": "lockSymbol",
              "type": "t_string_storage",
              "src": "contracts/mixins/MixinLockMetadata.sol:31"
            },
            {
              "contract": "MixinLockMetadata",
              "label": "baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/mixins/MixinLockMetadata.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MixinPurchase": {
        "src": "contracts/mixins/MixinPurchase.sol:16",
        "version": {
          "withMetadata": "5d99a0846839bb98d09ca704428a6e0fc33c7133a92fb3530852d164560cebcd",
          "withoutMetadata": "9c87bd641ebeb64b2497ff644a81c77d3d1355617b68990b3b96ea87551858e8",
          "linkedWithoutMetadata": "9c87bd641ebeb64b2497ff644a81c77d3d1355617b68990b3b96ea87551858e8"
        },
        "inherit": [
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "purchase(uint256,address,address,bytes)",
          "purchasePriceFor(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MixinRefunds": {
        "src": "contracts/mixins/MixinRefunds.sol:10",
        "version": {
          "withMetadata": "f0da1ae3c13b8c00d7fc93028259af1389a2cea2cbb836504b6d4a1ec0aa9145",
          "withoutMetadata": "e339cbf22688b9c7d9d923851c21171685a815ef08c05c4b447c892aaccbd594",
          "linkedWithoutMetadata": "e339cbf22688b9c7d9d923851c21171685a815ef08c05c4b447c892aaccbd594"
        },
        "inherit": [
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "expireAndRefundFor(address payable,uint256)",
          "cancelAndRefund(uint256)",
          "updateRefundPenalty(uint256,uint256)",
          "getCancelAndRefundValueFor(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MixinRefunds",
              "label": "refundPenaltyBasisPoints",
              "type": "t_uint256",
              "src": "contracts/mixins/MixinRefunds.sol:18"
            },
            {
              "contract": "MixinRefunds",
              "label": "freeTrialLength",
              "type": "t_uint256",
              "src": "contracts/mixins/MixinRefunds.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MixinRoles": {
        "src": "contracts/mixins/MixinRoles.sol:9",
        "version": {
          "withMetadata": "f332ea0bce663a7c056933566046a497520fc5c84b3822648c5416e5efdc0fcc",
          "withoutMetadata": "aa103df0ea363fa798d0bce6bb5e1b25045dcbe7553862d1de9921911ec49d10",
          "linkedWithoutMetadata": "aa103df0ea363fa798d0bce6bb5e1b25045dcbe7553862d1de9921911ec49d10"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isLockManager(address)",
          "addLockManager(address)",
          "renounceLockManager()",
          "isKeyGranter(address)",
          "addKeyGranter(address)",
          "revokeKeyGranter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MixinTransfer": {
        "src": "contracts/mixins/MixinTransfer.sol:20",
        "version": {
          "withMetadata": "e65dabda8cd2027fb359040b7511f4c02b84c7b1e0a518759cf1c7424f9d02b2",
          "withoutMetadata": "ec777da25956598a31019e710a2edec2b1143a547d005ebb3830d015e42da1cf",
          "linkedWithoutMetadata": "ec777da25956598a31019e710a2edec2b1143a547d005ebb3830d015e42da1cf"
        },
        "inherit": [
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [
          "shareKey(address,uint256,uint256)",
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "updateTransferFee(uint256)",
          "getTransferFee(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MixinTransfer",
              "label": "transferFeeBasisPoints",
              "type": "t_uint256",
              "src": "contracts/mixins/MixinTransfer.sol:38"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "KeyManagerMock": {
        "src": "contracts/mocks/KeyManagerMock.sol:7",
        "version": {
          "withMetadata": "d7ee916bd8f28119b400f2f596d4074aaadf66d93fe92b0292eaff231c997940",
          "withoutMetadata": "b4eef525e9dad50e3c7a0b660f380d7a64e9d06dc34d76bbb0bfc37b85d26a46",
          "linkedWithoutMetadata": "b4eef525e9dad50e3c7a0b660f380d7a64e9d06dc34d76bbb0bfc37b85d26a46"
        },
        "inherit": [
          "PublicLock",
          "MixinRefunds",
          "MixinTransfer",
          "MixinPurchase",
          "MixinGrantKeys",
          "MixinERC721Enumerable",
          "MixinLockMetadata",
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165StorageUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isKeyManager(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimeMachineMock": {
        "src": "contracts/mocks/TimeMachineMock.sol:6",
        "version": {
          "withMetadata": "955f6364b641a1aacc92efd9dfa1a8b6153aa0068c6166a750512e111c7fa5e8",
          "withoutMetadata": "019013b425f7ce0d1fbe51e6307be5c2843f0d80aaf7e7c25fa3071c8050139e",
          "linkedWithoutMetadata": "019013b425f7ce0d1fbe51e6307be5c2843f0d80aaf7e7c25fa3071c8050139e"
        },
        "inherit": [
          "PublicLock",
          "MixinRefunds",
          "MixinTransfer",
          "MixinPurchase",
          "MixinGrantKeys",
          "MixinERC721Enumerable",
          "MixinLockMetadata",
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165StorageUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timeMachine(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UnlockUtilsMock": {
        "src": "contracts/mocks/UnlockUtilsMock.sol:8",
        "version": {
          "withMetadata": "942ddc5736b7f1830e5e28692f389b5fb9daeafeb6ac84d76356d70d2af55d47",
          "withoutMetadata": "62c171fb485a11222993d637f9f2ca21403a31b93e66e09768e44420bcf994b7",
          "linkedWithoutMetadata": "62c171fb485a11222993d637f9f2ca21403a31b93e66e09768e44420bcf994b7"
        },
        "inherit": [],
        "libraries": [
          "UnlockUtils"
        ],
        "methods": [
          "strConcat(string,string,string,string)",
          "uint2Str(uint256)",
          "address2Str(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestProxyAdmin": {
        "src": "contracts/test-artifacts/TestProxyAdmin.sol:6",
        "version": {
          "withMetadata": "c6a03fa1b3900c3dc0186acf535dfd10d4878df7992c4a26ca15011b1271b34e",
          "withoutMetadata": "a686f647c7a40e80f315b418f84e29466c64bde047596badb2f85ebeb04e5591",
          "linkedWithoutMetadata": "a686f647c7a40e80f315b418f84e29466c64bde047596badb2f85ebeb04e5591"
        },
        "inherit": [
          "ProxyAdmin",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITestPublicLockUpgraded": {
        "src": "contracts/test-artifacts/TestPublicLockUpgraded.sol:16",
        "inherit": [
          "IPublicLock"
        ],
        "libraries": [],
        "methods": [
          "sayHello()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestPublicLockUpgraded": {
        "src": "contracts/test-artifacts/TestPublicLockUpgraded.sol:8",
        "version": {
          "withMetadata": "bea3482285b9fdab8398adaa6111cd4d462a14fbef222f8bb8cbfd5487c590de",
          "withoutMetadata": "dded06dfe02dbc3c3304a8da659f96b8c2cd3cb190944aa07244600b57e9114b",
          "linkedWithoutMetadata": "dded06dfe02dbc3c3304a8da659f96b8c2cd3cb190944aa07244600b57e9114b"
        },
        "inherit": [
          "PublicLock",
          "MixinRefunds",
          "MixinTransfer",
          "MixinPurchase",
          "MixinGrantKeys",
          "MixinERC721Enumerable",
          "MixinLockMetadata",
          "MixinKeys",
          "MixinLockCore",
          "MixinDisable",
          "MixinFunds",
          "MixinRoles",
          "AccessControlUpgradeable",
          "ERC165StorageUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "sayHello()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UnlockOwnable": {
        "src": "contracts/utils/UnlockOwnable.sol:22",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__initializeOwnable(address)",
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UnlockOwnable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/utils/UnlockOwnable.sol:23"
            },
            {
              "contract": "UnlockOwnable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/utils/UnlockOwnable.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapOracle": {
        "src": "hardlydifficult-eth/contracts/protocols/Uniswap/IUniswapOracle.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PERIOD()",
          "factory()",
          "update(address,address)",
          "consult(address,uint256,address)",
          "updateAndConsult(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ContextUpgradeable": {
        "src": "contracts/ERC20Patched.sol:276",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/ERC20Patched.sol:290"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "contracts/ERC20Patched.sol:927",
        "version": {
          "withMetadata": "bdc0a05ef79a5e4fab55e2c4e0be543e2153208af00b1951a9f2babceda325d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "contracts/ERC20Patched.sol:665",
        "version": {
          "withMetadata": "566daa87ea2a7989824f7bbddd6d6c7d2e5639b94238eaeb6827c371fd6da122",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "contracts/ERC20Patched.sol:820",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "contracts/ERC20Patched.sol:822"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "contracts/ERC20Patched.sol:823"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/ERC20Patched.sol:911"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20DetailedUpgradeable": {
        "src": "contracts/ERC20Patched.sol:1715",
        "inherit": [
          "IERC20Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20DetailedUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/ERC20Patched.sol:1716"
            },
            {
              "contract": "ERC20DetailedUpgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20Patched.sol:1717"
            },
            {
              "contract": "ERC20DetailedUpgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/ERC20Patched.sol:1718"
            },
            {
              "contract": "ERC20DetailedUpgradeable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/ERC20Patched.sol:1738"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20MintableUpgradeable": {
        "src": "contracts/ERC20Patched.sol:1741",
        "inherit": [
          "MinterRoleUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20MintableUpgradeable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/ERC20Patched.sol:1751"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "contracts/ERC20Patched.sol:978",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)1203_storage)",
              "src": "contracts/ERC20Patched.sol:981"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts/ERC20Patched.sol:984"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "contracts/ERC20Patched.sol:1054"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)1203_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)1203_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "contracts/ERC20Patched.sol:325",
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20Patched.sol:326"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20Patched.sol:328"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20Patched.sol:330"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/ERC20Patched.sol:651"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesCompUpgradeable": {
        "src": "contracts/ERC20Patched.sol:1639",
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable"
        ],
        "methods": [
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesCompUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/ERC20Patched.sol:1662"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "contracts/ERC20Patched.sol:1369",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/ERC20Patched.sol:1388"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)",
              "src": "contracts/ERC20Patched.sol:1389"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)2008_storage)dyn_storage",
              "src": "contracts/ERC20Patched.sol:1390"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "contracts/ERC20Patched.sol:1611"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)2008_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)2008_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "contracts/ERC20Patched.sol:196",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "contracts/ERC20Patched.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "contracts/ERC20Patched.sol:111",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "contracts/ERC20Patched.sol:230",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/ERC20Patched.sol:234"
            },
            {
              "contract": "Initializable",
              "label": "initializing",
              "type": "t_bool",
              "src": "contracts/ERC20Patched.sol:239"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "contracts/ERC20Patched.sol:1065",
        "version": {
          "withMetadata": "bb07c51d773e5fc9438d21096825cad51b9588c5fb27abd24687b7d68393b3d6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MinterRoleUpgradeable": {
        "src": "contracts/ERC20Patched.sol:1671",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "initialize(address)",
          "isMinter(address)",
          "addMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MinterRoleUpgradeable",
              "label": "_minters",
              "type": "t_struct(Role)7_storage",
              "src": "contracts/ERC20Patched.sol:1677"
            },
            {
              "contract": "MinterRoleUpgradeable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "contracts/ERC20Patched.sol:1712"
            }
          ],
          "types": {
            "t_struct(Role)7_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts/ERC20Patched.sol:11",
        "version": {
          "withMetadata": "46098645845b0ee7eb9ff1a306a5ad9666d3574988d02a68de90efb1532010de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "contracts/ERC20Patched.sol:1121",
        "version": {
          "withMetadata": "297976422b9eb7d1d79856ea6be0c76f539f1691bfe6948b2140bfd73513d160",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UnlockDiscountTokenV2": {
        "src": "contracts/UnlockDiscountTokenV2.sol:10",
        "version": {
          "withMetadata": "18964e38f300bf6025491eba815e4699d484838aa9d91cad9ec7ad1a21c632dc",
          "withoutMetadata": "7747a56cb5fbae626c485b00b3831ac17f5a3e93b019220e85448f1f8a758bd5",
          "linkedWithoutMetadata": "7747a56cb5fbae626c485b00b3831ac17f5a3e93b019220e85448f1f8a758bd5"
        },
        "inherit": [
          "ERC20VotesCompUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20DetailedUpgradeable",
          "ERC20MintableUpgradeable",
          "MinterRoleUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "initialize2()",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/upgrades/contracts/Initializable.sol:16",
        "version": {
          "withMetadata": "68c502e3c5da4612439a3e9efc48fbe54f339e684b2a454aee91962ae15c1723",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "initialized",
              "type": "t_bool",
              "src": "@openzeppelin/upgrades/contracts/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "initializing",
              "type": "t_bool",
              "src": "@openzeppelin/upgrades/contracts/Initializable.sol:26"
            },
            {
              "contract": "Initializable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/upgrades/contracts/Initializable.sol:61"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TestNoop": {
        "src": "contracts/test-artifacts/TestNoop.sol:11",
        "version": {
          "withMetadata": "30eec870c881d482199ec2a658a72e216fe663f63dc19795da314ee59fb81020",
          "withoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0",
          "linkedWithoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:15",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol:7",
        "version": {
          "withMetadata": "f1b9d86becf701e760875d944a79c7454a29dc3c5854012ec6f559b3485c111a",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MinterRole": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol:8",
        "version": {
          "withMetadata": "91c308497cc4aaf07f05871a7c0a9234ff8765ba0632806e4b23ddc216831f3f",
          "withoutMetadata": "aba71a24b07a0dbbf7252158b2ba8f9ef4f94773e0589919d37a7ac1fb65b896",
          "linkedWithoutMetadata": "aba71a24b07a0dbbf7252158b2ba8f9ef4f94773e0589919d37a7ac1fb65b896"
        },
        "inherit": [
          "Context",
          "Initializable"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "initialize(address)",
          "isMinter(address)",
          "addMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)36_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol:14"
            },
            {
              "contract": "MinterRole",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol:49"
            }
          ],
          "types": {
            "t_struct(Role)36_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PauserRole": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol:8",
        "version": {
          "withMetadata": "48f0813bce3f54f1c7db654370c869cae91acb2f7798e1d3219a47f4f9350e86",
          "withoutMetadata": "8b57a7d2eacacb5b030dc5eaa5919684ae304a29581c2f631cda6407a50bd1f8",
          "linkedWithoutMetadata": "8b57a7d2eacacb5b030dc5eaa5919684ae304a29581c2f631cda6407a50bd1f8"
        },
        "inherit": [
          "Context",
          "Initializable"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "initialize(address)",
          "isPauser(address)",
          "addPauser(address)",
          "renouncePauser()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PauserRole",
              "label": "_pausers",
              "type": "t_struct(Role)36_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol:14"
            },
            {
              "contract": "PauserRole",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol:49"
            }
          ],
          "types": {
            "t_struct(Role)36_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol:17",
        "version": {
          "withMetadata": "50123f65fb13ff4bb25c5b1c3be086895f1c0ebaeb32a41791b754297fa447d0",
          "withoutMetadata": "8d49eec789b6901b9f94cf6211cd3f1d2eb541eba14aa9b1a6962e6bf28dddb0",
          "linkedWithoutMetadata": "8d49eec789b6901b9f94cf6211cd3f1d2eb541eba14aa9b1a6962e6bf28dddb0"
        },
        "inherit": [
          "PauserRole",
          "Context",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "paused()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol:28"
            },
            {
              "contract": "Pausable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol:79"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "679f9a9a3cd8e585cd6176615b9db36f2d9c085d14120e2dd4511140f31a37bc",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "3f29c5d2dd29582f17b4412090ba3f000be9a1c074bb00ba7bfc70e4394ee54c",
          "withoutMetadata": "c94637d822429452273f6eaa5719e973ce05e576149b0583f3ad3ca5c70722b7",
          "linkedWithoutMetadata": "c94637d822429452273f6eaa5719e973ce05e576149b0583f3ad3ca5c70722b7"
        },
        "inherit": [
          "IERC20",
          "Context",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:233"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol:9",
        "inherit": [
          "IERC20",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol:10"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol:11"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol:12"
            },
            {
              "contract": "ERC20Detailed",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol:56"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mintable": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol:13",
        "version": {
          "withMetadata": "ca1789a85d431fff10cd2d1d9f026c698f4fd7e15d11394e592b5edd5a8e43bc",
          "withoutMetadata": "e02b81b33ea9f72b4e2f93ad5c3b5d91a4f57a650a0ca781e4986a0daa70a19b",
          "linkedWithoutMetadata": "e02b81b33ea9f72b4e2f93ad5c3b5d91a4f57a650a0ca781e4986a0daa70a19b"
        },
        "inherit": [
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Mintable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol:15",
        "version": {
          "withMetadata": "128964fec49e538de58adffa9d373f759810e12919a86d017f54995cc33a37b9",
          "withoutMetadata": "5d85ce1fd81cc838166975b9d4246b1841baefbd3990302b82fbdfc6f31cc5ca",
          "linkedWithoutMetadata": "5d85ce1fd81cc838166975b9d4246b1841baefbd3990302b82fbdfc6f31cc5ca"
        },
        "inherit": [
          "Pausable",
          "PauserRole",
          "ERC20",
          "IERC20",
          "Context",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Pausable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/upgrades/contracts/Initializable.sol:16",
        "version": {
          "withMetadata": "3411cdd21f5ba2c0966828a9a62185048436b8e6ddbf562ee3c8a75362fa9a00",
          "withoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0",
          "linkedWithoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "initialized",
              "type": "t_bool",
              "src": "@openzeppelin/upgrades/contracts/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "initializing",
              "type": "t_bool",
              "src": "@openzeppelin/upgrades/contracts/Initializable.sol:26"
            },
            {
              "contract": "Initializable",
              "label": "______gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/upgrades/contracts/Initializable.sol:61"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UnlockDiscountToken": {
        "src": "contracts/UnlockDiscountToken.sol:12",
        "version": {
          "withMetadata": "d47e466d8fd5763dfed7e81b4a5e1e9d3037704e8a120e856aed6842affba275",
          "withoutMetadata": "722577680a5daeb5c5aafefa3e1cc575afc4ef4890b7fcf0c0e013088a5ece00",
          "linkedWithoutMetadata": "722577680a5daeb5c5aafefa3e1cc575afc4ef4890b7fcf0c0e013088a5ece00"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestErc20PausableToken": {
        "src": "contracts/test-artifacts/TestErc20PausableToken.sol:13",
        "version": {
          "withMetadata": "28444511e964a0d728af9af4f1d3feddd0a43fb846ef9e073197060767257f70",
          "withoutMetadata": "28444511e964a0d728af9af4f1d3feddd0a43fb846ef9e073197060767257f70",
          "linkedWithoutMetadata": "28444511e964a0d728af9af4f1d3feddd0a43fb846ef9e073197060767257f70"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "PauserRole",
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestErc20PausableToken",
            "src": "contracts/test-artifacts/TestErc20PausableToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TestErc20Noop": {
        "src": "contracts/test-artifacts/TestErc20Noop.sol:10",
        "version": {
          "withMetadata": "213228c14f0c381cd8ca2c42687cae73c376c18196da6e2084d37a7ff0e8893b",
          "withoutMetadata": "f32bfe4e51f85c216e0f7f7c2f5a42595dec55c2206119354b66a02dc26f2569",
          "linkedWithoutMetadata": "f32bfe4e51f85c216e0f7f7c2f5a42595dec55c2206119354b66a02dc26f2569"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "mint(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TestErc20Noop",
              "label": "suppressCompileWarning",
              "type": "t_uint256",
              "src": "contracts/test-artifacts/TestErc20Noop.sol:12"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/Migrations.sol:5",
        "version": {
          "withMetadata": "34ec9aa58775336b569bc8d2c77a9cc819d02e84457de037a4b015d67c75ff50",
          "withoutMetadata": "29bfac88a413d967eb1c1af34b128cede3426d52b93687f463028d503d332a87",
          "linkedWithoutMetadata": "29bfac88a413d967eb1c1af34b128cede3426d52b93687f463028d503d332a87"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)",
          "upgrade(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/Migrations.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Migrations.sol:6"
            },
            {
              "contract": "Migrations",
              "label": "lastCompletedMigration",
              "type": "t_uint256",
              "src": "contracts/Migrations.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPublicLock": {
        "src": "contracts/interfaces/IPublicLock.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,uint256,address,uint256,uint256,string)",
          "DEFAULT_ADMIN_ROLE()",
          "KEY_GRANTER_ROLE()",
          "LOCK_MANAGER_ROLE()",
          "publicLockVersion()",
          "disableLock()",
          "withdraw(address,uint256)",
          "approveBeneficiary(address,uint256)",
          "updateKeyPricing(uint256,address)",
          "updateBeneficiary(address)",
          "getHasValidKey(address)",
          "getTokenIdFor(address)",
          "keyExpirationTimestampFor(address)",
          "numberOfOwners()",
          "updateLockName(string)",
          "updateLockSymbol(string)",
          "symbol()",
          "setBaseTokenURI(string)",
          "tokenURI(uint256)",
          "setEventHooks(address,address)",
          "grantKeys(address[],uint256[],address[])",
          "purchase(uint256,address,address,bytes)",
          "purchasePriceFor(address,address,bytes)",
          "updateTransferFee(uint256)",
          "getTransferFee(address,uint256)",
          "expireAndRefundFor(address,uint256)",
          "cancelAndRefund(uint256)",
          "updateRefundPenalty(uint256,uint256)",
          "getCancelAndRefundValueFor(address)",
          "addKeyGranter(address)",
          "addLockManager(address)",
          "isKeyGranter(address)",
          "isLockManager(address)",
          "onKeyPurchaseHook()",
          "onKeyCancelHook()",
          "revokeKeyGranter(address)",
          "renounceLockManager()",
          "beneficiary()",
          "expirationDuration()",
          "freeTrialLength()",
          "isAlive()",
          "keyPrice()",
          "maxNumberOfKeys()",
          "owners(uint256)",
          "refundPenaltyBasisPoints()",
          "tokenAddress()",
          "transferFeeBasisPoints()",
          "unlockProtocol()",
          "keyManagerOf(uint256)",
          "shareKey(address,uint256,uint256)",
          "setKeyManagerOf(uint256,address)",
          "name()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "hasRole(bytes32,address)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILockKeyCancelHook": {
        "src": "contracts/interfaces/hooks/ILockKeyCancelHook.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onKeyCancel(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILockKeyPurchaseHook": {
        "src": "contracts/interfaces/hooks/ILockKeyPurchaseHook.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "keyPurchasePrice(address,address,address,bytes)",
          "onKeyPurchase(address,address,address,bytes,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestEventHooks": {
        "src": "contracts/test-artifacts/TestEventHooks.sol:12",
        "version": {
          "withMetadata": "bd546263272dc53bb55500b058336bb00d4970902c64f534bc54e1447986062c",
          "withoutMetadata": "30aff7eeb1c5b023993ab1cc7aa974cdd4f56ce3aaadb0802e53f314ebb4dd28",
          "linkedWithoutMetadata": "30aff7eeb1c5b023993ab1cc7aa974cdd4f56ce3aaadb0802e53f314ebb4dd28"
        },
        "inherit": [
          "ILockKeyCancelHook",
          "ILockKeyPurchaseHook"
        ],
        "libraries": [],
        "methods": [
          "configure(bool,uint256)",
          "onKeyPurchase(address,address,address,bytes,uint256,uint256)",
          "keyPurchasePrice(address,address,address,bytes)",
          "onKeyCancel(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TestEventHooks",
              "label": "discount",
              "type": "t_uint256",
              "src": "contracts/test-artifacts/TestEventHooks.sol:29"
            },
            {
              "contract": "TestEventHooks",
              "label": "isPurchaseSupported",
              "type": "t_bool",
              "src": "contracts/test-artifacts/TestEventHooks.sol:30"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}