/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DiamondFactoryContractInterface extends ethers.utils.Interface {
  functions: {
    "deployNewDiamond(address,tuple[])": FunctionFragment;
    "diamonds(uint256)": FunctionFragment;
    "getDiamondCount()": FunctionFragment;
    "isDiamond(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployNewDiamond",
    values: [
      string,
      {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamonds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiamondCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDiamond", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "deployNewDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDiamondCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDiamond", data: BytesLike): Result;

  events: {
    "DiamondCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCreated"): EventFragment;
}

export class DiamondFactoryContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamondFactoryContractInterface;

  functions: {
    deployNewDiamond(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployNewDiamond(address,tuple[])"(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "diamonds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDiamondCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDiamondCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isDiamond(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isDiamond(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  deployNewDiamond(
    _owner: string,
    _diamondCut: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployNewDiamond(address,tuple[])"(
    _owner: string,
    _diamondCut: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "diamonds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDiamondCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getDiamondCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  isDiamond(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isDiamond(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    deployNewDiamond(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    "deployNewDiamond(address,tuple[])"(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    diamonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "diamonds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDiamondCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDiamondCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDiamond(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isDiamond(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    DiamondCreated(
      tokenAddress: null
    ): TypedEventFilter<[string], { tokenAddress: string }>;
  };

  estimateGas: {
    deployNewDiamond(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployNewDiamond(address,tuple[])"(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "diamonds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDiamondCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDiamondCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDiamond(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isDiamond(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployNewDiamond(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployNewDiamond(address,tuple[])"(
      _owner: string,
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamonds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "diamonds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDiamondCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDiamondCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDiamond(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDiamond(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
