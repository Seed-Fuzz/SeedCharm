/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EthSingleTokenJoinInterface extends ethers.utils.Interface {
  functions: {
    "INTERMEDIATE_TOKEN()": FunctionFragment;
    "joinTokenEth(tuple)": FunctionFragment;
    "joinTokenSingle(tuple)": FunctionFragment;
    "uniSwapLikeRouter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INTERMEDIATE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinTokenEth",
    values: [
      {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTokenSingle",
    values: [
      {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniSwapLikeRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "INTERMEDIATE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinTokenEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinTokenSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniSwapLikeRouter",
    data: BytesLike
  ): Result;

  events: {};
}

export class EthSingleTokenJoin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EthSingleTokenJoinInterface;

  functions: {
    INTERMEDIATE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    "INTERMEDIATE_TOKEN()"(overrides?: CallOverrides): Promise<[string]>;

    joinTokenEth(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "joinTokenEth((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinTokenSingle(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "joinTokenSingle((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniSwapLikeRouter(overrides?: CallOverrides): Promise<[string]>;

    "uniSwapLikeRouter()"(overrides?: CallOverrides): Promise<[string]>;
  };

  INTERMEDIATE_TOKEN(overrides?: CallOverrides): Promise<string>;

  "INTERMEDIATE_TOKEN()"(overrides?: CallOverrides): Promise<string>;

  joinTokenEth(
    _joinTokenStruct: {
      inputToken: string;
      outputBasket: string;
      inputAmount: BigNumberish;
      outputAmount: BigNumberish;
      deadline: BigNumberish;
      referral: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "joinTokenEth((address,address,uint256,uint256,uint256,uint16))"(
    _joinTokenStruct: {
      inputToken: string;
      outputBasket: string;
      inputAmount: BigNumberish;
      outputAmount: BigNumberish;
      deadline: BigNumberish;
      referral: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinTokenSingle(
    _joinTokenStruct: {
      inputToken: string;
      outputBasket: string;
      inputAmount: BigNumberish;
      outputAmount: BigNumberish;
      deadline: BigNumberish;
      referral: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "joinTokenSingle((address,address,uint256,uint256,uint256,uint16))"(
    _joinTokenStruct: {
      inputToken: string;
      outputBasket: string;
      inputAmount: BigNumberish;
      outputAmount: BigNumberish;
      deadline: BigNumberish;
      referral: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniSwapLikeRouter(overrides?: CallOverrides): Promise<string>;

  "uniSwapLikeRouter()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    INTERMEDIATE_TOKEN(overrides?: CallOverrides): Promise<string>;

    "INTERMEDIATE_TOKEN()"(overrides?: CallOverrides): Promise<string>;

    joinTokenEth(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "joinTokenEth((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    joinTokenSingle(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "joinTokenSingle((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    uniSwapLikeRouter(overrides?: CallOverrides): Promise<string>;

    "uniSwapLikeRouter()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    INTERMEDIATE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "INTERMEDIATE_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    joinTokenEth(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "joinTokenEth((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinTokenSingle(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "joinTokenSingle((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniSwapLikeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "uniSwapLikeRouter()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    INTERMEDIATE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "INTERMEDIATE_TOKEN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinTokenEth(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "joinTokenEth((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinTokenSingle(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "joinTokenSingle((address,address,uint256,uint256,uint256,uint16))"(
      _joinTokenStruct: {
        inputToken: string;
        outputBasket: string;
        inputAmount: BigNumberish;
        outputAmount: BigNumberish;
        deadline: BigNumberish;
        referral: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniSwapLikeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniSwapLikeRouter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
