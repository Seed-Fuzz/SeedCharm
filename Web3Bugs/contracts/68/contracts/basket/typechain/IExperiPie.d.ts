/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IExperiPieInterface extends ethers.utils.Interface {
  functions: {
    "addCaller(address)": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balance(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "calcOutStandingAnnualizedFee()": FunctionFragment;
    "calcTokensForAmount(uint256)": FunctionFragment;
    "calcTokensForAmountExit(uint256)": FunctionFragment;
    "call(address[],bytes[],uint256[])": FunctionFragment;
    "callNoValue(address[],bytes[])": FunctionFragment;
    "canCall(address)": FunctionFragment;
    "chargeOutstandingAnnualizedFee()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "diamondCut(tuple[],address,bytes)": FunctionFragment;
    "exitPool(uint256,uint16)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getAnnualizedFee()": FunctionFragment;
    "getCallers()": FunctionFragment;
    "getCap()": FunctionFragment;
    "getEntryFee()": FunctionFragment;
    "getEntryFeeBeneficiaryShare()": FunctionFragment;
    "getExitFee()": FunctionFragment;
    "getExitFeeBeneficiaryShare()": FunctionFragment;
    "getFeeBeneficiary()": FunctionFragment;
    "getLock()": FunctionFragment;
    "getLockBlock()": FunctionFragment;
    "getTokenInPool(address)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "initialize(uint256,string,string)": FunctionFragment;
    "joinPool(uint256,uint16)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeCaller(address)": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "setAnnualizedFee(uint256)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setEntryFee(uint256)": FunctionFragment;
    "setEntryFeeBeneficiaryShare(uint256)": FunctionFragment;
    "setExitFee(uint256)": FunctionFragment;
    "setExitFeeBeneficiaryShare(uint256)": FunctionFragment;
    "setFeeBeneficiary(address)": FunctionFragment;
    "setLock(uint256)": FunctionFragment;
    "setName(string)": FunctionFragment;
    "setSymbol(string)": FunctionFragment;
    "singleCall(address,bytes,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addCaller", values: [string]): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutStandingAnnualizedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensForAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensForAmountExit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [string[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callNoValue",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "canCall", values: [string]): string;
  encodeFunctionData(
    functionFragment: "chargeOutstandingAnnualizedFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAnnualizedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCallers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEntryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryFeeBeneficiaryShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFeeBeneficiaryShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLockBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCaller",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "removeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAnnualizedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntryFeeBeneficiaryShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFeeBeneficiaryShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(functionFragment: "setSymbol", values: [string]): string;
  encodeFunctionData(
    functionFragment: "singleCall",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addCaller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcOutStandingAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensForAmountExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callNoValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chargeOutstandingAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCallers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntryFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSymbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "singleCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AnnualizedFeeSet(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Call(address,address,bytes,uint256)": EventFragment;
    "CallerAdded(address)": EventFragment;
    "CallerRemoved(address)": EventFragment;
    "CapSet(uint256)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "EntryFeeBeneficiaryShareSet(uint256)": EventFragment;
    "EntryFeeSet(uint256)": EventFragment;
    "ExitFeeBeneficiaryShareSet(uint256)": EventFragment;
    "ExitFeeSet(uint256)": EventFragment;
    "FeeBeneficiarySet(address)": EventFragment;
    "FeeCharged(uint256)": EventFragment;
    "LockSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolExited(address,uint256,uint16)": EventFragment;
    "PoolJoined(address,uint256,uint16)": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokenRemoved(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnnualizedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EntryFeeBeneficiaryShareSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntryFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitFeeBeneficiaryShareSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeBeneficiarySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IExperiPie extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExperiPieInterface;

  functions: {
    addCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balance(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcOutStandingAnnualizedFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canCall(_caller: string, overrides?: CallOverrides): Promise<[boolean]>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    chargeOutstandingAnnualizedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "diamondCut(tuple[],address,bytes)"(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exitPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[]
      ] & {
        facets_: ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[];
      }
    >;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[]
      ] & {
        facets_: ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[];
      }
    >;

    getAnnualizedFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getAnnualizedFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCallers(overrides?: CallOverrides): Promise<[string[]]>;

    "getCallers()"(overrides?: CallOverrides): Promise<[string[]]>;

    getCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntryFeeBeneficiaryShare(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getExitFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    getLock(overrides?: CallOverrides): Promise<[boolean]>;

    "getLock()"(overrides?: CallOverrides): Promise<[boolean]>;

    getLockBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenInPool(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    increaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(uint256,string,string)"(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "joinPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<[string] & { owner_: string }>;

    removeCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEntryFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExitFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLock(
      _lock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setName(string)"(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSymbol(
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSymbol(string)"(
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCaller(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addCaller(address)"(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balance(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcOutStandingAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

  "calcOutStandingAnnualizedFee()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokensForAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "calcTokensForAmount(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  calcTokensForAmountExit(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "calcTokensForAmountExit(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  call(
    _targets: string[],
    _calldata: BytesLike[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "call(address[],bytes[],uint256[])"(
    _targets: string[],
    _calldata: BytesLike[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callNoValue(
    _targets: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callNoValue(address[],bytes[])"(
    _targets: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canCall(_caller: string, overrides?: CallOverrides): Promise<boolean>;

  "canCall(address)"(
    _caller: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  chargeOutstandingAnnualizedFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "chargeOutstandingAnnualizedFee()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseApproval(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseApproval(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    }[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "diamondCut(tuple[],address,bytes)"(
    _diamondCut: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    }[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    _amount: BigNumberish,
    _referral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exitPool(uint256,uint16)"(
    _amount: BigNumberish,
    _referral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "facetAddress(bytes4)"(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<
    ([string, string[]] & {
      facetAddress: string;
      functionSelectors: string[];
    })[]
  >;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, string[]] & {
      facetAddress: string;
      functionSelectors: string[];
    })[]
  >;

  getAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getAnnualizedFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCallers(overrides?: CallOverrides): Promise<string[]>;

  "getCallers()"(overrides?: CallOverrides): Promise<string[]>;

  getCap(overrides?: CallOverrides): Promise<BigNumber>;

  "getCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEntryFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

  "getEntryFeeBeneficiaryShare()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

  "getExitFeeBeneficiaryShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeBeneficiary(overrides?: CallOverrides): Promise<string>;

  "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<string>;

  getLock(overrides?: CallOverrides): Promise<boolean>;

  "getLock()"(overrides?: CallOverrides): Promise<boolean>;

  getLockBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getLockBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenInPool(_token: string, overrides?: CallOverrides): Promise<boolean>;

  "getTokenInPool(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  "getTokens()"(overrides?: CallOverrides): Promise<string[]>;

  increaseApproval(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseApproval(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _initialSupply: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(uint256,string,string)"(
    _initialSupply: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinPool(
    _amount: BigNumberish,
    _referral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "joinPool(uint256,uint16)"(
    _amount: BigNumberish,
    _referral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeCaller(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeCaller(address)"(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnnualizedFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnnualizedFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCap(
    _maxCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCap(uint256)"(
    _maxCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEntryFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEntryFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEntryFeeBeneficiaryShare(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEntryFeeBeneficiaryShare(uint256)"(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExitFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExitFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExitFeeBeneficiaryShare(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExitFeeBeneficiaryShare(uint256)"(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBeneficiary(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFeeBeneficiary(address)"(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLock(
    _lock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLock(uint256)"(
    _lock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setName(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setName(string)"(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSymbol(
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSymbol(string)"(
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  singleCall(
    _target: string,
    _calldata: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "singleCall(address,bytes,uint256)"(
    _target: string,
    _calldata: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCaller(_caller: string, overrides?: CallOverrides): Promise<void>;

    "addCaller(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "addToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcOutStandingAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    canCall(_caller: string, overrides?: CallOverrides): Promise<boolean>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    chargeOutstandingAnnualizedFee(overrides?: CallOverrides): Promise<void>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "diamondCut(tuple[],address,bytes)"(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & {
        facetAddress: string;
        functionSelectors: string[];
      })[]
    >;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & {
        facetAddress: string;
        functionSelectors: string[];
      })[]
    >;

    getAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getAnnualizedFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCallers(overrides?: CallOverrides): Promise<string[]>;

    "getCallers()"(overrides?: CallOverrides): Promise<string[]>;

    getCap(overrides?: CallOverrides): Promise<BigNumber>;

    "getCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<string>;

    "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<string>;

    getLock(overrides?: CallOverrides): Promise<boolean>;

    "getLock()"(overrides?: CallOverrides): Promise<boolean>;

    getLockBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenInPool(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    "getTokens()"(overrides?: CallOverrides): Promise<string[]>;

    increaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,string,string)"(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    joinPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "joinPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeCaller(_caller: string, overrides?: CallOverrides): Promise<void>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "removeToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(_maxCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntryFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLock(_lock: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(_name: string, overrides?: CallOverrides): Promise<void>;

    "setName(string)"(_name: string, overrides?: CallOverrides): Promise<void>;

    setSymbol(_symbol: string, overrides?: CallOverrides): Promise<void>;

    "setSymbol(string)"(
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnnualizedFeeSet(
      fee: null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Call(
      caller: string | null,
      target: string | null,
      data: null,
      value: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { caller: string; target: string; data: string; value: BigNumber }
    >;

    CallerAdded(
      caller: string | null
    ): TypedEventFilter<[string], { caller: string }>;

    CallerRemoved(
      caller: string | null
    ): TypedEventFilter<[string], { caller: string }>;

    CapSet(cap: null): TypedEventFilter<[BigNumber], { cap: BigNumber }>;

    DiamondCut(
      _diamondCut: null,
      _init: null,
      _calldata: null
    ): TypedEventFilter<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[],
        string,
        string
      ],
      {
        _diamondCut: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
        _init: string;
        _calldata: string;
      }
    >;

    EntryFeeBeneficiaryShareSet(
      share: null
    ): TypedEventFilter<[BigNumber], { share: BigNumber }>;

    EntryFeeSet(fee: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    ExitFeeBeneficiaryShareSet(
      share: null
    ): TypedEventFilter<[BigNumber], { share: BigNumber }>;

    ExitFeeSet(fee: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    FeeBeneficiarySet(
      beneficiary: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    FeeCharged(
      amount: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    LockSet(
      lockBlock: null
    ): TypedEventFilter<[BigNumber], { lockBlock: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PoolExited(
      who: string | null,
      amount: null,
      _referral: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { who: string; amount: BigNumber; _referral: number }
    >;

    PoolJoined(
      who: string | null,
      amount: null,
      _referral: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { who: string; amount: BigNumber; _referral: number }
    >;

    TokenAdded(
      _token: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    TokenRemoved(
      _token: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    addCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcOutStandingAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canCall(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chargeOutstandingAnnualizedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "diamondCut(tuple[],address,bytes)"(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exitPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getAnnualizedFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCallers(overrides?: CallOverrides): Promise<BigNumber>;

    "getCallers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCap(overrides?: CallOverrides): Promise<BigNumber>;

    "getCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLockBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenInPool(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(uint256,string,string)"(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "joinPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEntryFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExitFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLock(
      _lock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setName(string)"(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSymbol(
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSymbol(string)"(
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcOutStandingAnnualizedFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canCall(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chargeOutstandingAnnualizedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "diamondCut(tuple[],address,bytes)"(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exitPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAnnualizedFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCallers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCallers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntryFeeBeneficiaryShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getExitFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitFeeBeneficiaryShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeeBeneficiary()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenInPool(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseApproval(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,string,string)"(
      _initialSupply: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinPool(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "joinPool(uint256,uint16)"(
      _amount: BigNumberish,
      _referral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEntryFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExitFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLock(
      _lock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setName(string)"(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSymbol(
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSymbol(string)"(
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
