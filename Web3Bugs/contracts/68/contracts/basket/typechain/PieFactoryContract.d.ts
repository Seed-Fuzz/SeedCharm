/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PieFactoryContractInterface extends ethers.utils.Interface {
  functions: {
    "addFacet(tuple)": FunctionFragment;
    "bakePie(address[],uint256[],uint256,string,string)": FunctionFragment;
    "defaultController()": FunctionFragment;
    "defaultCut(uint256)": FunctionFragment;
    "diamondImplementation()": FunctionFragment;
    "getDefaultCut()": FunctionFragment;
    "getDefaultCutCount()": FunctionFragment;
    "isPie(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pies(uint256)": FunctionFragment;
    "removeFacet(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultController(address)": FunctionFragment;
    "setDiamondImplementation(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFacet",
    values: [
      {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bakePie",
    values: [string[], BigNumberish[], BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultCut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultCutCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPie", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pies", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "removeFacet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiamondImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addFacet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bakePie", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "defaultCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diamondImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultCutCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiamondImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DefaultControllerSet(address)": EventFragment;
    "FacetAdded(tuple)": EventFragment;
    "FacetRemoved(tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PieCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultControllerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FacetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FacetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PieCreated"): EventFragment;
}

export class PieFactoryContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PieFactoryContractInterface;

  functions: {
    addFacet(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addFacet((address,uint8,bytes4[]))"(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bakePie(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bakePie(address[],uint256[],uint256,string,string)"(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultController(overrides?: CallOverrides): Promise<[string]>;

    "defaultController()"(overrides?: CallOverrides): Promise<[string]>;

    defaultCut(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { facetAddress: string; action: number }>;

    "defaultCut(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { facetAddress: string; action: number }>;

    diamondImplementation(overrides?: CallOverrides): Promise<[string]>;

    "diamondImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    getDefaultCut(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[]
      ]
    >;

    "getDefaultCut()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[]
      ]
    >;

    getDefaultCutCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDefaultCutCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPie(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPie(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pies(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "pies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeFacet(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeFacet(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDefaultController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDiamondImplementation(
      _diamondImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDiamondImplementation(address)"(
      _diamondImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addFacet(
    _facet: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addFacet((address,uint8,bytes4[]))"(
    _facet: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bakePie(
    _tokens: string[],
    _amounts: BigNumberish[],
    _initialSupply: BigNumberish,
    _symbol: string,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bakePie(address[],uint256[],uint256,string,string)"(
    _tokens: string[],
    _amounts: BigNumberish[],
    _initialSupply: BigNumberish,
    _symbol: string,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultController(overrides?: CallOverrides): Promise<string>;

  "defaultController()"(overrides?: CallOverrides): Promise<string>;

  defaultCut(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { facetAddress: string; action: number }>;

  "defaultCut(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { facetAddress: string; action: number }>;

  diamondImplementation(overrides?: CallOverrides): Promise<string>;

  "diamondImplementation()"(overrides?: CallOverrides): Promise<string>;

  getDefaultCut(
    overrides?: CallOverrides
  ): Promise<
    ([string, number, string[]] & {
      facetAddress: string;
      action: number;
      functionSelectors: string[];
    })[]
  >;

  "getDefaultCut()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, number, string[]] & {
      facetAddress: string;
      action: number;
      functionSelectors: string[];
    })[]
  >;

  getDefaultCutCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getDefaultCutCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  isPie(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isPie(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pies(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "pies(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeFacet(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeFacet(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDefaultController(address)"(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDiamondImplementation(
    _diamondImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDiamondImplementation(address)"(
    _diamondImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFacet(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "addFacet((address,uint8,bytes4[]))"(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    bakePie(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "bakePie(address[],uint256[],uint256,string,string)"(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultController(overrides?: CallOverrides): Promise<string>;

    "defaultController()"(overrides?: CallOverrides): Promise<string>;

    defaultCut(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { facetAddress: string; action: number }>;

    "defaultCut(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { facetAddress: string; action: number }>;

    diamondImplementation(overrides?: CallOverrides): Promise<string>;

    "diamondImplementation()"(overrides?: CallOverrides): Promise<string>;

    getDefaultCut(
      overrides?: CallOverrides
    ): Promise<
      ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[]
    >;

    "getDefaultCut()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[]
    >;

    getDefaultCutCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDefaultCutCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPie(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isPie(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pies(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "pies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeFacet(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "removeFacet(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDefaultController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDefaultController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiamondImplementation(
      _diamondImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDiamondImplementation(address)"(
      _diamondImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DefaultControllerSet(
      controller: string | null
    ): TypedEventFilter<[string], { controller: string }>;

    FacetAdded(
      undefined: null
    ): TypedEventFilter<
      [
        [string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        }
      ],
      {
        arg0: [string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        };
      }
    >;

    FacetRemoved(
      undefined: null
    ): TypedEventFilter<
      [
        [string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        }
      ],
      {
        arg0: [string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        };
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PieCreated(
      pieAddress: string | null,
      deployer: string | null,
      index: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { pieAddress: string; deployer: string; index: BigNumber }
    >;
  };

  estimateGas: {
    addFacet(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addFacet((address,uint8,bytes4[]))"(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bakePie(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bakePie(address[],uint256[],uint256,string,string)"(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultController(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultController()"(overrides?: CallOverrides): Promise<BigNumber>;

    defaultCut(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "defaultCut(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diamondImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "diamondImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultCut(overrides?: CallOverrides): Promise<BigNumber>;

    "getDefaultCut()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultCutCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDefaultCutCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPie(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPie(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pies(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFacet(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeFacet(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDefaultController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDiamondImplementation(
      _diamondImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDiamondImplementation(address)"(
      _diamondImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFacet(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addFacet((address,uint8,bytes4[]))"(
      _facet: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bakePie(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bakePie(address[],uint256[],uint256,string,string)"(
      _tokens: string[],
      _amounts: BigNumberish[],
      _initialSupply: BigNumberish,
      _symbol: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "defaultController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultCut(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "defaultCut(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    diamondImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "diamondImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDefaultCut()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDefaultCutCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDefaultCutCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPie(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPie(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFacet(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeFacet(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDefaultController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDiamondImplementation(
      _diamondImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDiamondImplementation(address)"(
      _diamondImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
