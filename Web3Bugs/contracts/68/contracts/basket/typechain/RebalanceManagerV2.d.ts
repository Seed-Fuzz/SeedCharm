/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RebalanceManagerV2Interface extends ethers.utils.Interface {
  functions: {
    "basket()": FunctionFragment;
    "exchanges(address)": FunctionFragment;
    "rebalance(tuple[],uint256)": FunctionFragment;
    "rebalanceManager()": FunctionFragment;
    "setExchange(address,bool)": FunctionFragment;
    "setRebalanceManager(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "basket", values?: undefined): string;
  encodeFunctionData(functionFragment: "exchanges", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExchange",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceManager",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "basket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchanges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceManager",
    data: BytesLike
  ): Result;

  events: {
    "RebalanceManagerSet(address)": EventFragment;
    "Rebalanced(address)": EventFragment;
    "Swaped(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RebalanceManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swaped"): EventFragment;
}

export class RebalanceManagerV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RebalanceManagerV2Interface;

  functions: {
    basket(overrides?: CallOverrides): Promise<[string]>;

    "basket()"(overrides?: CallOverrides): Promise<[string]>;

    exchanges(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "exchanges(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rebalance(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rebalance(tuple[],uint256)"(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalanceManager(overrides?: CallOverrides): Promise<[string]>;

    "rebalanceManager()"(overrides?: CallOverrides): Promise<[string]>;

    setExchange(
      _exchange: string,
      _activated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExchange(address,bool)"(
      _exchange: string,
      _activated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebalanceManager(
      _rebalanceManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRebalanceManager(address)"(
      _rebalanceManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  basket(overrides?: CallOverrides): Promise<string>;

  "basket()"(overrides?: CallOverrides): Promise<string>;

  exchanges(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "exchanges(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rebalance(
    _swapsV2: {
      exchange: string;
      path: string[];
      quantity: BigNumberish;
      minReturn: BigNumberish;
    }[],
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rebalance(tuple[],uint256)"(
    _swapsV2: {
      exchange: string;
      path: string[];
      quantity: BigNumberish;
      minReturn: BigNumberish;
    }[],
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalanceManager(overrides?: CallOverrides): Promise<string>;

  "rebalanceManager()"(overrides?: CallOverrides): Promise<string>;

  setExchange(
    _exchange: string,
    _activated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExchange(address,bool)"(
    _exchange: string,
    _activated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebalanceManager(
    _rebalanceManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRebalanceManager(address)"(
    _rebalanceManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    basket(overrides?: CallOverrides): Promise<string>;

    "basket()"(overrides?: CallOverrides): Promise<string>;

    exchanges(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "exchanges(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rebalance(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rebalance(tuple[],uint256)"(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rebalanceManager(overrides?: CallOverrides): Promise<string>;

    "rebalanceManager()"(overrides?: CallOverrides): Promise<string>;

    setExchange(
      _exchange: string,
      _activated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExchange(address,bool)"(
      _exchange: string,
      _activated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceManager(
      _rebalanceManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRebalanceManager(address)"(
      _rebalanceManager: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RebalanceManagerSet(
      rebalanceManager: string | null
    ): TypedEventFilter<[string], { rebalanceManager: string }>;

    Rebalanced(
      basket: string | null
    ): TypedEventFilter<[string], { basket: string }>;

    Swaped(
      basket: string | null,
      tokenIn: string | null,
      tokenOut: string | null,
      quantity: null,
      returnedQuantity: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        basket: string;
        tokenIn: string;
        tokenOut: string;
        quantity: BigNumber;
        returnedQuantity: BigNumber;
      }
    >;
  };

  estimateGas: {
    basket(overrides?: CallOverrides): Promise<BigNumber>;

    "basket()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchanges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "exchanges(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rebalance(tuple[],uint256)"(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    "rebalanceManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    setExchange(
      _exchange: string,
      _activated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExchange(address,bool)"(
      _exchange: string,
      _activated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebalanceManager(
      _rebalanceManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRebalanceManager(address)"(
      _rebalanceManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    basket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "basket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchanges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exchanges(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rebalance(tuple[],uint256)"(
      _swapsV2: {
        exchange: string;
        path: string[];
        quantity: BigNumberish;
        minReturn: BigNumberish;
      }[],
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rebalanceManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExchange(
      _exchange: string,
      _activated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExchange(address,bool)"(
      _exchange: string,
      _activated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebalanceManager(
      _rebalanceManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRebalanceManager(address)"(
      _rebalanceManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
