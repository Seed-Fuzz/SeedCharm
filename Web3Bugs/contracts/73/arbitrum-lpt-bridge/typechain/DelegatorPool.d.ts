/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DelegatorPoolInterface extends ethers.utils.Interface {
  functions: {
    "bondingManager()": FunctionFragment;
    "claim(address,uint256)": FunctionFragment;
    "claimedInitialStake()": FunctionFragment;
    "initialStake()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "migrator()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bondingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedInitialStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bondingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedInitialStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;

  events: {
    "Claimed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _delegator: string;
    _stake: BigNumber;
    _fees: BigNumber;
  }
>;

export class DelegatorPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DelegatorPoolInterface;

  functions: {
    bondingManager(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _delegator: string,
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedInitialStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _bondingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator(overrides?: CallOverrides): Promise<[string]>;
  };

  bondingManager(overrides?: CallOverrides): Promise<string>;

  claim(
    _delegator: string,
    _stake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedInitialStake(overrides?: CallOverrides): Promise<BigNumber>;

  initialStake(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _bondingManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bondingManager(overrides?: CallOverrides): Promise<string>;

    claim(
      _delegator: string,
      _stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedInitialStake(overrides?: CallOverrides): Promise<BigNumber>;

    initialStake(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bondingManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    migrator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claimed(address,uint256,uint256)"(
      _delegator?: string | null,
      _stake?: null,
      _fees?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _delegator: string; _stake: BigNumber; _fees: BigNumber }
    >;

    Claimed(
      _delegator?: string | null,
      _stake?: null,
      _fees?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _delegator: string; _stake: BigNumber; _fees: BigNumber }
    >;
  };

  estimateGas: {
    bondingManager(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _delegator: string,
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedInitialStake(overrides?: CallOverrides): Promise<BigNumber>;

    initialStake(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bondingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bondingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _delegator: string,
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedInitialStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _bondingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
