/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface L1MigratorInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GOVERNOR_ROLE()": FunctionFragment;
    "bondingManagerAddr()": FunctionFragment;
    "bridgeMinterAddr()": FunctionFragment;
    "getMigrateDelegatorParams(address,address)": FunctionFragment;
    "getMigrateSenderParams(address,address)": FunctionFragment;
    "getMigrateUnbondingLocksParams(address,address,uint256[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "inbox()": FunctionFragment;
    "l1LPTGatewayAddr()": FunctionFragment;
    "l2MigratorAddr()": FunctionFragment;
    "migrateDelegator(address,address,bytes,uint256,uint256,uint256)": FunctionFragment;
    "migrateETH(uint256,uint256,uint256)": FunctionFragment;
    "migrateLPT(uint256,uint256,uint256)": FunctionFragment;
    "migrateSender(address,address,bytes,uint256,uint256,uint256)": FunctionFragment;
    "migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ticketBrokerAddr()": FunctionFragment;
    "tokenAddr()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingManagerAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMinterAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrateDelegatorParams",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrateSenderParams",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrateUnbondingLocksParams",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "inbox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1LPTGatewayAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2MigratorAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateDelegator",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateETH",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateLPT",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateSender",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateUnbondingLocks",
    values: [
      string,
      string,
      BigNumberish[],
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketBrokerAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenAddr", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingManagerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeMinterAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrateDelegatorParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrateSenderParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrateUnbondingLocksParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1LPTGatewayAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2MigratorAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrateETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrateLPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateUnbondingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketBrokerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "MigrateDelegatorInitiated(uint256,tuple)": EventFragment;
    "MigrateSenderInitiated(uint256,tuple)": EventFragment;
    "MigrateUnbondingLocksInitiated(uint256,tuple)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TxToL2(address,address,uint256,bytes)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MigrateDelegatorInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateSenderInitiated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrateUnbondingLocksInitiated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type MigrateDelegatorInitiatedEvent = TypedEvent<
  [
    BigNumber,
    [string, string, BigNumber, BigNumber, BigNumber, string] & {
      l1Addr: string;
      l2Addr: string;
      stake: BigNumber;
      delegatedStake: BigNumber;
      fees: BigNumber;
      delegate: string;
    }
  ] & {
    seqNo: BigNumber;
    params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
      l1Addr: string;
      l2Addr: string;
      stake: BigNumber;
      delegatedStake: BigNumber;
      fees: BigNumber;
      delegate: string;
    };
  }
>;

export type MigrateSenderInitiatedEvent = TypedEvent<
  [
    BigNumber,
    [string, string, BigNumber, BigNumber] & {
      l1Addr: string;
      l2Addr: string;
      deposit: BigNumber;
      reserve: BigNumber;
    }
  ] & {
    seqNo: BigNumber;
    params: [string, string, BigNumber, BigNumber] & {
      l1Addr: string;
      l2Addr: string;
      deposit: BigNumber;
      reserve: BigNumber;
    };
  }
>;

export type MigrateUnbondingLocksInitiatedEvent = TypedEvent<
  [
    BigNumber,
    [string, string, BigNumber, BigNumber[], string] & {
      l1Addr: string;
      l2Addr: string;
      total: BigNumber;
      unbondingLockIds: BigNumber[];
      delegate: string;
    }
  ] & {
    seqNo: BigNumber;
    params: [string, string, BigNumber, BigNumber[], string] & {
      l1Addr: string;
      l2Addr: string;
      total: BigNumber;
      unbondingLockIds: BigNumber[];
      delegate: string;
    };
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TxToL2Event = TypedEvent<
  [string, string, BigNumber, string] & {
    from: string;
    to: string;
    seqNum: BigNumber;
    data: string;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class L1Migrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L1MigratorInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<[string]>;

    bridgeMinterAddr(overrides?: CallOverrides): Promise<[string]>;

    getMigrateDelegatorParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        }
      ] & {
        data: string;
        params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        };
      }
    >;

    getMigrateSenderParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        }
      ] & {
        data: string;
        params: [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        };
      }
    >;

    getMigrateUnbondingLocksParams(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        }
      ] & {
        data: string;
        params: [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        };
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inbox(overrides?: CallOverrides): Promise<[string]>;

    l1LPTGatewayAddr(overrides?: CallOverrides): Promise<[string]>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<[string]>;

    migrateDelegator(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateETH(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateLPT(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateSender(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateUnbondingLocks(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<[string]>;

    tokenAddr(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

  bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

  bridgeMinterAddr(overrides?: CallOverrides): Promise<string>;

  getMigrateDelegatorParams(
    _l1Addr: string,
    _l2Addr: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [string, string, BigNumber, BigNumber, BigNumber, string] & {
        l1Addr: string;
        l2Addr: string;
        stake: BigNumber;
        delegatedStake: BigNumber;
        fees: BigNumber;
        delegate: string;
      }
    ] & {
      data: string;
      params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
        l1Addr: string;
        l2Addr: string;
        stake: BigNumber;
        delegatedStake: BigNumber;
        fees: BigNumber;
        delegate: string;
      };
    }
  >;

  getMigrateSenderParams(
    _l1Addr: string,
    _l2Addr: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [string, string, BigNumber, BigNumber] & {
        l1Addr: string;
        l2Addr: string;
        deposit: BigNumber;
        reserve: BigNumber;
      }
    ] & {
      data: string;
      params: [string, string, BigNumber, BigNumber] & {
        l1Addr: string;
        l2Addr: string;
        deposit: BigNumber;
        reserve: BigNumber;
      };
    }
  >;

  getMigrateUnbondingLocksParams(
    _l1Addr: string,
    _l2Addr: string,
    _unbondingLockIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [string, string, BigNumber, BigNumber[], string] & {
        l1Addr: string;
        l2Addr: string;
        total: BigNumber;
        unbondingLockIds: BigNumber[];
        delegate: string;
      }
    ] & {
      data: string;
      params: [string, string, BigNumber, BigNumber[], string] & {
        l1Addr: string;
        l2Addr: string;
        total: BigNumber;
        unbondingLockIds: BigNumber[];
        delegate: string;
      };
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inbox(overrides?: CallOverrides): Promise<string>;

  l1LPTGatewayAddr(overrides?: CallOverrides): Promise<string>;

  l2MigratorAddr(overrides?: CallOverrides): Promise<string>;

  migrateDelegator(
    _l1Addr: string,
    _l2Addr: string,
    _sig: BytesLike,
    _maxGas: BigNumberish,
    _gasPriceBid: BigNumberish,
    _maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateETH(
    _maxGas: BigNumberish,
    _gasPriceBid: BigNumberish,
    _maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateLPT(
    _maxGas: BigNumberish,
    _gasPriceBid: BigNumberish,
    _maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateSender(
    _l1Addr: string,
    _l2Addr: string,
    _sig: BytesLike,
    _maxGas: BigNumberish,
    _gasPriceBid: BigNumberish,
    _maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateUnbondingLocks(
    _l1Addr: string,
    _l2Addr: string,
    _unbondingLockIds: BigNumberish[],
    _sig: BytesLike,
    _maxGas: BigNumberish,
    _gasPriceBid: BigNumberish,
    _maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;

  tokenAddr(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

    bridgeMinterAddr(overrides?: CallOverrides): Promise<string>;

    getMigrateDelegatorParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        }
      ] & {
        data: string;
        params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        };
      }
    >;

    getMigrateSenderParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        }
      ] & {
        data: string;
        params: [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        };
      }
    >;

    getMigrateUnbondingLocksParams(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        }
      ] & {
        data: string;
        params: [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        };
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inbox(overrides?: CallOverrides): Promise<string>;

    l1LPTGatewayAddr(overrides?: CallOverrides): Promise<string>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<string>;

    migrateDelegator(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateETH(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateLPT(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateSender(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateUnbondingLocks(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;

    tokenAddr(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "MigrateDelegatorInitiated(uint256,tuple)"(
      seqNo?: BigNumberish | null,
      params?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        }
      ],
      {
        seqNo: BigNumber;
        params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        };
      }
    >;

    MigrateDelegatorInitiated(
      seqNo?: BigNumberish | null,
      params?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        }
      ],
      {
        seqNo: BigNumber;
        params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        };
      }
    >;

    "MigrateSenderInitiated(uint256,tuple)"(
      seqNo?: BigNumberish | null,
      params?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        }
      ],
      {
        seqNo: BigNumber;
        params: [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        };
      }
    >;

    MigrateSenderInitiated(
      seqNo?: BigNumberish | null,
      params?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        }
      ],
      {
        seqNo: BigNumber;
        params: [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        };
      }
    >;

    "MigrateUnbondingLocksInitiated(uint256,tuple)"(
      seqNo?: BigNumberish | null,
      params?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        }
      ],
      {
        seqNo: BigNumber;
        params: [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        };
      }
    >;

    MigrateUnbondingLocksInitiated(
      seqNo?: BigNumberish | null,
      params?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        }
      ],
      {
        seqNo: BigNumber;
        params: [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        };
      }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TxToL2(address,address,uint256,bytes)"(
      from?: string | null,
      to?: string | null,
      seqNum?: BigNumberish | null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { from: string; to: string; seqNum: BigNumber; data: string }
    >;

    TxToL2(
      from?: string | null,
      to?: string | null,
      seqNum?: BigNumberish | null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { from: string; to: string; seqNum: BigNumber; data: string }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeMinterAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getMigrateDelegatorParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMigrateSenderParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMigrateUnbondingLocksParams(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inbox(overrides?: CallOverrides): Promise<BigNumber>;

    l1LPTGatewayAddr(overrides?: CallOverrides): Promise<BigNumber>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<BigNumber>;

    migrateDelegator(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateETH(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateLPT(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateSender(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateUnbondingLocks(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddr(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingManagerAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeMinterAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMigrateDelegatorParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMigrateSenderParams(
      _l1Addr: string,
      _l2Addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMigrateUnbondingLocksParams(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1LPTGatewayAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateDelegator(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateETH(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateLPT(
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateSender(
      _l1Addr: string,
      _l2Addr: string,
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateUnbondingLocks(
      _l1Addr: string,
      _l2Addr: string,
      _unbondingLockIds: BigNumberish[],
      _sig: BytesLike,
      _maxGas: BigNumberish,
      _gasPriceBid: BigNumberish,
      _maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
