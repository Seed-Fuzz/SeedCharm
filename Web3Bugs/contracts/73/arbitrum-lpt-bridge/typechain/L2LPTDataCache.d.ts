/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface L2LPTDataCacheInterface extends ethers.utils.Interface {
  functions: {
    "decreaseL2SupplyFromL1(uint256)": FunctionFragment;
    "finalizeCacheTotalSupply(uint256)": FunctionFragment;
    "increaseL2SupplyFromL1(uint256)": FunctionFragment;
    "l1CirculatingSupply()": FunctionFragment;
    "l1LPTDataCache()": FunctionFragment;
    "l1TotalSupply()": FunctionFragment;
    "l2LPTGateway()": FunctionFragment;
    "l2SupplyFromL1()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setL1LPTDataCache(address)": FunctionFragment;
    "setL2LPTGateway(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decreaseL2SupplyFromL1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCacheTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseL2SupplyFromL1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l1CirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1LPTDataCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1TotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2LPTGateway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2SupplyFromL1",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setL1LPTDataCache",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2LPTGateway",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseL2SupplyFromL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCacheTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseL2SupplyFromL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1CirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1LPTDataCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1TotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LPTGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2SupplyFromL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1LPTDataCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2LPTGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CacheTotalSupplyFinalized(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TxToL1(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CacheTotalSupplyFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL1"): EventFragment;
}

export type CacheTotalSupplyFinalizedEvent = TypedEvent<
  [BigNumber] & { totalSupply: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TxToL1Event = TypedEvent<
  [string, string, BigNumber, string] & {
    _from: string;
    _to: string;
    _id: BigNumber;
    _data: string;
  }
>;

export class L2LPTDataCache extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L2LPTDataCacheInterface;

  functions: {
    decreaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeCacheTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    l1CirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    l1LPTDataCache(overrides?: CallOverrides): Promise<[string]>;

    l1TotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2LPTGateway(overrides?: CallOverrides): Promise<[string]>;

    l2SupplyFromL1(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setL1LPTDataCache(
      _l1LPTDataCache: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setL2LPTGateway(
      _l2LPTGateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  decreaseL2SupplyFromL1(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeCacheTotalSupply(
    _totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseL2SupplyFromL1(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  l1CirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  l1LPTDataCache(overrides?: CallOverrides): Promise<string>;

  l1TotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  l2LPTGateway(overrides?: CallOverrides): Promise<string>;

  l2SupplyFromL1(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setL1LPTDataCache(
    _l1LPTDataCache: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setL2LPTGateway(
    _l2LPTGateway: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decreaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeCacheTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    l1CirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    l1LPTDataCache(overrides?: CallOverrides): Promise<string>;

    l1TotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    l2LPTGateway(overrides?: CallOverrides): Promise<string>;

    l2SupplyFromL1(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setL1LPTDataCache(
      _l1LPTDataCache: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2LPTGateway(
      _l2LPTGateway: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CacheTotalSupplyFinalized(uint256)"(
      totalSupply?: null
    ): TypedEventFilter<[BigNumber], { totalSupply: BigNumber }>;

    CacheTotalSupplyFinalized(
      totalSupply?: null
    ): TypedEventFilter<[BigNumber], { totalSupply: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TxToL1(address,address,uint256,bytes)"(
      _from?: string | null,
      _to?: string | null,
      _id?: BigNumberish | null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _id: BigNumber; _data: string }
    >;

    TxToL1(
      _from?: string | null,
      _to?: string | null,
      _id?: BigNumberish | null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _id: BigNumber; _data: string }
    >;
  };

  estimateGas: {
    decreaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeCacheTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    l1CirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    l1LPTDataCache(overrides?: CallOverrides): Promise<BigNumber>;

    l1TotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    l2LPTGateway(overrides?: CallOverrides): Promise<BigNumber>;

    l2SupplyFromL1(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setL1LPTDataCache(
      _l1LPTDataCache: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setL2LPTGateway(
      _l2LPTGateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeCacheTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseL2SupplyFromL1(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    l1CirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1LPTDataCache(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1TotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2LPTGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2SupplyFromL1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setL1LPTDataCache(
      _l1LPTDataCache: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setL2LPTGateway(
      _l2LPTGateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
