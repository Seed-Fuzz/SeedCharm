/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface L2MigratorInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GOVERNOR_ROLE()": FunctionFragment;
    "bondingManagerAddr()": FunctionFragment;
    "claimStake(address,uint256,uint256,bytes32[],address)": FunctionFragment;
    "claimStakeEnabled()": FunctionFragment;
    "claimedDelegatedStake(address)": FunctionFragment;
    "delegatorPoolImpl()": FunctionFragment;
    "delegatorPools(address)": FunctionFragment;
    "finalizeMigrateDelegator((address,address,uint256,uint256,uint256,address))": FunctionFragment;
    "finalizeMigrateSender((address,address,uint256,uint256))": FunctionFragment;
    "finalizeMigrateUnbondingLocks((address,address,uint256,uint256[],address))": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "l1Migrator()": FunctionFragment;
    "merkleSnapshotAddr()": FunctionFragment;
    "migratedDelegators(address)": FunctionFragment;
    "migratedSenders(address)": FunctionFragment;
    "migratedUnbondingLocks(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setClaimStakeEnabled(bool)": FunctionFragment;
    "setDelegatorPoolImpl(address)": FunctionFragment;
    "setL1Migrator(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ticketBrokerAddr()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingManagerAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimStake",
    values: [string, BigNumberish, BigNumberish, BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedDelegatedStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorPoolImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorPools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMigrateDelegator",
    values: [
      {
        l1Addr: string;
        l2Addr: string;
        stake: BigNumberish;
        delegatedStake: BigNumberish;
        fees: BigNumberish;
        delegate: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMigrateSender",
    values: [
      {
        l1Addr: string;
        l2Addr: string;
        deposit: BigNumberish;
        reserve: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMigrateUnbondingLocks",
    values: [
      {
        l1Addr: string;
        l2Addr: string;
        total: BigNumberish;
        unbondingLockIds: BigNumberish[];
        delegate: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "l1Migrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleSnapshotAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migratedDelegators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedSenders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedUnbondingLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimStakeEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegatorPoolImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1Migrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketBrokerAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingManagerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimStakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedDelegatedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMigrateDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMigrateSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMigrateUnbondingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Migrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "merkleSnapshotAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratedDelegators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratedUnbondingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimStakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegatorPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1Migrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketBrokerAddr",
    data: BytesLike
  ): Result;

  events: {
    "DelegatorPoolCreated(address,address)": EventFragment;
    "MigrateDelegatorFinalized(tuple)": EventFragment;
    "MigrateSenderFinalized(tuple)": EventFragment;
    "MigrateUnbondingLocksFinalized(tuple)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StakeClaimed(address,address,uint256,uint256)": EventFragment;
    "TxToL1(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegatorPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateDelegatorFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateSenderFinalized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrateUnbondingLocksFinalized"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL1"): EventFragment;
}

export type DelegatorPoolCreatedEvent = TypedEvent<
  [string, string] & { l1Addr: string; delegatorPool: string }
>;

export type MigrateDelegatorFinalizedEvent = TypedEvent<
  [
    [string, string, BigNumber, BigNumber, BigNumber, string] & {
      l1Addr: string;
      l2Addr: string;
      stake: BigNumber;
      delegatedStake: BigNumber;
      fees: BigNumber;
      delegate: string;
    }
  ] & {
    params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
      l1Addr: string;
      l2Addr: string;
      stake: BigNumber;
      delegatedStake: BigNumber;
      fees: BigNumber;
      delegate: string;
    };
  }
>;

export type MigrateSenderFinalizedEvent = TypedEvent<
  [
    [string, string, BigNumber, BigNumber] & {
      l1Addr: string;
      l2Addr: string;
      deposit: BigNumber;
      reserve: BigNumber;
    }
  ] & {
    params: [string, string, BigNumber, BigNumber] & {
      l1Addr: string;
      l2Addr: string;
      deposit: BigNumber;
      reserve: BigNumber;
    };
  }
>;

export type MigrateUnbondingLocksFinalizedEvent = TypedEvent<
  [
    [string, string, BigNumber, BigNumber[], string] & {
      l1Addr: string;
      l2Addr: string;
      total: BigNumber;
      unbondingLockIds: BigNumber[];
      delegate: string;
    }
  ] & {
    params: [string, string, BigNumber, BigNumber[], string] & {
      l1Addr: string;
      l2Addr: string;
      total: BigNumber;
      unbondingLockIds: BigNumber[];
      delegate: string;
    };
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type StakeClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    delegator: string;
    delegate: string;
    stake: BigNumber;
    fees: BigNumber;
  }
>;

export type TxToL1Event = TypedEvent<
  [string, string, BigNumber, string] & {
    _from: string;
    _to: string;
    _id: BigNumber;
    _data: string;
  }
>;

export class L2Migrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L2MigratorInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<[string]>;

    claimStake(
      _delegate: string,
      _stake: BigNumberish,
      _fees: BigNumberish,
      _proof: BytesLike[],
      _newDelegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    claimedDelegatedStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<[string]>;

    delegatorPools(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    finalizeMigrateDelegator(
      _params: {
        l1Addr: string;
        l2Addr: string;
        stake: BigNumberish;
        delegatedStake: BigNumberish;
        fees: BigNumberish;
        delegate: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeMigrateSender(
      _params: {
        l1Addr: string;
        l2Addr: string;
        deposit: BigNumberish;
        reserve: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeMigrateUnbondingLocks(
      _params: {
        l1Addr: string;
        l2Addr: string;
        total: BigNumberish;
        unbondingLockIds: BigNumberish[];
        delegate: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1Migrator(overrides?: CallOverrides): Promise<[string]>;

    merkleSnapshotAddr(overrides?: CallOverrides): Promise<[string]>;

    migratedDelegators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migratedSenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migratedUnbondingLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimStakeEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setL1Migrator(
      _l1Migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

  bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

  claimStake(
    _delegate: string,
    _stake: BigNumberish,
    _fees: BigNumberish,
    _proof: BytesLike[],
    _newDelegate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimStakeEnabled(overrides?: CallOverrides): Promise<boolean>;

  claimedDelegatedStake(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegatorPoolImpl(overrides?: CallOverrides): Promise<string>;

  delegatorPools(arg0: string, overrides?: CallOverrides): Promise<string>;

  finalizeMigrateDelegator(
    _params: {
      l1Addr: string;
      l2Addr: string;
      stake: BigNumberish;
      delegatedStake: BigNumberish;
      fees: BigNumberish;
      delegate: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeMigrateSender(
    _params: {
      l1Addr: string;
      l2Addr: string;
      deposit: BigNumberish;
      reserve: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeMigrateUnbondingLocks(
    _params: {
      l1Addr: string;
      l2Addr: string;
      total: BigNumberish;
      unbondingLockIds: BigNumberish[];
      delegate: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1Migrator(overrides?: CallOverrides): Promise<string>;

  merkleSnapshotAddr(overrides?: CallOverrides): Promise<string>;

  migratedDelegators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  migratedSenders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  migratedUnbondingLocks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimStakeEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelegatorPoolImpl(
    _delegatorPoolImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setL1Migrator(
    _l1Migrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

    claimStake(
      _delegate: string,
      _stake: BigNumberish,
      _fees: BigNumberish,
      _proof: BytesLike[],
      _newDelegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<boolean>;

    claimedDelegatedStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<string>;

    delegatorPools(arg0: string, overrides?: CallOverrides): Promise<string>;

    finalizeMigrateDelegator(
      _params: {
        l1Addr: string;
        l2Addr: string;
        stake: BigNumberish;
        delegatedStake: BigNumberish;
        fees: BigNumberish;
        delegate: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeMigrateSender(
      _params: {
        l1Addr: string;
        l2Addr: string;
        deposit: BigNumberish;
        reserve: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeMigrateUnbondingLocks(
      _params: {
        l1Addr: string;
        l2Addr: string;
        total: BigNumberish;
        unbondingLockIds: BigNumberish[];
        delegate: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1Migrator(overrides?: CallOverrides): Promise<string>;

    merkleSnapshotAddr(overrides?: CallOverrides): Promise<string>;

    migratedDelegators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migratedSenders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    migratedUnbondingLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimStakeEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1Migrator(
      _l1Migrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DelegatorPoolCreated(address,address)"(
      l1Addr?: string | null,
      delegatorPool?: null
    ): TypedEventFilter<
      [string, string],
      { l1Addr: string; delegatorPool: string }
    >;

    DelegatorPoolCreated(
      l1Addr?: string | null,
      delegatorPool?: null
    ): TypedEventFilter<
      [string, string],
      { l1Addr: string; delegatorPool: string }
    >;

    "MigrateDelegatorFinalized(tuple)"(
      params?: null
    ): TypedEventFilter<
      [
        [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        }
      ],
      {
        params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        };
      }
    >;

    MigrateDelegatorFinalized(
      params?: null
    ): TypedEventFilter<
      [
        [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        }
      ],
      {
        params: [string, string, BigNumber, BigNumber, BigNumber, string] & {
          l1Addr: string;
          l2Addr: string;
          stake: BigNumber;
          delegatedStake: BigNumber;
          fees: BigNumber;
          delegate: string;
        };
      }
    >;

    "MigrateSenderFinalized(tuple)"(
      params?: null
    ): TypedEventFilter<
      [
        [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        }
      ],
      {
        params: [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        };
      }
    >;

    MigrateSenderFinalized(
      params?: null
    ): TypedEventFilter<
      [
        [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        }
      ],
      {
        params: [string, string, BigNumber, BigNumber] & {
          l1Addr: string;
          l2Addr: string;
          deposit: BigNumber;
          reserve: BigNumber;
        };
      }
    >;

    "MigrateUnbondingLocksFinalized(tuple)"(
      params?: null
    ): TypedEventFilter<
      [
        [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        }
      ],
      {
        params: [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        };
      }
    >;

    MigrateUnbondingLocksFinalized(
      params?: null
    ): TypedEventFilter<
      [
        [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        }
      ],
      {
        params: [string, string, BigNumber, BigNumber[], string] & {
          l1Addr: string;
          l2Addr: string;
          total: BigNumber;
          unbondingLockIds: BigNumber[];
          delegate: string;
        };
      }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "StakeClaimed(address,address,uint256,uint256)"(
      delegator?: string | null,
      delegate?: null,
      stake?: null,
      fees?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { delegator: string; delegate: string; stake: BigNumber; fees: BigNumber }
    >;

    StakeClaimed(
      delegator?: string | null,
      delegate?: null,
      stake?: null,
      fees?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { delegator: string; delegate: string; stake: BigNumber; fees: BigNumber }
    >;

    "TxToL1(address,address,uint256,bytes)"(
      _from?: string | null,
      _to?: string | null,
      _id?: BigNumberish | null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _id: BigNumber; _data: string }
    >;

    TxToL1(
      _from?: string | null,
      _to?: string | null,
      _id?: BigNumberish | null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _id: BigNumber; _data: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    claimStake(
      _delegate: string,
      _stake: BigNumberish,
      _fees: BigNumberish,
      _proof: BytesLike[],
      _newDelegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    claimedDelegatedStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<BigNumber>;

    delegatorPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeMigrateDelegator(
      _params: {
        l1Addr: string;
        l2Addr: string;
        stake: BigNumberish;
        delegatedStake: BigNumberish;
        fees: BigNumberish;
        delegate: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeMigrateSender(
      _params: {
        l1Addr: string;
        l2Addr: string;
        deposit: BigNumberish;
        reserve: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeMigrateUnbondingLocks(
      _params: {
        l1Addr: string;
        l2Addr: string;
        total: BigNumberish;
        unbondingLockIds: BigNumberish[];
        delegate: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1Migrator(overrides?: CallOverrides): Promise<BigNumber>;

    merkleSnapshotAddr(overrides?: CallOverrides): Promise<BigNumber>;

    migratedDelegators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migratedSenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migratedUnbondingLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimStakeEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setL1Migrator(
      _l1Migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingManagerAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimStake(
      _delegate: string,
      _stake: BigNumberish,
      _fees: BigNumberish,
      _proof: BytesLike[],
      _newDelegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedDelegatedStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatorPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeMigrateDelegator(
      _params: {
        l1Addr: string;
        l2Addr: string;
        stake: BigNumberish;
        delegatedStake: BigNumberish;
        fees: BigNumberish;
        delegate: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeMigrateSender(
      _params: {
        l1Addr: string;
        l2Addr: string;
        deposit: BigNumberish;
        reserve: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeMigrateUnbondingLocks(
      _params: {
        l1Addr: string;
        l2Addr: string;
        total: BigNumberish;
        unbondingLockIds: BigNumberish[];
        delegate: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1Migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleSnapshotAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migratedDelegators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migratedSenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migratedUnbondingLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimStakeEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setL1Migrator(
      _l1Migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
