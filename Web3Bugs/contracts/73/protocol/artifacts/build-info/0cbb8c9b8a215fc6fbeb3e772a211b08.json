{
  "id": "0cbb8c9b8a215fc6fbeb3e772a211b08",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.5.11",
  "solcLongVersion": "0.5.11+commit.22be8592",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/test/mocks/BondingManagerMock.sol": {
        "content": "pragma solidity ^0.5.11;\n\nimport \"./GenericMock.sol\";\n\ncontract BondingManagerMock is GenericMock {\n    event UpdateTranscoderWithFees(address transcoder, uint256 fees, uint256 round);\n\n    function updateTranscoderWithFees(\n        address _transcoder,\n        uint256 _fees,\n        uint256 _round\n    ) external {\n        emit UpdateTranscoderWithFees(_transcoder, _fees, _round);\n    }\n}\n"
      },
      "contracts/test/mocks/GenericMock.sol": {
        "content": "pragma solidity ^0.5.11;\n\n/**\n * @title A mock contract that can set/return mock values and execute functions\n * on target contracts\n */\ncontract GenericMock {\n    struct MockValue {\n        uint256 uint256Value;\n        bytes32 bytes32Value;\n        bool boolValue;\n        address addressValue;\n        MockValueType valueType;\n        bool set;\n        mapping(bytes32 => uint256) uint256Values;\n    }\n\n    enum MockValueType {\n        Uint256,\n        Bytes32,\n        Bool,\n        Address\n    }\n\n    // Track function selectors and mapped mock values\n    mapping(bytes4 => MockValue) mockValues;\n\n    /**\n     * @dev Return mock value for a functione\n     */\n    function() external payable {\n        bytes4 func;\n        assembly {\n            func := calldataload(0)\n        }\n\n        bytes32 dataHash = keccak256(abi.encodePacked(msg.data));\n\n        if (!mockValues[func].set) {\n            // If mock value not set, default to return a bool with value false\n            mLoadAndReturn(false);\n        } else {\n            if (mockValues[func].valueType == MockValueType.Uint256) {\n                uint256 value = mockValues[func].uint256Values[dataHash];\n                // TODO: Make sure we don't go into this code block if the value set\n                // for dataHash should actually be 0\n                if (value == 0) {\n                    value = mockValues[func].uint256Value;\n                }\n                mLoadAndReturn(value);\n            } else if (mockValues[func].valueType == MockValueType.Bytes32) {\n                mLoadAndReturn(mockValues[func].bytes32Value);\n            } else if (mockValues[func].valueType == MockValueType.Bool) {\n                mLoadAndReturn(mockValues[func].boolValue);\n            } else if (mockValues[func].valueType == MockValueType.Address) {\n                mLoadAndReturn(mockValues[func].addressValue);\n            }\n        }\n    }\n\n    /**\n     * @dev Call a function on a target address using provided calldata for a function\n     * @param _target Target contract to call with data\n     * @param _data Transaction data to be used to call the target contract\n     */\n    function execute(address _target, bytes calldata _data) external payable {\n        // solium-disable-next-line\n        (bool ok, bytes memory res) = _target.call.value(msg.value)(_data);\n        require(ok, string(res));\n    }\n\n    /**\n     * @dev Set a mock uint256 value for a function\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n     * @param _value Mock uint256 value\n     */\n    function setMockUint256(bytes4 _func, uint256 _value) external returns (bool) {\n        mockValues[_func].valueType = MockValueType.Uint256;\n        mockValues[_func].uint256Value = _value;\n        mockValues[_func].set = true;\n    }\n\n    /**\n     * @dev Set a mockuint256 value for a function with specific params passed\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n     * @param _dataHash keccak256 hash of tx data i.e. keccak256(msg.data)\n     * @param _value Mock uint256 value\n     */\n    function setMockUint256WithParam(\n        bytes4 _func,\n        bytes32 _dataHash,\n        uint256 _value\n    ) external returns (bool) {\n        mockValues[_func].valueType = MockValueType.Uint256;\n        mockValues[_func].uint256Values[_dataHash] = _value;\n        mockValues[_func].set = true;\n    }\n\n    /**\n     * @dev Set a mock bytes32 value for a function\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n     * param _value Mock bytes32 value\n     */\n    function setMockBytes32(bytes4 _func, bytes32 _value) external {\n        mockValues[_func].valueType = MockValueType.Bytes32;\n        mockValues[_func].bytes32Value = _value;\n        mockValues[_func].set = true;\n    }\n\n    /**\n     * @dev Set a mock bool value for a function\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n     * @param _value Mock bool value\n     */\n    function setMockBool(bytes4 _func, bool _value) external {\n        mockValues[_func].valueType = MockValueType.Bool;\n        mockValues[_func].boolValue = _value;\n        mockValues[_func].set = true;\n    }\n\n    /**\n     * @dev Set a mock address value for a function\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n     * @param _value Mock address value\n     */\n    function setMockAddress(bytes4 _func, address _value) external {\n        mockValues[_func].valueType = MockValueType.Address;\n        mockValues[_func].addressValue = _value;\n        mockValues[_func].set = true;\n    }\n\n    /**\n     * @dev Load a uint256 value into memory and return it\n     * @param _value Uint256 value\n     */\n    function mLoadAndReturn(uint256 _value) private pure {\n        assembly {\n            let memOffset := mload(0x40)\n            mstore(0x40, add(memOffset, 32))\n            mstore(memOffset, _value)\n            return(memOffset, 32)\n        }\n    }\n\n    /**\n     * @dev Load a bytes32 value into memory and return it\n     * @param _value Bytes32 value\n     */\n    function mLoadAndReturn(bytes32 _value) private pure {\n        assembly {\n            let memOffset := mload(0x40)\n            mstore(0x40, add(memOffset, 32))\n            mstore(memOffset, _value)\n            return(memOffset, 32)\n        }\n    }\n\n    /**\n     * @dev Load a bool value into memory and return it\n     * @param _value Bool value\n     */\n    function mLoadAndReturn(bool _value) private pure {\n        assembly {\n            let memOffset := mload(0x40)\n            mstore(0x40, add(memOffset, 32))\n            mstore(memOffset, _value)\n            return(memOffset, 32)\n        }\n    }\n\n    /**\n     * @dev Load an address value into memory and return it\n     * @param _value Address value\n     */\n    function mLoadAndReturn(address _value) private pure {\n        assembly {\n            let memOffset := mload(0x40)\n            mstore(0x40, add(memOffset, 32))\n            mstore(memOffset, _value)\n            return(memOffset, 32)\n        }\n    }\n}\n"
      },
      "contracts/test/mocks/MinterMock.sol": {
        "content": "pragma solidity ^0.5.11;\n\nimport \"./GenericMock.sol\";\n\ncontract MinterMock is GenericMock {\n    event TrustedWithdrawETH(address to, uint256 amount);\n\n    function trustedWithdrawETH(address _to, uint256 _amount) external {\n        emit TrustedWithdrawETH(_to, _amount);\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/test/mocks/BondingManagerMock.sol": {
        "BondingManagerMock": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes32",
                  "name": "_dataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "setMockUint256WithParam",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "execute",
              "outputs": [],
              "payable": true,
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "setMockUint256",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_transcoder",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_fees",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_round",
                  "type": "uint256"
                }
              ],
              "name": "updateTranscoderWithFees",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "address",
                  "name": "_value",
                  "type": "address"
                }
              ],
              "name": "setMockAddress",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bool",
                  "name": "_value",
                  "type": "bool"
                }
              ],
              "name": "setMockBool",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes32",
                  "name": "_value",
                  "type": "bytes32"
                }
              ],
              "name": "setMockBytes32",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "payable": true,
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "transcoder",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "fees",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "round",
                  "type": "uint256"
                }
              ],
              "name": "UpdateTranscoderWithFees",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {
              "execute(address,bytes)": {
                "details": "Call a function on a target address using provided calldata for a function",
                "params": {
                  "_data": "Transaction data to be used to call the target contract",
                  "_target": "Target contract to call with data"
                }
              },
              "setMockAddress(bytes4,address)": {
                "details": "Set a mock address value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock address value"
                }
              },
              "setMockBool(bytes4,bool)": {
                "details": "Set a mock bool value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock bool value"
                }
              },
              "setMockBytes32(bytes4,bytes32)": {
                "details": "Set a mock bytes32 value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE))) param _value Mock bytes32 value"
                }
              },
              "setMockUint256(bytes4,uint256)": {
                "details": "Set a mock uint256 value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock uint256 value"
                }
              },
              "setMockUint256WithParam(bytes4,bytes32,uint256)": {
                "details": "Set a mockuint256 value for a function with specific params passed",
                "params": {
                  "_dataHash": "keccak256 hash of tx data i.e. keccak256(msg.data)",
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock uint256 value"
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506107c4806100206000396000f3fe6080604052600436106100705760003560e01c80633aeb512c1161004e5780633aeb512c146103b85780636c33e7eb146103f75780637c4d18bd1461043a578063d2f65fbc1461047657610070565b80630d9b9993146102a85780631cff79cd146102fc5780631d77d6961461037e575b60008035905060008036604051602001808383808284376040805191909301818103601f19018252835280516020918201206001600160e01b031989166000908152918290529290206002015491955050600160b01b900460ff1692506100e3915050576100de60006104b0565b6102a4565b60006001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561011757fe5b1415610173576001600160e01b031982166000908152602081815260408083208484526003019091529020548061016457506001600160e01b031982166000908152602081905260409020545b61016d816104b0565b506102a4565b60016001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156101a757fe5b14156101d3576001600160e01b031982166000908152602081905260409020600101546100de906104b0565b60026001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561020757fe5b1415610236576001600160e01b031982166000908152602081905260409020600201546100de9060ff166104b0565b60036001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561026a57fe5b14156102a4576001600160e01b031982166000908152602081905260409020600201546102a49061010090046001600160a01b03166104b0565b5050005b3480156102b457600080fd5b506102e8600480360360608110156102cb57600080fd5b506001600160e01b031981351690602081013590604001356104c2565b604080519115158252519081900360200190f35b61037c6004803603604081101561031257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b509092509050610516565b005b34801561038a57600080fd5b506102e8600480360360408110156103a157600080fd5b506001600160e01b03198135169060200135610615565b3480156103c457600080fd5b5061037c600480360360608110156103db57600080fd5b506001600160a01b038135169060208101359060400135610650565b34801561040357600080fd5b5061037c6004803603604081101561041a57600080fd5b5080356001600160e01b03191690602001356001600160a01b031661069e565b34801561044657600080fd5b5061037c6004803603604081101561045d57600080fd5b506001600160e01b0319813516906020013515156106fc565b34801561048257600080fd5b5061037c6004803603604081101561049957600080fd5b506001600160e01b03198135169060200135610747565b60405160208101604052818152602081f35b6001600160e01b03199290921660008181526020818152604080832060028101805460ff60a81b19168155958452600301825282209490945590815291829052805460ff60b01b1916600160b01b17905590565b60006060846001600160a01b0316348585604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114610578576040519150601f19603f3d011682016040523d82523d6000602084013e61057d565b606091505b509150915081819061060d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105d25781810151838201526020016105ba565b50505050905090810190601f1680156105ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050565b6001600160e01b03199190911660009081526020819052604081206002810180549390915561ffff60a81b19909216600160b01b1790915590565b604080516001600160a01b03851681526020810184905280820183905290517f6661bd139fd995bcff1146c206e63c916313b157f54a0412b0cd689cfb93519c9181900360600190a1505050565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b196001600160a01b039093166101000260ff60a81b19909116600360a81b17610100600160a81b0319161791909116600160b01b179055565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b1992151560ff60a81b19909116600160a91b1760ff19161791909116600160b01b179055565b6001600160e01b031991909116600090815260208190526040902060028101805460019092019290925560ff60a81b1916600160a81b1760ff60b01b1916600160b01b17905556fea265627a7a7231582018157bd16fe6d161f68cd0e0142a7890bf3b07261c4cc7663965228360bc311164736f6c634300050b0032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7C4 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3AEB512C GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x3AEB512C EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x6C33E7EB EQ PUSH2 0x3F7 JUMPI DUP1 PUSH4 0x7C4D18BD EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xD2F65FBC EQ PUSH2 0x476 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0xD9B9993 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x1D77D696 EQ PUSH2 0x37E JUMPI JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH1 0x1F NOT ADD DUP3 MSTORE DUP4 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP6 POP POP PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP3 POP PUSH2 0xE3 SWAP2 POP POP JUMPI PUSH2 0xDE PUSH1 0x0 PUSH2 0x4B0 JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x117 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x173 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x164 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH2 0x16D DUP2 PUSH2 0x4B0 JUMP JUMPDEST POP PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xDE SWAP1 PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x207 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x236 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xDE SWAP1 PUSH1 0xFF AND PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x26A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2A4 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B0 JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x516 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x615 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x650 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x69E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x6FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x747 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND DUP2 SSTORE SWAP6 DUP5 MSTORE PUSH1 0x3 ADD DUP3 MSTORE DUP3 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x57D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP2 SWAP1 PUSH2 0x60D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5D2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5BA JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5FF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP2 SSTORE PUSH2 0xFFFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x6661BD139FD995BCFF1146C206E63C916313B157F54A0412B0CD689CFB93519C SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH2 0x100 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x3 PUSH1 0xA8 SHL OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP3 ISZERO ISZERO PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA9 SHL OR PUSH1 0xFF NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 XOR ISZERO PUSH28 0xD16FE6D161F68CD0E0142A7890BF3B07261C4CC7663965228360BC31 GT PUSH5 0x736F6C6343 STOP SDIV SIGNEXTEND STOP ORIGIN ",
              "sourceMap": "55:336:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;55:336:0;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052600436106100705760003560e01c80633aeb512c1161004e5780633aeb512c146103b85780636c33e7eb146103f75780637c4d18bd1461043a578063d2f65fbc1461047657610070565b80630d9b9993146102a85780631cff79cd146102fc5780631d77d6961461037e575b60008035905060008036604051602001808383808284376040805191909301818103601f19018252835280516020918201206001600160e01b031989166000908152918290529290206002015491955050600160b01b900460ff1692506100e3915050576100de60006104b0565b6102a4565b60006001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561011757fe5b1415610173576001600160e01b031982166000908152602081815260408083208484526003019091529020548061016457506001600160e01b031982166000908152602081905260409020545b61016d816104b0565b506102a4565b60016001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156101a757fe5b14156101d3576001600160e01b031982166000908152602081905260409020600101546100de906104b0565b60026001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561020757fe5b1415610236576001600160e01b031982166000908152602081905260409020600201546100de9060ff166104b0565b60036001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561026a57fe5b14156102a4576001600160e01b031982166000908152602081905260409020600201546102a49061010090046001600160a01b03166104b0565b5050005b3480156102b457600080fd5b506102e8600480360360608110156102cb57600080fd5b506001600160e01b031981351690602081013590604001356104c2565b604080519115158252519081900360200190f35b61037c6004803603604081101561031257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b509092509050610516565b005b34801561038a57600080fd5b506102e8600480360360408110156103a157600080fd5b506001600160e01b03198135169060200135610615565b3480156103c457600080fd5b5061037c600480360360608110156103db57600080fd5b506001600160a01b038135169060208101359060400135610650565b34801561040357600080fd5b5061037c6004803603604081101561041a57600080fd5b5080356001600160e01b03191690602001356001600160a01b031661069e565b34801561044657600080fd5b5061037c6004803603604081101561045d57600080fd5b506001600160e01b0319813516906020013515156106fc565b34801561048257600080fd5b5061037c6004803603604081101561049957600080fd5b506001600160e01b03198135169060200135610747565b60405160208101604052818152602081f35b6001600160e01b03199290921660008181526020818152604080832060028101805460ff60a81b19168155958452600301825282209490945590815291829052805460ff60b01b1916600160b01b17905590565b60006060846001600160a01b0316348585604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114610578576040519150601f19603f3d011682016040523d82523d6000602084013e61057d565b606091505b509150915081819061060d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105d25781810151838201526020016105ba565b50505050905090810190601f1680156105ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050565b6001600160e01b03199190911660009081526020819052604081206002810180549390915561ffff60a81b19909216600160b01b1790915590565b604080516001600160a01b03851681526020810184905280820183905290517f6661bd139fd995bcff1146c206e63c916313b157f54a0412b0cd689cfb93519c9181900360600190a1505050565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b196001600160a01b039093166101000260ff60a81b19909116600360a81b17610100600160a81b0319161791909116600160b01b179055565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b1992151560ff60a81b19909116600160a91b1760ff19161791909116600160b01b179055565b6001600160e01b031991909116600090815260208190526040902060028101805460019092019290925560ff60a81b1916600160a81b1760ff60b01b1916600160b01b17905556fea265627a7a7231582018157bd16fe6d161f68cd0e0142a7890bf3b07261c4cc7663965228360bc311164736f6c634300050b0032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3AEB512C GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x3AEB512C EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x6C33E7EB EQ PUSH2 0x3F7 JUMPI DUP1 PUSH4 0x7C4D18BD EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xD2F65FBC EQ PUSH2 0x476 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0xD9B9993 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x1D77D696 EQ PUSH2 0x37E JUMPI JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH1 0x1F NOT ADD DUP3 MSTORE DUP4 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP6 POP POP PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP3 POP PUSH2 0xE3 SWAP2 POP POP JUMPI PUSH2 0xDE PUSH1 0x0 PUSH2 0x4B0 JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x117 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x173 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x164 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH2 0x16D DUP2 PUSH2 0x4B0 JUMP JUMPDEST POP PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xDE SWAP1 PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x207 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x236 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xDE SWAP1 PUSH1 0xFF AND PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x26A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2A4 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B0 JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x516 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x615 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x650 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x69E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x6FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x747 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND DUP2 SSTORE SWAP6 DUP5 MSTORE PUSH1 0x3 ADD DUP3 MSTORE DUP3 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x57D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP2 SWAP1 PUSH2 0x60D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5D2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5BA JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5FF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP2 SSTORE PUSH2 0xFFFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x6661BD139FD995BCFF1146C206E63C916313B157F54A0412B0CD689CFB93519C SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH2 0x100 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x3 PUSH1 0xA8 SHL OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP3 ISZERO ISZERO PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA9 SHL OR PUSH1 0xFF NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 XOR ISZERO PUSH28 0xD16FE6D161F68CD0E0142A7890BF3B07261C4CC7663965228360BC31 GT PUSH5 0x736F6C6343 STOP SDIV SIGNEXTEND STOP ORIGIN ",
              "sourceMap": "55:336:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;707:11:1;772:1;759:15;751:23;;794:16;840:8;;823:26;;;;;;;30:3:-1;22:6;14;1:33;823:26:1;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;823:26:1;;813:37;;49:4:-1;813:37:1;;;;-1:-1:-1;;;;;;866:16:1;;:10;:16;;;;;;;;;;:20;;;813:37;;-1:-1:-1;;;;;866:20:1;;;;;-1:-1:-1;861:1034:1;;-1:-1:-1;;861:1034:1;982:21;997:5;982:14;:21::i;:::-;861:1034;;;1068:21;-1:-1:-1;;;;;;1038:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1038:26:1;;;;:51;;;;;;;;;1034:851;;;-1:-1:-1;;;;;;1125:16:1;;1109:13;1125:16;;;;;;;;;;;:40;;;:30;;:40;;;;;;1325:10;1321:94;;-1:-1:-1;;;;;;;1367:16:1;;:10;:16;;;;;;;;;;:29;1321:94;1432:21;1447:5;1432:14;:21::i;:::-;1034:851;;;;1508:21;-1:-1:-1;;;;;;1478:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1478:26:1;;;;:51;;;;;;;;;1474:411;;;-1:-1:-1;;;;;;1564:16:1;;:10;:16;;;;;;;;;;:29;;;1549:45;;:14;:45::i;1474:411::-;1649:18;-1:-1:-1;;;;;;1619:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1619:26:1;;;;:48;;;;;;;;;1615:270;;;-1:-1:-1;;;;;;1702:16:1;;:10;:16;;;;;;;;;;:26;;;1687:42;;1702:26;;1687:14;:42::i;1615:270::-;1784:21;-1:-1:-1;;;;;;1754:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1754:26:1;;;;:51;;;;;;;;;1750:135;;;-1:-1:-1;;;;;;1840:16:1;;:10;:16;;;;;;;;;;:29;;;1825:45;;1840:29;;;-1:-1:-1;;;;;1840:29:1;1825:14;:45::i;:::-;669:1232;;55:336:0;3087:303:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3087:303:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3087:303:1;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2142:226;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;2142:226:1;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;2142:226:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2142:226:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;2142:226:1;;-1:-1:-1;2142:226:1;-1:-1:-1;2142:226:1;:::i;:::-;;2560:233;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2560:233:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;2560:233:1;;;;;;;;:::i;190:199:0:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;190:199:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;190:199:0;;;;;;;;;;;;;:::i;4383:218:1:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4383:218:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4383:218:1;;-1:-1:-1;;;;;;4383:218:1;;;;;-1:-1:-1;;;;;4383:218:1;;:::i;3985:206::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3985:206:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3985:206:1;;;;;;;;;;:::i;3581:218::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3581:218:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3581:218:1;;;;;;;;:::i;5437:244::-;5543:4;5537:11;5589:2;5578:9;5574:18;5568:4;5561:32;5624:6;5613:9;5606:25;5662:2;5651:9;5644:21;3087:303;-1:-1:-1;;;;;;3233:17:1;;;;3217:4;3233:17;;;;;;;;;;;:27;;;:51;;-1:-1:-1;;;;3233:51:1;;;3294:42;;;:31;;:42;;;;:51;;;;3355:17;;;;;;;:28;;-1:-1:-1;;;;3355:28:1;-1:-1:-1;;;3355:28:1;;;3217:4;3087:303::o;2142:226::-;2262:7;2271:16;2291:7;-1:-1:-1;;;;;2291:12:1;2310:9;2321:5;;2291:36;;;;;30:3:-1;22:6;14;1:33;2291:36:1;;45:16:-1;;;-1:-1;2291:36:1;;-1:-1:-1;2291:36:1;;-1:-1:-1;;2291:36:1;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2261:66:1;;;;2345:2;2356:3;2337:24;;;;;-1:-1:-1;;;2337:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2337:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2142:226;;;;;:::o;2560:233::-;-1:-1:-1;;;;;;2648:17:1;;;;2632:4;2648:17;;;;;;;;;;:27;;;:51;;2709:39;;;;-1:-1:-1;;;;2758:28:1;;;-1:-1:-1;;;2758:28:1;;;;2632:4;2560:233::o;190:199:0:-;330:52;;;-1:-1:-1;;;;;330:52:0;;;;;;;;;;;;;;;;;;;;;;;;;;;190:199;;;:::o;4383:218:1:-;-1:-1:-1;;;;;;4456:17:1;;;;:10;:17;;;;;;;;;;:27;;:51;;-1:-1:-1;;;;;;;;;4517:39:1;;;;;-1:-1:-1;;;;4456:51:1;;;-1:-1:-1;;;4456:51:1;-1:-1:-1;;;;;;4517:39:1;;4566:28;;;;-1:-1:-1;;;4566:28:1;;;4383:218::o;3985:206::-;-1:-1:-1;;;;;;4052:17:1;;;;:10;:17;;;;;;;;;;4082:18;4052:27;:48;;-1:-1:-1;;;;4110:36:1;;;-1:-1:-1;;;;4052:48:1;;;-1:-1:-1;;;4052:48:1;-1:-1:-1;;4110:36:1;;4156:28;;;;-1:-1:-1;;;4156:28:1;;;3985:206::o;3581:218::-;-1:-1:-1;;;;;;3654:17:1;;;;:10;:17;;;;;;;;;;:27;;;:51;;3684:21;3715:30;;;:39;;;;-1:-1:-1;;;;3654:51:1;-1:-1:-1;;;3654:51:1;-1:-1:-1;;;;3764:28:1;-1:-1:-1;;;3764:28:1;;;3581:218::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "397600",
                "executionCost": "436",
                "totalCost": "398036"
              },
              "external": {
                "": "infinite",
                "execute(address,bytes)": "infinite",
                "setMockAddress(bytes4,address)": "20701",
                "setMockBool(bytes4,bool)": "20676",
                "setMockBytes32(bytes4,bytes32)": "40680",
                "setMockUint256(bytes4,uint256)": "40686",
                "setMockUint256WithParam(bytes4,bytes32,uint256)": "60959",
                "updateTranscoderWithFees(address,uint256,uint256)": "1872"
              }
            },
            "methodIdentifiers": {
              "execute(address,bytes)": "1cff79cd",
              "setMockAddress(bytes4,address)": "6c33e7eb",
              "setMockBool(bytes4,bool)": "7c4d18bd",
              "setMockBytes32(bytes4,bytes32)": "d2f65fbc",
              "setMockUint256(bytes4,uint256)": "1d77d696",
              "setMockUint256WithParam(bytes4,bytes32,uint256)": "0d9b9993",
              "updateTranscoderWithFees(address,uint256,uint256)": "3aeb512c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMockUint256WithParam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMockUint256\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transcoder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"updateTranscoderWithFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setMockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setMockBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setMockBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"UpdateTranscoderWithFees\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"execute(address,bytes)\":{\"details\":\"Call a function on a target address using provided calldata for a function\",\"params\":{\"_data\":\"Transaction data to be used to call the target contract\",\"_target\":\"Target contract to call with data\"}},\"setMockAddress(bytes4,address)\":{\"details\":\"Set a mock address value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock address value\"}},\"setMockBool(bytes4,bool)\":{\"details\":\"Set a mock bool value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock bool value\"}},\"setMockBytes32(bytes4,bytes32)\":{\"details\":\"Set a mock bytes32 value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE))) param _value Mock bytes32 value\"}},\"setMockUint256(bytes4,uint256)\":{\"details\":\"Set a mock uint256 value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock uint256 value\"}},\"setMockUint256WithParam(bytes4,bytes32,uint256)\":{\"details\":\"Set a mockuint256 value for a function with specific params passed\",\"params\":{\"_dataHash\":\"keccak256 hash of tx data i.e. keccak256(msg.data)\",\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock uint256 value\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/mocks/BondingManagerMock.sol\":\"BondingManagerMock\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/mocks/BondingManagerMock.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\nimport \\\"./GenericMock.sol\\\";\\n\\ncontract BondingManagerMock is GenericMock {\\n    event UpdateTranscoderWithFees(address transcoder, uint256 fees, uint256 round);\\n\\n    function updateTranscoderWithFees(\\n        address _transcoder,\\n        uint256 _fees,\\n        uint256 _round\\n    ) external {\\n        emit UpdateTranscoderWithFees(_transcoder, _fees, _round);\\n    }\\n}\\n\",\"keccak256\":\"0x962aca0d534520ccfb955274929c7ed224863439b4ff098f7dbfc2abcb3c1f32\"},\"contracts/test/mocks/GenericMock.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\n/**\\n * @title A mock contract that can set/return mock values and execute functions\\n * on target contracts\\n */\\ncontract GenericMock {\\n    struct MockValue {\\n        uint256 uint256Value;\\n        bytes32 bytes32Value;\\n        bool boolValue;\\n        address addressValue;\\n        MockValueType valueType;\\n        bool set;\\n        mapping(bytes32 => uint256) uint256Values;\\n    }\\n\\n    enum MockValueType {\\n        Uint256,\\n        Bytes32,\\n        Bool,\\n        Address\\n    }\\n\\n    // Track function selectors and mapped mock values\\n    mapping(bytes4 => MockValue) mockValues;\\n\\n    /**\\n     * @dev Return mock value for a functione\\n     */\\n    function() external payable {\\n        bytes4 func;\\n        assembly {\\n            func := calldataload(0)\\n        }\\n\\n        bytes32 dataHash = keccak256(abi.encodePacked(msg.data));\\n\\n        if (!mockValues[func].set) {\\n            // If mock value not set, default to return a bool with value false\\n            mLoadAndReturn(false);\\n        } else {\\n            if (mockValues[func].valueType == MockValueType.Uint256) {\\n                uint256 value = mockValues[func].uint256Values[dataHash];\\n                // TODO: Make sure we don't go into this code block if the value set\\n                // for dataHash should actually be 0\\n                if (value == 0) {\\n                    value = mockValues[func].uint256Value;\\n                }\\n                mLoadAndReturn(value);\\n            } else if (mockValues[func].valueType == MockValueType.Bytes32) {\\n                mLoadAndReturn(mockValues[func].bytes32Value);\\n            } else if (mockValues[func].valueType == MockValueType.Bool) {\\n                mLoadAndReturn(mockValues[func].boolValue);\\n            } else if (mockValues[func].valueType == MockValueType.Address) {\\n                mLoadAndReturn(mockValues[func].addressValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Call a function on a target address using provided calldata for a function\\n     * @param _target Target contract to call with data\\n     * @param _data Transaction data to be used to call the target contract\\n     */\\n    function execute(address _target, bytes calldata _data) external payable {\\n        // solium-disable-next-line\\n        (bool ok, bytes memory res) = _target.call.value(msg.value)(_data);\\n        require(ok, string(res));\\n    }\\n\\n    /**\\n     * @dev Set a mock uint256 value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock uint256 value\\n     */\\n    function setMockUint256(bytes4 _func, uint256 _value) external returns (bool) {\\n        mockValues[_func].valueType = MockValueType.Uint256;\\n        mockValues[_func].uint256Value = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mockuint256 value for a function with specific params passed\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _dataHash keccak256 hash of tx data i.e. keccak256(msg.data)\\n     * @param _value Mock uint256 value\\n     */\\n    function setMockUint256WithParam(\\n        bytes4 _func,\\n        bytes32 _dataHash,\\n        uint256 _value\\n    ) external returns (bool) {\\n        mockValues[_func].valueType = MockValueType.Uint256;\\n        mockValues[_func].uint256Values[_dataHash] = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock bytes32 value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * param _value Mock bytes32 value\\n     */\\n    function setMockBytes32(bytes4 _func, bytes32 _value) external {\\n        mockValues[_func].valueType = MockValueType.Bytes32;\\n        mockValues[_func].bytes32Value = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock bool value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock bool value\\n     */\\n    function setMockBool(bytes4 _func, bool _value) external {\\n        mockValues[_func].valueType = MockValueType.Bool;\\n        mockValues[_func].boolValue = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock address value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock address value\\n     */\\n    function setMockAddress(bytes4 _func, address _value) external {\\n        mockValues[_func].valueType = MockValueType.Address;\\n        mockValues[_func].addressValue = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Load a uint256 value into memory and return it\\n     * @param _value Uint256 value\\n     */\\n    function mLoadAndReturn(uint256 _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load a bytes32 value into memory and return it\\n     * @param _value Bytes32 value\\n     */\\n    function mLoadAndReturn(bytes32 _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load a bool value into memory and return it\\n     * @param _value Bool value\\n     */\\n    function mLoadAndReturn(bool _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load an address value into memory and return it\\n     * @param _value Address value\\n     */\\n    function mLoadAndReturn(address _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9fab5565894c07d7b3523c79dc741d60d3d6f460e2a4462bd5def2b763acfd0f\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/test/mocks/GenericMock.sol": {
        "GenericMock": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes32",
                  "name": "_dataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "setMockUint256WithParam",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "execute",
              "outputs": [],
              "payable": true,
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "setMockUint256",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "address",
                  "name": "_value",
                  "type": "address"
                }
              ],
              "name": "setMockAddress",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bool",
                  "name": "_value",
                  "type": "bool"
                }
              ],
              "name": "setMockBool",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes32",
                  "name": "_value",
                  "type": "bytes32"
                }
              ],
              "name": "setMockBytes32",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "payable": true,
              "stateMutability": "payable",
              "type": "fallback"
            }
          ],
          "devdoc": {
            "methods": {
              "execute(address,bytes)": {
                "details": "Call a function on a target address using provided calldata for a function",
                "params": {
                  "_data": "Transaction data to be used to call the target contract",
                  "_target": "Target contract to call with data"
                }
              },
              "setMockAddress(bytes4,address)": {
                "details": "Set a mock address value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock address value"
                }
              },
              "setMockBool(bytes4,bool)": {
                "details": "Set a mock bool value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock bool value"
                }
              },
              "setMockBytes32(bytes4,bytes32)": {
                "details": "Set a mock bytes32 value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE))) param _value Mock bytes32 value"
                }
              },
              "setMockUint256(bytes4,uint256)": {
                "details": "Set a mock uint256 value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock uint256 value"
                }
              },
              "setMockUint256WithParam(bytes4,bytes32,uint256)": {
                "details": "Set a mockuint256 value for a function with specific params passed",
                "params": {
                  "_dataHash": "keccak256 hash of tx data i.e. keccak256(msg.data)",
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock uint256 value"
                }
              }
            },
            "title": "A mock contract that can set/return mock values and execute functions on target contracts"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5061071c806100206000396000f3fe6080604052600436106100555760003560e01c80630d9b99931461028d5780631cff79cd146102e15780631d77d696146103635780636c33e7eb1461039d5780637c4d18bd146103e0578063d2f65fbc1461041c575b60008035905060008036604051602001808383808284376040805191909301818103601f19018252835280516020918201206001600160e01b031989166000908152918290529290206002015491955050600160b01b900460ff1692506100c8915050576100c36000610456565b610289565b60006001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156100fc57fe5b1415610158576001600160e01b031982166000908152602081815260408083208484526003019091529020548061014957506001600160e01b031982166000908152602081905260409020545b61015281610456565b50610289565b60016001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561018c57fe5b14156101b8576001600160e01b031982166000908152602081905260409020600101546100c390610456565b60026001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156101ec57fe5b141561021b576001600160e01b031982166000908152602081905260409020600201546100c39060ff16610456565b60036001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561024f57fe5b1415610289576001600160e01b031982166000908152602081905260409020600201546102899061010090046001600160a01b0316610456565b5050005b34801561029957600080fd5b506102cd600480360360608110156102b057600080fd5b506001600160e01b03198135169060208101359060400135610468565b604080519115158252519081900360200190f35b610361600480360360408110156102f757600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561032257600080fd5b82018360208201111561033457600080fd5b8035906020019184600183028401116401000000008311171561035657600080fd5b5090925090506104bc565b005b34801561036f57600080fd5b506102cd6004803603604081101561038657600080fd5b506001600160e01b031981351690602001356105bb565b3480156103a957600080fd5b50610361600480360360408110156103c057600080fd5b5080356001600160e01b03191690602001356001600160a01b03166105f6565b3480156103ec57600080fd5b506103616004803603604081101561040357600080fd5b506001600160e01b031981351690602001351515610654565b34801561042857600080fd5b506103616004803603604081101561043f57600080fd5b506001600160e01b0319813516906020013561069f565b60405160208101604052818152602081f35b6001600160e01b03199290921660008181526020818152604080832060028101805460ff60a81b19168155958452600301825282209490945590815291829052805460ff60b01b1916600160b01b17905590565b60006060846001600160a01b0316348585604051808383808284376040519201945060009350909150508083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b50915091508181906105b35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610578578181015183820152602001610560565b50505050905090810190601f1680156105a55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050565b6001600160e01b03199190911660009081526020819052604081206002810180549390915561ffff60a81b19909216600160b01b1790915590565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b196001600160a01b039093166101000260ff60a81b19909116600360a81b17610100600160a81b0319161791909116600160b01b179055565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b1992151560ff60a81b19909116600160a91b1760ff19161791909116600160b01b179055565b6001600160e01b031991909116600090815260208190526040902060028101805460019092019290925560ff60a81b1916600160a81b1760ff60b01b1916600160b01b17905556fea265627a7a72315820b0965eacbf835eee8a1075e3b7029c2c1a7db204e7647f1ebc1e3abb5a5da99d64736f6c634300050b0032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD9B9993 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x1D77D696 EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x6C33E7EB EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x7C4D18BD EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xD2F65FBC EQ PUSH2 0x41C JUMPI JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH1 0x1F NOT ADD DUP3 MSTORE DUP4 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP6 POP POP PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP3 POP PUSH2 0xC8 SWAP2 POP POP JUMPI PUSH2 0xC3 PUSH1 0x0 PUSH2 0x456 JUMP JUMPDEST PUSH2 0x289 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x158 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x149 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH2 0x152 DUP2 PUSH2 0x456 JUMP JUMPDEST POP PUSH2 0x289 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x18C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xC3 SWAP1 PUSH2 0x456 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1EC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x21B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xC3 SWAP1 PUSH1 0xFF AND PUSH2 0x456 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x24F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x289 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x289 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x456 JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x468 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x654 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x69F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND DUP2 SSTORE SWAP6 DUP5 MSTORE PUSH1 0x3 ADD DUP3 MSTORE DUP3 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x51E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x523 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP2 SWAP1 PUSH2 0x5B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x578 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x560 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5A5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP2 SSTORE PUSH2 0xFFFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH2 0x100 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x3 PUSH1 0xA8 SHL OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP3 ISZERO ISZERO PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA9 SHL OR PUSH1 0xFF NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xb0 SWAP7 0x5e 0xac 0xbf DUP4 0x5e 0xee DUP11 LT PUSH22 0xE3B7029C2C1A7DB204E7647F1EBC1E3ABB5A5DA99D64 PUSH20 0x6F6C634300050B00320000000000000000000000 ",
              "sourceMap": "137:5910:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;137:5910:1;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052600436106100555760003560e01c80630d9b99931461028d5780631cff79cd146102e15780631d77d696146103635780636c33e7eb1461039d5780637c4d18bd146103e0578063d2f65fbc1461041c575b60008035905060008036604051602001808383808284376040805191909301818103601f19018252835280516020918201206001600160e01b031989166000908152918290529290206002015491955050600160b01b900460ff1692506100c8915050576100c36000610456565b610289565b60006001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156100fc57fe5b1415610158576001600160e01b031982166000908152602081815260408083208484526003019091529020548061014957506001600160e01b031982166000908152602081905260409020545b61015281610456565b50610289565b60016001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561018c57fe5b14156101b8576001600160e01b031982166000908152602081905260409020600101546100c390610456565b60026001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156101ec57fe5b141561021b576001600160e01b031982166000908152602081905260409020600201546100c39060ff16610456565b60036001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561024f57fe5b1415610289576001600160e01b031982166000908152602081905260409020600201546102899061010090046001600160a01b0316610456565b5050005b34801561029957600080fd5b506102cd600480360360608110156102b057600080fd5b506001600160e01b03198135169060208101359060400135610468565b604080519115158252519081900360200190f35b610361600480360360408110156102f757600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561032257600080fd5b82018360208201111561033457600080fd5b8035906020019184600183028401116401000000008311171561035657600080fd5b5090925090506104bc565b005b34801561036f57600080fd5b506102cd6004803603604081101561038657600080fd5b506001600160e01b031981351690602001356105bb565b3480156103a957600080fd5b50610361600480360360408110156103c057600080fd5b5080356001600160e01b03191690602001356001600160a01b03166105f6565b3480156103ec57600080fd5b506103616004803603604081101561040357600080fd5b506001600160e01b031981351690602001351515610654565b34801561042857600080fd5b506103616004803603604081101561043f57600080fd5b506001600160e01b0319813516906020013561069f565b60405160208101604052818152602081f35b6001600160e01b03199290921660008181526020818152604080832060028101805460ff60a81b19168155958452600301825282209490945590815291829052805460ff60b01b1916600160b01b17905590565b60006060846001600160a01b0316348585604051808383808284376040519201945060009350909150508083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b50915091508181906105b35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610578578181015183820152602001610560565b50505050905090810190601f1680156105a55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050565b6001600160e01b03199190911660009081526020819052604081206002810180549390915561ffff60a81b19909216600160b01b1790915590565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b196001600160a01b039093166101000260ff60a81b19909116600360a81b17610100600160a81b0319161791909116600160b01b179055565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b1992151560ff60a81b19909116600160a91b1760ff19161791909116600160b01b179055565b6001600160e01b031991909116600090815260208190526040902060028101805460019092019290925560ff60a81b1916600160a81b1760ff60b01b1916600160b01b17905556fea265627a7a72315820b0965eacbf835eee8a1075e3b7029c2c1a7db204e7647f1ebc1e3abb5a5da99d64736f6c634300050b0032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD9B9993 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x1D77D696 EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x6C33E7EB EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x7C4D18BD EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xD2F65FBC EQ PUSH2 0x41C JUMPI JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH1 0x1F NOT ADD DUP3 MSTORE DUP4 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP6 POP POP PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP3 POP PUSH2 0xC8 SWAP2 POP POP JUMPI PUSH2 0xC3 PUSH1 0x0 PUSH2 0x456 JUMP JUMPDEST PUSH2 0x289 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x158 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x149 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH2 0x152 DUP2 PUSH2 0x456 JUMP JUMPDEST POP PUSH2 0x289 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x18C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xC3 SWAP1 PUSH2 0x456 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1EC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x21B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xC3 SWAP1 PUSH1 0xFF AND PUSH2 0x456 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x24F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x289 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x289 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x456 JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x468 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x654 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x69F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND DUP2 SSTORE SWAP6 DUP5 MSTORE PUSH1 0x3 ADD DUP3 MSTORE DUP3 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x51E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x523 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP2 SWAP1 PUSH2 0x5B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x578 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x560 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5A5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP2 SSTORE PUSH2 0xFFFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH2 0x100 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x3 PUSH1 0xA8 SHL OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP3 ISZERO ISZERO PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA9 SHL OR PUSH1 0xFF NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xb0 SWAP7 0x5e 0xac 0xbf DUP4 0x5e 0xee DUP11 LT PUSH22 0xE3B7029C2C1A7DB204E7647F1EBC1E3ABB5A5DA99D64 PUSH20 0x6F6C634300050B00320000000000000000000000 ",
              "sourceMap": "137:5910:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;707:11;772:1;759:15;751:23;;794:16;840:8;;823:26;;;;;;;30:3:-1;22:6;14;1:33;823:26:1;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;823:26:1;;813:37;;49:4:-1;813:37:1;;;;-1:-1:-1;;;;;;866:16:1;;:10;:16;;;;;;;;;;:20;;;813:37;;-1:-1:-1;;;;;866:20:1;;;;;-1:-1:-1;861:1034:1;;-1:-1:-1;;861:1034:1;982:21;997:5;982:14;:21::i;:::-;861:1034;;;1068:21;-1:-1:-1;;;;;;1038:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1038:26:1;;;;:51;;;;;;;;;1034:851;;;-1:-1:-1;;;;;;1125:16:1;;1109:13;1125:16;;;;;;;;;;;:40;;;:30;;:40;;;;;;1325:10;1321:94;;-1:-1:-1;;;;;;;1367:16:1;;:10;:16;;;;;;;;;;:29;1321:94;1432:21;1447:5;1432:14;:21::i;:::-;1034:851;;;;1508:21;-1:-1:-1;;;;;;1478:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1478:26:1;;;;:51;;;;;;;;;1474:411;;;-1:-1:-1;;;;;;1564:16:1;;:10;:16;;;;;;;;;;:29;;;1549:45;;:14;:45::i;1474:411::-;1649:18;-1:-1:-1;;;;;;1619:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1619:26:1;;;;:48;;;;;;;;;1615:270;;;-1:-1:-1;;;;;;1702:16:1;;:10;:16;;;;;;;;;;:26;;;1687:42;;1702:26;;1687:14;:42::i;1615:270::-;1784:21;-1:-1:-1;;;;;;1754:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1754:26:1;;;;:51;;;;;;;;;1750:135;;;-1:-1:-1;;;;;;1840:16:1;;:10;:16;;;;;;;;;;:29;;;1825:45;;1840:29;;;-1:-1:-1;;;;;1840:29:1;1825:14;:45::i;:::-;669:1232;;137:5910;3087:303;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3087:303:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3087:303:1;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2142:226;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;2142:226:1;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;2142:226:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2142:226:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;2142:226:1;;-1:-1:-1;2142:226:1;-1:-1:-1;2142:226:1;:::i;:::-;;2560:233;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2560:233:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;2560:233:1;;;;;;;;:::i;4383:218::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4383:218:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4383:218:1;;-1:-1:-1;;;;;;4383:218:1;;;;;-1:-1:-1;;;;;4383:218:1;;:::i;3985:206::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3985:206:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3985:206:1;;;;;;;;;;:::i;3581:218::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3581:218:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3581:218:1;;;;;;;;:::i;5437:244::-;5543:4;5537:11;5589:2;5578:9;5574:18;5568:4;5561:32;5624:6;5613:9;5606:25;5662:2;5651:9;5644:21;3087:303;-1:-1:-1;;;;;;3233:17:1;;;;3217:4;3233:17;;;;;;;;;;;:27;;;:51;;-1:-1:-1;;;;3233:51:1;;;3294:42;;;:31;;:42;;;;:51;;;;3355:17;;;;;;;:28;;-1:-1:-1;;;;3355:28:1;-1:-1:-1;;;3355:28:1;;;3217:4;3087:303::o;2142:226::-;2262:7;2271:16;2291:7;-1:-1:-1;;;;;2291:12:1;2310:9;2321:5;;2291:36;;;;;30:3:-1;22:6;14;1:33;2291:36:1;;45:16:-1;;;-1:-1;2291:36:1;;-1:-1:-1;2291:36:1;;-1:-1:-1;;2291:36:1;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2261:66:1;;;;2345:2;2356:3;2337:24;;;;;-1:-1:-1;;;2337:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2337:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2142:226;;;;;:::o;2560:233::-;-1:-1:-1;;;;;;2648:17:1;;;;2632:4;2648:17;;;;;;;;;;:27;;;:51;;2709:39;;;;-1:-1:-1;;;;2758:28:1;;;-1:-1:-1;;;2758:28:1;;;;2632:4;2560:233::o;4383:218::-;-1:-1:-1;;;;;;4456:17:1;;;;:10;:17;;;;;;;;;;:27;;:51;;-1:-1:-1;;;;;;;;;4517:39:1;;;;;-1:-1:-1;;;;4456:51:1;;;-1:-1:-1;;;4456:51:1;-1:-1:-1;;;;;;4517:39:1;;4566:28;;;;-1:-1:-1;;;4566:28:1;;;4383:218::o;3985:206::-;-1:-1:-1;;;;;;4052:17:1;;;;:10;:17;;;;;;;;;;4082:18;4052:27;:48;;-1:-1:-1;;;;4110:36:1;;;-1:-1:-1;;;;4052:48:1;;;-1:-1:-1;;;4052:48:1;-1:-1:-1;;4110:36:1;;4156:28;;;;-1:-1:-1;;;4156:28:1;;;3985:206::o;3581:218::-;-1:-1:-1;;;;;;3654:17:1;;;;:10;:17;;;;;;;;;;:27;;;:51;;3684:21;3715:30;;;:39;;;;-1:-1:-1;;;;3654:51:1;-1:-1:-1;;;3654:51:1;-1:-1:-1;;;;3764:28:1;-1:-1:-1;;;3764:28:1;;;3581:218::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "364000",
                "executionCost": "399",
                "totalCost": "364399"
              },
              "external": {
                "": "infinite",
                "execute(address,bytes)": "infinite",
                "setMockAddress(bytes4,address)": "20723",
                "setMockBool(bytes4,bool)": "20698",
                "setMockBytes32(bytes4,bytes32)": "40702",
                "setMockUint256(bytes4,uint256)": "40663",
                "setMockUint256WithParam(bytes4,bytes32,uint256)": "60936"
              },
              "internal": {
                "mLoadAndReturn(address)": "infinite",
                "mLoadAndReturn(bool)": "infinite",
                "mLoadAndReturn(bytes32)": "infinite",
                "mLoadAndReturn(uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "execute(address,bytes)": "1cff79cd",
              "setMockAddress(bytes4,address)": "6c33e7eb",
              "setMockBool(bytes4,bool)": "7c4d18bd",
              "setMockBytes32(bytes4,bytes32)": "d2f65fbc",
              "setMockUint256(bytes4,uint256)": "1d77d696",
              "setMockUint256WithParam(bytes4,bytes32,uint256)": "0d9b9993"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMockUint256WithParam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMockUint256\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setMockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setMockBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setMockBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"methods\":{\"execute(address,bytes)\":{\"details\":\"Call a function on a target address using provided calldata for a function\",\"params\":{\"_data\":\"Transaction data to be used to call the target contract\",\"_target\":\"Target contract to call with data\"}},\"setMockAddress(bytes4,address)\":{\"details\":\"Set a mock address value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock address value\"}},\"setMockBool(bytes4,bool)\":{\"details\":\"Set a mock bool value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock bool value\"}},\"setMockBytes32(bytes4,bytes32)\":{\"details\":\"Set a mock bytes32 value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE))) param _value Mock bytes32 value\"}},\"setMockUint256(bytes4,uint256)\":{\"details\":\"Set a mock uint256 value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock uint256 value\"}},\"setMockUint256WithParam(bytes4,bytes32,uint256)\":{\"details\":\"Set a mockuint256 value for a function with specific params passed\",\"params\":{\"_dataHash\":\"keccak256 hash of tx data i.e. keccak256(msg.data)\",\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock uint256 value\"}}},\"title\":\"A mock contract that can set/return mock values and execute functions on target contracts\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/mocks/GenericMock.sol\":\"GenericMock\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/mocks/GenericMock.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\n/**\\n * @title A mock contract that can set/return mock values and execute functions\\n * on target contracts\\n */\\ncontract GenericMock {\\n    struct MockValue {\\n        uint256 uint256Value;\\n        bytes32 bytes32Value;\\n        bool boolValue;\\n        address addressValue;\\n        MockValueType valueType;\\n        bool set;\\n        mapping(bytes32 => uint256) uint256Values;\\n    }\\n\\n    enum MockValueType {\\n        Uint256,\\n        Bytes32,\\n        Bool,\\n        Address\\n    }\\n\\n    // Track function selectors and mapped mock values\\n    mapping(bytes4 => MockValue) mockValues;\\n\\n    /**\\n     * @dev Return mock value for a functione\\n     */\\n    function() external payable {\\n        bytes4 func;\\n        assembly {\\n            func := calldataload(0)\\n        }\\n\\n        bytes32 dataHash = keccak256(abi.encodePacked(msg.data));\\n\\n        if (!mockValues[func].set) {\\n            // If mock value not set, default to return a bool with value false\\n            mLoadAndReturn(false);\\n        } else {\\n            if (mockValues[func].valueType == MockValueType.Uint256) {\\n                uint256 value = mockValues[func].uint256Values[dataHash];\\n                // TODO: Make sure we don't go into this code block if the value set\\n                // for dataHash should actually be 0\\n                if (value == 0) {\\n                    value = mockValues[func].uint256Value;\\n                }\\n                mLoadAndReturn(value);\\n            } else if (mockValues[func].valueType == MockValueType.Bytes32) {\\n                mLoadAndReturn(mockValues[func].bytes32Value);\\n            } else if (mockValues[func].valueType == MockValueType.Bool) {\\n                mLoadAndReturn(mockValues[func].boolValue);\\n            } else if (mockValues[func].valueType == MockValueType.Address) {\\n                mLoadAndReturn(mockValues[func].addressValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Call a function on a target address using provided calldata for a function\\n     * @param _target Target contract to call with data\\n     * @param _data Transaction data to be used to call the target contract\\n     */\\n    function execute(address _target, bytes calldata _data) external payable {\\n        // solium-disable-next-line\\n        (bool ok, bytes memory res) = _target.call.value(msg.value)(_data);\\n        require(ok, string(res));\\n    }\\n\\n    /**\\n     * @dev Set a mock uint256 value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock uint256 value\\n     */\\n    function setMockUint256(bytes4 _func, uint256 _value) external returns (bool) {\\n        mockValues[_func].valueType = MockValueType.Uint256;\\n        mockValues[_func].uint256Value = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mockuint256 value for a function with specific params passed\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _dataHash keccak256 hash of tx data i.e. keccak256(msg.data)\\n     * @param _value Mock uint256 value\\n     */\\n    function setMockUint256WithParam(\\n        bytes4 _func,\\n        bytes32 _dataHash,\\n        uint256 _value\\n    ) external returns (bool) {\\n        mockValues[_func].valueType = MockValueType.Uint256;\\n        mockValues[_func].uint256Values[_dataHash] = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock bytes32 value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * param _value Mock bytes32 value\\n     */\\n    function setMockBytes32(bytes4 _func, bytes32 _value) external {\\n        mockValues[_func].valueType = MockValueType.Bytes32;\\n        mockValues[_func].bytes32Value = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock bool value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock bool value\\n     */\\n    function setMockBool(bytes4 _func, bool _value) external {\\n        mockValues[_func].valueType = MockValueType.Bool;\\n        mockValues[_func].boolValue = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock address value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock address value\\n     */\\n    function setMockAddress(bytes4 _func, address _value) external {\\n        mockValues[_func].valueType = MockValueType.Address;\\n        mockValues[_func].addressValue = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Load a uint256 value into memory and return it\\n     * @param _value Uint256 value\\n     */\\n    function mLoadAndReturn(uint256 _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load a bytes32 value into memory and return it\\n     * @param _value Bytes32 value\\n     */\\n    function mLoadAndReturn(bytes32 _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load a bool value into memory and return it\\n     * @param _value Bool value\\n     */\\n    function mLoadAndReturn(bool _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load an address value into memory and return it\\n     * @param _value Address value\\n     */\\n    function mLoadAndReturn(address _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9fab5565894c07d7b3523c79dc741d60d3d6f460e2a4462bd5def2b763acfd0f\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/test/mocks/MinterMock.sol": {
        "MinterMock": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes32",
                  "name": "_dataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "setMockUint256WithParam",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "execute",
              "outputs": [],
              "payable": true,
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "setMockUint256",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "trustedWithdrawETH",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "address",
                  "name": "_value",
                  "type": "address"
                }
              ],
              "name": "setMockAddress",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bool",
                  "name": "_value",
                  "type": "bool"
                }
              ],
              "name": "setMockBool",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_func",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes32",
                  "name": "_value",
                  "type": "bytes32"
                }
              ],
              "name": "setMockBytes32",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "payable": true,
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "TrustedWithdrawETH",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {
              "execute(address,bytes)": {
                "details": "Call a function on a target address using provided calldata for a function",
                "params": {
                  "_data": "Transaction data to be used to call the target contract",
                  "_target": "Target contract to call with data"
                }
              },
              "setMockAddress(bytes4,address)": {
                "details": "Set a mock address value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock address value"
                }
              },
              "setMockBool(bytes4,bool)": {
                "details": "Set a mock bool value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock bool value"
                }
              },
              "setMockBytes32(bytes4,bytes32)": {
                "details": "Set a mock bytes32 value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE))) param _value Mock bytes32 value"
                }
              },
              "setMockUint256(bytes4,uint256)": {
                "details": "Set a mock uint256 value for a function",
                "params": {
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock uint256 value"
                }
              },
              "setMockUint256WithParam(bytes4,bytes32,uint256)": {
                "details": "Set a mockuint256 value for a function with specific params passed",
                "params": {
                  "_dataHash": "keccak256 hash of tx data i.e. keccak256(msg.data)",
                  "_func": "Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))",
                  "_value": "Mock uint256 value"
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506107b8806100206000396000f3fe6080604052600436106100705760003560e01c806320283da91161004e57806320283da9146103b85780636c33e7eb146103f15780637c4d18bd14610434578063d2f65fbc1461047057610070565b80630d9b9993146102a85780631cff79cd146102fc5780631d77d6961461037e575b60008035905060008036604051602001808383808284376040805191909301818103601f19018252835280516020918201206001600160e01b031989166000908152918290529290206002015491955050600160b01b900460ff1692506100e3915050576100de60006104aa565b6102a4565b60006001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561011757fe5b1415610173576001600160e01b031982166000908152602081815260408083208484526003019091529020548061016457506001600160e01b031982166000908152602081905260409020545b61016d816104aa565b506102a4565b60016001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156101a757fe5b14156101d3576001600160e01b031982166000908152602081905260409020600101546100de906104aa565b60026001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561020757fe5b1415610236576001600160e01b031982166000908152602081905260409020600201546100de9060ff166104aa565b60036001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561026a57fe5b14156102a4576001600160e01b031982166000908152602081905260409020600201546102a49061010090046001600160a01b03166104aa565b5050005b3480156102b457600080fd5b506102e8600480360360608110156102cb57600080fd5b506001600160e01b031981351690602081013590604001356104bc565b604080519115158252519081900360200190f35b61037c6004803603604081101561031257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b509092509050610510565b005b34801561038a57600080fd5b506102e8600480360360408110156103a157600080fd5b506001600160e01b0319813516906020013561060f565b3480156103c457600080fd5b5061037c600480360360408110156103db57600080fd5b506001600160a01b03813516906020013561064a565b3480156103fd57600080fd5b5061037c6004803603604081101561041457600080fd5b5080356001600160e01b03191690602001356001600160a01b0316610692565b34801561044057600080fd5b5061037c6004803603604081101561045757600080fd5b506001600160e01b0319813516906020013515156106f0565b34801561047c57600080fd5b5061037c6004803603604081101561049357600080fd5b506001600160e01b0319813516906020013561073b565b60405160208101604052818152602081f35b6001600160e01b03199290921660008181526020818152604080832060028101805460ff60a81b19168155958452600301825282209490945590815291829052805460ff60b01b1916600160b01b17905590565b60006060846001600160a01b0316348585604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114610572576040519150601f19603f3d011682016040523d82523d6000602084013e610577565b606091505b50915091508181906106075760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105cc5781810151838201526020016105b4565b50505050905090810190601f1680156105f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050565b6001600160e01b03199190911660009081526020819052604081206002810180549390915561ffff60a81b19909216600160b01b1790915590565b604080516001600160a01b03841681526020810183905281517f85e4ffba4f222353d622111e3ca71c787704d7e3d003704e654527a3d3d02167929181900390910190a15050565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b196001600160a01b039093166101000260ff60a81b19909116600360a81b17610100600160a81b0319161791909116600160b01b179055565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b1992151560ff60a81b19909116600160a91b1760ff19161791909116600160b01b179055565b6001600160e01b031991909116600090815260208190526040902060028101805460019092019290925560ff60a81b1916600160a81b1760ff60b01b1916600160b01b17905556fea265627a7a7231582090b46a968f0661c5da2aeac367518fe3d9a2f0825713f3f957ea7aa238fad1d764736f6c634300050b0032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B8 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x20283DA9 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x20283DA9 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x6C33E7EB EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x7C4D18BD EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0xD2F65FBC EQ PUSH2 0x470 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0xD9B9993 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x1D77D696 EQ PUSH2 0x37E JUMPI JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH1 0x1F NOT ADD DUP3 MSTORE DUP4 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP6 POP POP PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP3 POP PUSH2 0xE3 SWAP2 POP POP JUMPI PUSH2 0xDE PUSH1 0x0 PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x117 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x173 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x164 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH2 0x16D DUP2 PUSH2 0x4AA JUMP JUMPDEST POP PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xDE SWAP1 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x207 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x236 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xDE SWAP1 PUSH1 0xFF AND PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x26A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2A4 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4AA JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x510 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x60F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x64A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x692 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x6F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x73B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND DUP2 SSTORE SWAP6 DUP5 MSTORE PUSH1 0x3 ADD DUP3 MSTORE DUP3 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x577 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP2 SWAP1 PUSH2 0x607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5CC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5B4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5F9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP2 SSTORE PUSH2 0xFFFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x85E4FFBA4F222353D622111E3CA71C787704D7E3D003704E654527A3D3D02167 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH2 0x100 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x3 PUSH1 0xA8 SHL OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP3 ISZERO ISZERO PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA9 SHL OR PUSH1 0xFF NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP1 0xb4 PUSH11 0x968F0661C5DA2AEAC36751 DUP16 0xe3 0xd9 LOG2 CREATE DUP3 JUMPI SGT RETURN 0xf9 JUMPI 0xea PUSH27 0xA238FAD1D764736F6C634300050B00320000000000000000000000 ",
              "sourceMap": "55:223:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;55:223:2;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052600436106100705760003560e01c806320283da91161004e57806320283da9146103b85780636c33e7eb146103f15780637c4d18bd14610434578063d2f65fbc1461047057610070565b80630d9b9993146102a85780631cff79cd146102fc5780631d77d6961461037e575b60008035905060008036604051602001808383808284376040805191909301818103601f19018252835280516020918201206001600160e01b031989166000908152918290529290206002015491955050600160b01b900460ff1692506100e3915050576100de60006104aa565b6102a4565b60006001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561011757fe5b1415610173576001600160e01b031982166000908152602081815260408083208484526003019091529020548061016457506001600160e01b031982166000908152602081905260409020545b61016d816104aa565b506102a4565b60016001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156101a757fe5b14156101d3576001600160e01b031982166000908152602081905260409020600101546100de906104aa565b60026001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561020757fe5b1415610236576001600160e01b031982166000908152602081905260409020600201546100de9060ff166104aa565b60036001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561026a57fe5b14156102a4576001600160e01b031982166000908152602081905260409020600201546102a49061010090046001600160a01b03166104aa565b5050005b3480156102b457600080fd5b506102e8600480360360608110156102cb57600080fd5b506001600160e01b031981351690602081013590604001356104bc565b604080519115158252519081900360200190f35b61037c6004803603604081101561031257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b509092509050610510565b005b34801561038a57600080fd5b506102e8600480360360408110156103a157600080fd5b506001600160e01b0319813516906020013561060f565b3480156103c457600080fd5b5061037c600480360360408110156103db57600080fd5b506001600160a01b03813516906020013561064a565b3480156103fd57600080fd5b5061037c6004803603604081101561041457600080fd5b5080356001600160e01b03191690602001356001600160a01b0316610692565b34801561044057600080fd5b5061037c6004803603604081101561045757600080fd5b506001600160e01b0319813516906020013515156106f0565b34801561047c57600080fd5b5061037c6004803603604081101561049357600080fd5b506001600160e01b0319813516906020013561073b565b60405160208101604052818152602081f35b6001600160e01b03199290921660008181526020818152604080832060028101805460ff60a81b19168155958452600301825282209490945590815291829052805460ff60b01b1916600160b01b17905590565b60006060846001600160a01b0316348585604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114610572576040519150601f19603f3d011682016040523d82523d6000602084013e610577565b606091505b50915091508181906106075760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105cc5781810151838201526020016105b4565b50505050905090810190601f1680156105f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050565b6001600160e01b03199190911660009081526020819052604081206002810180549390915561ffff60a81b19909216600160b01b1790915590565b604080516001600160a01b03841681526020810183905281517f85e4ffba4f222353d622111e3ca71c787704d7e3d003704e654527a3d3d02167929181900390910190a15050565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b196001600160a01b039093166101000260ff60a81b19909116600360a81b17610100600160a81b0319161791909116600160b01b179055565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b1992151560ff60a81b19909116600160a91b1760ff19161791909116600160b01b179055565b6001600160e01b031991909116600090815260208190526040902060028101805460019092019290925560ff60a81b1916600160a81b1760ff60b01b1916600160b01b17905556fea265627a7a7231582090b46a968f0661c5da2aeac367518fe3d9a2f0825713f3f957ea7aa238fad1d764736f6c634300050b0032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x20283DA9 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x20283DA9 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x6C33E7EB EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x7C4D18BD EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0xD2F65FBC EQ PUSH2 0x470 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0xD9B9993 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x1D77D696 EQ PUSH2 0x37E JUMPI JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH1 0x1F NOT ADD DUP3 MSTORE DUP4 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP2 SWAP6 POP POP PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP3 POP PUSH2 0xE3 SWAP2 POP POP JUMPI PUSH2 0xDE PUSH1 0x0 PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x117 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x173 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x164 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH2 0x16D DUP2 PUSH2 0x4AA JUMP JUMPDEST POP PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xDE SWAP1 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x207 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x236 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xDE SWAP1 PUSH1 0xFF AND PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x26A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2A4 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4AA JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x510 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x60F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x64A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x692 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x6F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x73B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND DUP2 SSTORE SWAP6 DUP5 MSTORE PUSH1 0x3 ADD DUP3 MSTORE DUP3 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x577 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP2 SWAP1 PUSH2 0x607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5CC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5B4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5F9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP2 SSTORE PUSH2 0xFFFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x85E4FFBA4F222353D622111E3CA71C787704D7E3D003704E654527A3D3D02167 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH2 0x100 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x3 PUSH1 0xA8 SHL OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP3 ISZERO ISZERO PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA9 SHL OR PUSH1 0xFF NOT AND OR SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP1 0xb4 PUSH11 0x968F0661C5DA2AEAC36751 DUP16 0xe3 0xd9 LOG2 CREATE DUP3 JUMPI SGT RETURN 0xf9 JUMPI 0xea PUSH27 0xA238FAD1D764736F6C634300050B00320000000000000000000000 ",
              "sourceMap": "55:223:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;707:11:1;772:1;759:15;751:23;;794:16;840:8;;823:26;;;;;;;30:3:-1;22:6;14;1:33;823:26:1;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;823:26:1;;813:37;;49:4:-1;813:37:1;;;;-1:-1:-1;;;;;;866:16:1;;:10;:16;;;;;;;;;;:20;;;813:37;;-1:-1:-1;;;;;866:20:1;;;;;-1:-1:-1;861:1034:1;;-1:-1:-1;;861:1034:1;982:21;997:5;982:14;:21::i;:::-;861:1034;;;1068:21;-1:-1:-1;;;;;;1038:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1038:26:1;;;;:51;;;;;;;;;1034:851;;;-1:-1:-1;;;;;;1125:16:1;;1109:13;1125:16;;;;;;;;;;;:40;;;:30;;:40;;;;;;1325:10;1321:94;;-1:-1:-1;;;;;;;1367:16:1;;:10;:16;;;;;;;;;;:29;1321:94;1432:21;1447:5;1432:14;:21::i;:::-;1034:851;;;;1508:21;-1:-1:-1;;;;;;1478:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1478:26:1;;;;:51;;;;;;;;;1474:411;;;-1:-1:-1;;;;;;1564:16:1;;:10;:16;;;;;;;;;;:29;;;1549:45;;:14;:45::i;1474:411::-;1649:18;-1:-1:-1;;;;;;1619:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1619:26:1;;;;:48;;;;;;;;;1615:270;;;-1:-1:-1;;;;;;1702:16:1;;:10;:16;;;;;;;;;;:26;;;1687:42;;1702:26;;1687:14;:42::i;1615:270::-;1784:21;-1:-1:-1;;;;;;1754:16:1;;:10;:16;;;;;;;;;;:26;;;-1:-1:-1;;;1754:26:1;;;;:51;;;;;;;;;1750:135;;;-1:-1:-1;;;;;;1840:16:1;;:10;:16;;;;;;;;;;:29;;;1825:45;;1840:29;;;-1:-1:-1;;;;;1840:29:1;1825:14;:45::i;:::-;669:1232;;55:223:2;3087:303:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3087:303:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3087:303:1;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2142:226;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;2142:226:1;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;2142:226:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2142:226:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;2142:226:1;;-1:-1:-1;2142:226:1;-1:-1:-1;2142:226:1;:::i;:::-;;2560:233;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2560:233:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;2560:233:1;;;;;;;;:::i;155:121:2:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;155:121:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;155:121:2;;;;;;;;:::i;4383:218:1:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4383:218:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4383:218:1;;-1:-1:-1;;;;;;4383:218:1;;;;;-1:-1:-1;;;;;4383:218:1;;:::i;3985:206::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3985:206:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3985:206:1;;;;;;;;;;:::i;3581:218::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3581:218:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;;3581:218:1;;;;;;;;:::i;5437:244::-;5543:4;5537:11;5589:2;5578:9;5574:18;5568:4;5561:32;5624:6;5613:9;5606:25;5662:2;5651:9;5644:21;3087:303;-1:-1:-1;;;;;;3233:17:1;;;;3217:4;3233:17;;;;;;;;;;;:27;;;:51;;-1:-1:-1;;;;3233:51:1;;;3294:42;;;:31;;:42;;;;:51;;;;3355:17;;;;;;;:28;;-1:-1:-1;;;;3355:28:1;-1:-1:-1;;;3355:28:1;;;3217:4;3087:303::o;2142:226::-;2262:7;2271:16;2291:7;-1:-1:-1;;;;;2291:12:1;2310:9;2321:5;;2291:36;;;;;30:3:-1;22:6;14;1:33;2291:36:1;;45:16:-1;;;-1:-1;2291:36:1;;-1:-1:-1;2291:36:1;;-1:-1:-1;;2291:36:1;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2261:66:1;;;;2345:2;2356:3;2337:24;;;;;-1:-1:-1;;;2337:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2337:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2142:226;;;;;:::o;2560:233::-;-1:-1:-1;;;;;;2648:17:1;;;;2632:4;2648:17;;;;;;;;;;:27;;;:51;;2709:39;;;;-1:-1:-1;;;;2758:28:1;;;-1:-1:-1;;;2758:28:1;;;;2632:4;2560:233::o;155:121:2:-;237:32;;;-1:-1:-1;;;;;237:32:2;;;;;;;;;;;;;;;;;;;;;;;155:121;;:::o;4383:218:1:-;-1:-1:-1;;;;;;4456:17:1;;;;:10;:17;;;;;;;;;;:27;;:51;;-1:-1:-1;;;;;;;;;4517:39:1;;;;;-1:-1:-1;;;;4456:51:1;;;-1:-1:-1;;;4456:51:1;-1:-1:-1;;;;;;4517:39:1;;4566:28;;;;-1:-1:-1;;;4566:28:1;;;4383:218::o;3985:206::-;-1:-1:-1;;;;;;4052:17:1;;;;:10;:17;;;;;;;;;;4082:18;4052:27;:48;;-1:-1:-1;;;;4110:36:1;;;-1:-1:-1;;;;4052:48:1;;;-1:-1:-1;;;4052:48:1;-1:-1:-1;;4110:36:1;;4156:28;;;;-1:-1:-1;;;4156:28:1;;;3985:206::o;3581:218::-;-1:-1:-1;;;;;;3654:17:1;;;;:10;:17;;;;;;;;;;:27;;;:51;;3684:21;3715:30;;;:39;;;;-1:-1:-1;;;;3654:51:1;-1:-1:-1;;;3654:51:1;-1:-1:-1;;;;3764:28:1;-1:-1:-1;;;3764:28:1;;;3581:218::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "395200",
                "executionCost": "430",
                "totalCost": "395630"
              },
              "external": {
                "": "infinite",
                "execute(address,bytes)": "infinite",
                "setMockAddress(bytes4,address)": "20701",
                "setMockBool(bytes4,bool)": "20676",
                "setMockBytes32(bytes4,bytes32)": "40680",
                "setMockUint256(bytes4,uint256)": "40686",
                "setMockUint256WithParam(bytes4,bytes32,uint256)": "60959",
                "trustedWithdrawETH(address,uint256)": "1584"
              }
            },
            "methodIdentifiers": {
              "execute(address,bytes)": "1cff79cd",
              "setMockAddress(bytes4,address)": "6c33e7eb",
              "setMockBool(bytes4,bool)": "7c4d18bd",
              "setMockBytes32(bytes4,bytes32)": "d2f65fbc",
              "setMockUint256(bytes4,uint256)": "1d77d696",
              "setMockUint256WithParam(bytes4,bytes32,uint256)": "0d9b9993",
              "trustedWithdrawETH(address,uint256)": "20283da9"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMockUint256WithParam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMockUint256\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"trustedWithdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setMockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setMockBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setMockBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TrustedWithdrawETH\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"execute(address,bytes)\":{\"details\":\"Call a function on a target address using provided calldata for a function\",\"params\":{\"_data\":\"Transaction data to be used to call the target contract\",\"_target\":\"Target contract to call with data\"}},\"setMockAddress(bytes4,address)\":{\"details\":\"Set a mock address value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock address value\"}},\"setMockBool(bytes4,bool)\":{\"details\":\"Set a mock bool value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock bool value\"}},\"setMockBytes32(bytes4,bytes32)\":{\"details\":\"Set a mock bytes32 value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE))) param _value Mock bytes32 value\"}},\"setMockUint256(bytes4,uint256)\":{\"details\":\"Set a mock uint256 value for a function\",\"params\":{\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock uint256 value\"}},\"setMockUint256WithParam(bytes4,bytes32,uint256)\":{\"details\":\"Set a mockuint256 value for a function with specific params passed\",\"params\":{\"_dataHash\":\"keccak256 hash of tx data i.e. keccak256(msg.data)\",\"_func\":\"Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\",\"_value\":\"Mock uint256 value\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/mocks/MinterMock.sol\":\"MinterMock\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/mocks/GenericMock.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\n/**\\n * @title A mock contract that can set/return mock values and execute functions\\n * on target contracts\\n */\\ncontract GenericMock {\\n    struct MockValue {\\n        uint256 uint256Value;\\n        bytes32 bytes32Value;\\n        bool boolValue;\\n        address addressValue;\\n        MockValueType valueType;\\n        bool set;\\n        mapping(bytes32 => uint256) uint256Values;\\n    }\\n\\n    enum MockValueType {\\n        Uint256,\\n        Bytes32,\\n        Bool,\\n        Address\\n    }\\n\\n    // Track function selectors and mapped mock values\\n    mapping(bytes4 => MockValue) mockValues;\\n\\n    /**\\n     * @dev Return mock value for a functione\\n     */\\n    function() external payable {\\n        bytes4 func;\\n        assembly {\\n            func := calldataload(0)\\n        }\\n\\n        bytes32 dataHash = keccak256(abi.encodePacked(msg.data));\\n\\n        if (!mockValues[func].set) {\\n            // If mock value not set, default to return a bool with value false\\n            mLoadAndReturn(false);\\n        } else {\\n            if (mockValues[func].valueType == MockValueType.Uint256) {\\n                uint256 value = mockValues[func].uint256Values[dataHash];\\n                // TODO: Make sure we don't go into this code block if the value set\\n                // for dataHash should actually be 0\\n                if (value == 0) {\\n                    value = mockValues[func].uint256Value;\\n                }\\n                mLoadAndReturn(value);\\n            } else if (mockValues[func].valueType == MockValueType.Bytes32) {\\n                mLoadAndReturn(mockValues[func].bytes32Value);\\n            } else if (mockValues[func].valueType == MockValueType.Bool) {\\n                mLoadAndReturn(mockValues[func].boolValue);\\n            } else if (mockValues[func].valueType == MockValueType.Address) {\\n                mLoadAndReturn(mockValues[func].addressValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Call a function on a target address using provided calldata for a function\\n     * @param _target Target contract to call with data\\n     * @param _data Transaction data to be used to call the target contract\\n     */\\n    function execute(address _target, bytes calldata _data) external payable {\\n        // solium-disable-next-line\\n        (bool ok, bytes memory res) = _target.call.value(msg.value)(_data);\\n        require(ok, string(res));\\n    }\\n\\n    /**\\n     * @dev Set a mock uint256 value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock uint256 value\\n     */\\n    function setMockUint256(bytes4 _func, uint256 _value) external returns (bool) {\\n        mockValues[_func].valueType = MockValueType.Uint256;\\n        mockValues[_func].uint256Value = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mockuint256 value for a function with specific params passed\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _dataHash keccak256 hash of tx data i.e. keccak256(msg.data)\\n     * @param _value Mock uint256 value\\n     */\\n    function setMockUint256WithParam(\\n        bytes4 _func,\\n        bytes32 _dataHash,\\n        uint256 _value\\n    ) external returns (bool) {\\n        mockValues[_func].valueType = MockValueType.Uint256;\\n        mockValues[_func].uint256Values[_dataHash] = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock bytes32 value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * param _value Mock bytes32 value\\n     */\\n    function setMockBytes32(bytes4 _func, bytes32 _value) external {\\n        mockValues[_func].valueType = MockValueType.Bytes32;\\n        mockValues[_func].bytes32Value = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock bool value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock bool value\\n     */\\n    function setMockBool(bytes4 _func, bool _value) external {\\n        mockValues[_func].valueType = MockValueType.Bool;\\n        mockValues[_func].boolValue = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Set a mock address value for a function\\n     * @param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\\n     * @param _value Mock address value\\n     */\\n    function setMockAddress(bytes4 _func, address _value) external {\\n        mockValues[_func].valueType = MockValueType.Address;\\n        mockValues[_func].addressValue = _value;\\n        mockValues[_func].set = true;\\n    }\\n\\n    /**\\n     * @dev Load a uint256 value into memory and return it\\n     * @param _value Uint256 value\\n     */\\n    function mLoadAndReturn(uint256 _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load a bytes32 value into memory and return it\\n     * @param _value Bytes32 value\\n     */\\n    function mLoadAndReturn(bytes32 _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load a bool value into memory and return it\\n     * @param _value Bool value\\n     */\\n    function mLoadAndReturn(bool _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load an address value into memory and return it\\n     * @param _value Address value\\n     */\\n    function mLoadAndReturn(address _value) private pure {\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(0x40, add(memOffset, 32))\\n            mstore(memOffset, _value)\\n            return(memOffset, 32)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9fab5565894c07d7b3523c79dc741d60d3d6f460e2a4462bd5def2b763acfd0f\"},\"contracts/test/mocks/MinterMock.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\nimport \\\"./GenericMock.sol\\\";\\n\\ncontract MinterMock is GenericMock {\\n    event TrustedWithdrawETH(address to, uint256 amount);\\n\\n    function trustedWithdrawETH(address _to, uint256 _amount) external {\\n        emit TrustedWithdrawETH(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe0f4791e7552a904b62c142275d95d710c64d53a5ce4485cf13bec0af64cd87d\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      }
    },
    "sources": {
      "contracts/test/mocks/BondingManagerMock.sol": {
        "ast": {
          "absolutePath": "contracts/test/mocks/BondingManagerMock.sol",
          "exportedSymbols": {
            "BondingManagerMock": [
              29
            ]
          },
          "id": 30,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".11"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:24:0"
            },
            {
              "absolutePath": "contracts/test/mocks/GenericMock.sol",
              "file": "./GenericMock.sol",
              "id": 2,
              "nodeType": "ImportDirective",
              "scope": 30,
              "sourceUnit": 385,
              "src": "26:27:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3,
                    "name": "GenericMock",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 384,
                    "src": "86:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_GenericMock_$384",
                      "typeString": "contract GenericMock"
                    }
                  },
                  "id": 4,
                  "nodeType": "InheritanceSpecifier",
                  "src": "86:11:0"
                }
              ],
              "contractDependencies": [
                384
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 29,
              "linearizedBaseContracts": [
                29,
                384
              ],
              "name": "BondingManagerMock",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 12,
                  "name": "UpdateTranscoderWithFees",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "indexed": false,
                        "name": "transcoder",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "135:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 5,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "135:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 8,
                        "indexed": false,
                        "name": "fees",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "155:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 7,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "155:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 10,
                        "indexed": false,
                        "name": "round",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "169:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 9,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "169:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "134:49:0"
                  },
                  "src": "104:80:0"
                },
                {
                  "body": {
                    "id": 27,
                    "nodeType": "Block",
                    "src": "315:74:0",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 22,
                              "name": "_transcoder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "355:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 23,
                              "name": "_fees",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "368:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 24,
                              "name": "_round",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 18,
                              "src": "375:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 21,
                            "name": "UpdateTranscoderWithFees",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "330:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "330:52:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 26,
                        "nodeType": "EmitStatement",
                        "src": "325:57:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 28,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateTranscoderWithFees",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 19,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 14,
                        "name": "_transcoder",
                        "nodeType": "VariableDeclaration",
                        "scope": 28,
                        "src": "233:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 13,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "233:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 16,
                        "name": "_fees",
                        "nodeType": "VariableDeclaration",
                        "scope": 28,
                        "src": "262:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 15,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "262:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 18,
                        "name": "_round",
                        "nodeType": "VariableDeclaration",
                        "scope": 28,
                        "src": "285:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 17,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "285:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "223:82:0"
                  },
                  "returnParameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "315:0:0"
                  },
                  "scope": 29,
                  "src": "190:199:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 30,
              "src": "55:336:0"
            }
          ],
          "src": "0:392:0"
        },
        "id": 0
      },
      "contracts/test/mocks/GenericMock.sol": {
        "ast": {
          "absolutePath": "contracts/test/mocks/GenericMock.sol",
          "exportedSymbols": {
            "GenericMock": [
              384
            ]
          },
          "id": 385,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 31,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".11"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:24:1"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": "@title A mock contract that can set/return mock values and execute functions\non target contracts",
              "fullyImplemented": true,
              "id": 384,
              "linearizedBaseContracts": [
                384
              ],
              "name": "GenericMock",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "GenericMock.MockValue",
                  "id": 48,
                  "members": [
                    {
                      "constant": false,
                      "id": 33,
                      "name": "uint256Value",
                      "nodeType": "VariableDeclaration",
                      "scope": 48,
                      "src": "191:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 32,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "191:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 35,
                      "name": "bytes32Value",
                      "nodeType": "VariableDeclaration",
                      "scope": 48,
                      "src": "221:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 34,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "221:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 37,
                      "name": "boolValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 48,
                      "src": "251:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 36,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "251:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 39,
                      "name": "addressValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 48,
                      "src": "275:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 38,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "275:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 41,
                      "name": "valueType",
                      "nodeType": "VariableDeclaration",
                      "scope": 48,
                      "src": "305:23:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_MockValueType_$53",
                        "typeString": "enum GenericMock.MockValueType"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 40,
                        "name": "MockValueType",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 53,
                        "src": "305:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_MockValueType_$53",
                          "typeString": "enum GenericMock.MockValueType"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 43,
                      "name": "set",
                      "nodeType": "VariableDeclaration",
                      "scope": 48,
                      "src": "338:8:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 42,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "338:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 47,
                      "name": "uint256Values",
                      "nodeType": "VariableDeclaration",
                      "scope": 48,
                      "src": "356:41:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      },
                      "typeName": {
                        "id": 46,
                        "keyType": {
                          "id": 44,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "364:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "356:27:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        },
                        "valueType": {
                          "id": 45,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "375:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "MockValue",
                  "nodeType": "StructDefinition",
                  "scope": 384,
                  "src": "164:240:1",
                  "visibility": "public"
                },
                {
                  "canonicalName": "GenericMock.MockValueType",
                  "id": 53,
                  "members": [
                    {
                      "id": 49,
                      "name": "Uint256",
                      "nodeType": "EnumValue",
                      "src": "439:7:1"
                    },
                    {
                      "id": 50,
                      "name": "Bytes32",
                      "nodeType": "EnumValue",
                      "src": "456:7:1"
                    },
                    {
                      "id": 51,
                      "name": "Bool",
                      "nodeType": "EnumValue",
                      "src": "473:4:1"
                    },
                    {
                      "id": 52,
                      "name": "Address",
                      "nodeType": "EnumValue",
                      "src": "487:7:1"
                    }
                  ],
                  "name": "MockValueType",
                  "nodeType": "EnumDefinition",
                  "src": "410:90:1"
                },
                {
                  "constant": false,
                  "id": 57,
                  "name": "mockValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 384,
                  "src": "561:39:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                    "typeString": "mapping(bytes4 => struct GenericMock.MockValue)"
                  },
                  "typeName": {
                    "id": 56,
                    "keyType": {
                      "id": 54,
                      "name": "bytes4",
                      "nodeType": "ElementaryTypeName",
                      "src": "569:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "561:28:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                      "typeString": "mapping(bytes4 => struct GenericMock.MockValue)"
                    },
                    "valueType": {
                      "contractScope": null,
                      "id": 55,
                      "name": "MockValue",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 48,
                      "src": "579:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MockValue_$48_storage_ptr",
                        "typeString": "struct GenericMock.MockValue"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 168,
                    "nodeType": "Block",
                    "src": "697:1204:1",
                    "statements": [
                      {
                        "assignments": [
                          61
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 61,
                            "name": "func",
                            "nodeType": "VariableDeclaration",
                            "scope": 168,
                            "src": "707:11:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "typeName": {
                              "id": 60,
                              "name": "bytes4",
                              "nodeType": "ElementaryTypeName",
                              "src": "707:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 62,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "707:11:1"
                      },
                      {
                        "externalReferences": [
                          {
                            "func": {
                              "declaration": 61,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "751:4:1",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 63,
                        "nodeType": "InlineAssembly",
                        "operations": "{ func := calldataload(0) }",
                        "src": "728:56:1"
                      },
                      {
                        "assignments": [
                          65
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 65,
                            "name": "dataHash",
                            "nodeType": "VariableDeclaration",
                            "scope": 168,
                            "src": "794:16:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 64,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "794:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 73,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 69,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 424,
                                    "src": "840:3:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 70,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "data",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "840:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_calldata_ptr",
                                    "typeString": "bytes calldata"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_calldata_ptr",
                                    "typeString": "bytes calldata"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 67,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 411,
                                  "src": "823:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 68,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "823:16:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 71,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "823:26:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 66,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 418,
                            "src": "813:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 72,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "813:37:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "794:56:1"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "865:21:1",
                          "subExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 74,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "866:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 76,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 75,
                                "name": "func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61,
                                "src": "877:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "866:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 77,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "set",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 43,
                            "src": "866:20:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 166,
                          "nodeType": "Block",
                          "src": "1020:875:1",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_enum$_MockValueType_$53",
                                  "typeString": "enum GenericMock.MockValueType"
                                },
                                "id": 90,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 84,
                                      "name": "mockValues",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 57,
                                      "src": "1038:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                        "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                      }
                                    },
                                    "id": 86,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 85,
                                      "name": "func",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 61,
                                      "src": "1049:4:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1038:16:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                      "typeString": "struct GenericMock.MockValue storage ref"
                                    }
                                  },
                                  "id": 87,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "valueType",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 41,
                                  "src": "1038:26:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_MockValueType_$53",
                                    "typeString": "enum GenericMock.MockValueType"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 88,
                                    "name": "MockValueType",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 53,
                                    "src": "1068:13:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                      "typeString": "type(enum GenericMock.MockValueType)"
                                    }
                                  },
                                  "id": 89,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "Uint256",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "1068:21:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_MockValueType_$53",
                                    "typeString": "enum GenericMock.MockValueType"
                                  }
                                },
                                "src": "1038:51:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_enum$_MockValueType_$53",
                                    "typeString": "enum GenericMock.MockValueType"
                                  },
                                  "id": 123,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 117,
                                        "name": "mockValues",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 57,
                                        "src": "1478:10:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                          "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                        }
                                      },
                                      "id": 119,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 118,
                                        "name": "func",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 61,
                                        "src": "1489:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes4",
                                          "typeString": "bytes4"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "1478:16:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                        "typeString": "struct GenericMock.MockValue storage ref"
                                      }
                                    },
                                    "id": 120,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "valueType",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 41,
                                    "src": "1478:26:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_MockValueType_$53",
                                      "typeString": "enum GenericMock.MockValueType"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 121,
                                      "name": "MockValueType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 53,
                                      "src": "1508:13:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                        "typeString": "type(enum GenericMock.MockValueType)"
                                      }
                                    },
                                    "id": 122,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "Bytes32",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "1508:21:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_MockValueType_$53",
                                      "typeString": "enum GenericMock.MockValueType"
                                    }
                                  },
                                  "src": "1478:51:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseBody": {
                                  "condition": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_enum$_MockValueType_$53",
                                      "typeString": "enum GenericMock.MockValueType"
                                    },
                                    "id": 138,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "id": 132,
                                          "name": "mockValues",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 57,
                                          "src": "1619:10:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                            "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                          }
                                        },
                                        "id": 134,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 133,
                                          "name": "func",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 61,
                                          "src": "1630:4:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes4",
                                            "typeString": "bytes4"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "1619:16:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                          "typeString": "struct GenericMock.MockValue storage ref"
                                        }
                                      },
                                      "id": 135,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "valueType",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 41,
                                      "src": "1619:26:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_MockValueType_$53",
                                        "typeString": "enum GenericMock.MockValueType"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 136,
                                        "name": "MockValueType",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 53,
                                        "src": "1649:13:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                          "typeString": "type(enum GenericMock.MockValueType)"
                                        }
                                      },
                                      "id": 137,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "Bool",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "1649:18:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_MockValueType_$53",
                                        "typeString": "enum GenericMock.MockValueType"
                                      }
                                    },
                                    "src": "1619:48:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": {
                                    "condition": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_enum$_MockValueType_$53",
                                        "typeString": "enum GenericMock.MockValueType"
                                      },
                                      "id": 153,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 147,
                                            "name": "mockValues",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 57,
                                            "src": "1754:10:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                              "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                            }
                                          },
                                          "id": 149,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 148,
                                            "name": "func",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 61,
                                            "src": "1765:4:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "1754:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                            "typeString": "struct GenericMock.MockValue storage ref"
                                          }
                                        },
                                        "id": 150,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "valueType",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 41,
                                        "src": "1754:26:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_MockValueType_$53",
                                          "typeString": "enum GenericMock.MockValueType"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 151,
                                          "name": "MockValueType",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 53,
                                          "src": "1784:13:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                            "typeString": "type(enum GenericMock.MockValueType)"
                                          }
                                        },
                                        "id": 152,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "Address",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": null,
                                        "src": "1784:21:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_MockValueType_$53",
                                          "typeString": "enum GenericMock.MockValueType"
                                        }
                                      },
                                      "src": "1754:51:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": null,
                                    "id": 162,
                                    "nodeType": "IfStatement",
                                    "src": "1750:135:1",
                                    "trueBody": {
                                      "id": 161,
                                      "nodeType": "Block",
                                      "src": "1807:78:1",
                                      "statements": [
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "expression": {
                                                  "argumentTypes": null,
                                                  "baseExpression": {
                                                    "argumentTypes": null,
                                                    "id": 155,
                                                    "name": "mockValues",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 57,
                                                    "src": "1840:10:1",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                                      "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                                    }
                                                  },
                                                  "id": 157,
                                                  "indexExpression": {
                                                    "argumentTypes": null,
                                                    "id": 156,
                                                    "name": "func",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 61,
                                                    "src": "1851:4:1",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bytes4",
                                                      "typeString": "bytes4"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "1840:16:1",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                                    "typeString": "struct GenericMock.MockValue storage ref"
                                                  }
                                                },
                                                "id": 158,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "addressValue",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 39,
                                                "src": "1840:29:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "id": 154,
                                              "name": "mLoadAndReturn",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [
                                                362,
                                                369,
                                                376,
                                                383
                                              ],
                                              "referencedDeclaration": 383,
                                              "src": "1825:14:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_pure$_t_address_$returns$__$",
                                                "typeString": "function (address) pure"
                                              }
                                            },
                                            "id": 159,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "1825:45:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 160,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1825:45:1"
                                        }
                                      ]
                                    }
                                  },
                                  "id": 163,
                                  "nodeType": "IfStatement",
                                  "src": "1615:270:1",
                                  "trueBody": {
                                    "id": 146,
                                    "nodeType": "Block",
                                    "src": "1669:75:1",
                                    "statements": [
                                      {
                                        "expression": {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "baseExpression": {
                                                  "argumentTypes": null,
                                                  "id": 140,
                                                  "name": "mockValues",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 57,
                                                  "src": "1702:10:1",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                                    "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                                  }
                                                },
                                                "id": 142,
                                                "indexExpression": {
                                                  "argumentTypes": null,
                                                  "id": 141,
                                                  "name": "func",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 61,
                                                  "src": "1713:4:1",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes4",
                                                    "typeString": "bytes4"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "1702:16:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                                  "typeString": "struct GenericMock.MockValue storage ref"
                                                }
                                              },
                                              "id": 143,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "boolValue",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 37,
                                              "src": "1702:26:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            ],
                                            "id": 139,
                                            "name": "mLoadAndReturn",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [
                                              362,
                                              369,
                                              376,
                                              383
                                            ],
                                            "referencedDeclaration": 376,
                                            "src": "1687:14:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_pure$_t_bool_$returns$__$",
                                              "typeString": "function (bool) pure"
                                            }
                                          },
                                          "id": 144,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "1687:42:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                          }
                                        },
                                        "id": 145,
                                        "nodeType": "ExpressionStatement",
                                        "src": "1687:42:1"
                                      }
                                    ]
                                  }
                                },
                                "id": 164,
                                "nodeType": "IfStatement",
                                "src": "1474:411:1",
                                "trueBody": {
                                  "id": 131,
                                  "nodeType": "Block",
                                  "src": "1531:78:1",
                                  "statements": [
                                    {
                                      "expression": {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "baseExpression": {
                                                "argumentTypes": null,
                                                "id": 125,
                                                "name": "mockValues",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 57,
                                                "src": "1564:10:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                                }
                                              },
                                              "id": 127,
                                              "indexExpression": {
                                                "argumentTypes": null,
                                                "id": 126,
                                                "name": "func",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 61,
                                                "src": "1575:4:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "1564:16:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                                "typeString": "struct GenericMock.MockValue storage ref"
                                              }
                                            },
                                            "id": 128,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "bytes32Value",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 35,
                                            "src": "1564:29:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          ],
                                          "id": 124,
                                          "name": "mLoadAndReturn",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [
                                            362,
                                            369,
                                            376,
                                            383
                                          ],
                                          "referencedDeclaration": 369,
                                          "src": "1549:14:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$__$",
                                            "typeString": "function (bytes32) pure"
                                          }
                                        },
                                        "id": 129,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "1549:45:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_tuple$__$",
                                          "typeString": "tuple()"
                                        }
                                      },
                                      "id": 130,
                                      "nodeType": "ExpressionStatement",
                                      "src": "1549:45:1"
                                    }
                                  ]
                                }
                              },
                              "id": 165,
                              "nodeType": "IfStatement",
                              "src": "1034:851:1",
                              "trueBody": {
                                "id": 116,
                                "nodeType": "Block",
                                "src": "1091:377:1",
                                "statements": [
                                  {
                                    "assignments": [
                                      92
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 92,
                                        "name": "value",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 116,
                                        "src": "1109:13:1",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 91,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1109:7:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "value": null,
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 99,
                                    "initialValue": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 93,
                                            "name": "mockValues",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 57,
                                            "src": "1125:10:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                              "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                            }
                                          },
                                          "id": 95,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 94,
                                            "name": "func",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 61,
                                            "src": "1136:4:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "1125:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                            "typeString": "struct GenericMock.MockValue storage ref"
                                          }
                                        },
                                        "id": 96,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "uint256Values",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 47,
                                        "src": "1125:30:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                          "typeString": "mapping(bytes32 => uint256)"
                                        }
                                      },
                                      "id": 98,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 97,
                                        "name": "dataHash",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 65,
                                        "src": "1156:8:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "1125:40:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "1109:56:1"
                                  },
                                  {
                                    "condition": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 102,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 100,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 92,
                                        "src": "1325:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "30",
                                        "id": 101,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1334:1:1",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "1325:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": null,
                                    "id": 111,
                                    "nodeType": "IfStatement",
                                    "src": "1321:94:1",
                                    "trueBody": {
                                      "id": 110,
                                      "nodeType": "Block",
                                      "src": "1337:78:1",
                                      "statements": [
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 108,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 103,
                                              "name": "value",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 92,
                                              "src": "1359:5:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "baseExpression": {
                                                  "argumentTypes": null,
                                                  "id": 104,
                                                  "name": "mockValues",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 57,
                                                  "src": "1367:10:1",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                                    "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                                  }
                                                },
                                                "id": 106,
                                                "indexExpression": {
                                                  "argumentTypes": null,
                                                  "id": 105,
                                                  "name": "func",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 61,
                                                  "src": "1378:4:1",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes4",
                                                    "typeString": "bytes4"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "1367:16:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                                  "typeString": "struct GenericMock.MockValue storage ref"
                                                }
                                              },
                                              "id": 107,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "uint256Value",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 33,
                                              "src": "1367:29:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "1359:37:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 109,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1359:37:1"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 113,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 92,
                                          "src": "1447:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 112,
                                        "name": "mLoadAndReturn",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          362,
                                          369,
                                          376,
                                          383
                                        ],
                                        "referencedDeclaration": 362,
                                        "src": "1432:14:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$__$",
                                          "typeString": "function (uint256) pure"
                                        }
                                      },
                                      "id": 114,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1432:21:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 115,
                                    "nodeType": "ExpressionStatement",
                                    "src": "1432:21:1"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 167,
                        "nodeType": "IfStatement",
                        "src": "861:1034:1",
                        "trueBody": {
                          "id": 83,
                          "nodeType": "Block",
                          "src": "888:126:1",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "66616c7365",
                                    "id": 80,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "997:5:1",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "false"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 79,
                                  "name": "mLoadAndReturn",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    362,
                                    369,
                                    376,
                                    383
                                  ],
                                  "referencedDeclaration": 376,
                                  "src": "982:14:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bool_$returns$__$",
                                    "typeString": "function (bool) pure"
                                  }
                                },
                                "id": 81,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "982:21:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 82,
                              "nodeType": "ExpressionStatement",
                              "src": "982:21:1"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "@dev Return mock value for a functione",
                  "id": 169,
                  "implemented": true,
                  "kind": "fallback",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 58,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "677:2:1"
                  },
                  "returnParameters": {
                    "id": 59,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "697:0:1"
                  },
                  "scope": 384,
                  "src": "669:1232:1",
                  "stateMutability": "payable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 196,
                    "nodeType": "Block",
                    "src": "2215:153:1",
                    "statements": [
                      {
                        "assignments": [
                          177,
                          179
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 177,
                            "name": "ok",
                            "nodeType": "VariableDeclaration",
                            "scope": 196,
                            "src": "2262:7:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 176,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2262:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 179,
                            "name": "res",
                            "nodeType": "VariableDeclaration",
                            "scope": 196,
                            "src": "2271:16:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 178,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "2271:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 188,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 186,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 173,
                              "src": "2321:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            ],
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 183,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 424,
                                  "src": "2310:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 184,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2310:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 180,
                                  "name": "_target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 171,
                                  "src": "2291:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 181,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "call",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2291:12:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                }
                              },
                              "id": 182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2291:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_setvalue_pure$_t_uint256_$returns$_t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value_$",
                                "typeString": "function (uint256) pure returns (function (bytes memory) payable returns (bool,bytes memory))"
                              }
                            },
                            "id": 185,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2291:29:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 187,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2291:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2261:66:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 190,
                              "name": "ok",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 177,
                              "src": "2345:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 192,
                                  "name": "res",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 179,
                                  "src": "2356:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 191,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2349:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                  "typeString": "type(string storage pointer)"
                                },
                                "typeName": "string"
                              },
                              "id": 193,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2349:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 189,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              427,
                              428
                            ],
                            "referencedDeclaration": 428,
                            "src": "2337:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2337:24:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 195,
                        "nodeType": "ExpressionStatement",
                        "src": "2337:24:1"
                      }
                    ]
                  },
                  "documentation": "@dev Call a function on a target address using provided calldata for a function\n@param _target Target contract to call with data\n@param _data Transaction data to be used to call the target contract",
                  "id": 197,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "execute",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 174,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 171,
                        "name": "_target",
                        "nodeType": "VariableDeclaration",
                        "scope": 197,
                        "src": "2159:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 170,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2159:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 173,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 197,
                        "src": "2176:20:1",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 172,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2176:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2158:39:1"
                  },
                  "returnParameters": {
                    "id": 175,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2215:0:1"
                  },
                  "scope": 384,
                  "src": "2142:226:1",
                  "stateMutability": "payable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 228,
                    "nodeType": "Block",
                    "src": "2638:155:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 206,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "2648:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 208,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 207,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "2659:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2648:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 209,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "valueType",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 41,
                            "src": "2648:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 210,
                              "name": "MockValueType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "2678:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                "typeString": "type(enum GenericMock.MockValueType)"
                              }
                            },
                            "id": 211,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "Uint256",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2678:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "src": "2648:51:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MockValueType_$53",
                            "typeString": "enum GenericMock.MockValueType"
                          }
                        },
                        "id": 213,
                        "nodeType": "ExpressionStatement",
                        "src": "2648:51:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 219,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 214,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "2709:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 216,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 215,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "2720:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2709:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 217,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "uint256Value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 33,
                            "src": "2709:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 218,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 201,
                            "src": "2742:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2709:39:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 220,
                        "nodeType": "ExpressionStatement",
                        "src": "2709:39:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 226,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 221,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "2758:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 223,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 222,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "2769:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2758:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 224,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "set",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 43,
                            "src": "2758:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 225,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2782:4:1",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "2758:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 227,
                        "nodeType": "ExpressionStatement",
                        "src": "2758:28:1"
                      }
                    ]
                  },
                  "documentation": "@dev Set a mock uint256 value for a function\n@param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n@param _value Mock uint256 value",
                  "id": 229,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setMockUint256",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 202,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 199,
                        "name": "_func",
                        "nodeType": "VariableDeclaration",
                        "scope": 229,
                        "src": "2584:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 198,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "2584:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 201,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 229,
                        "src": "2598:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 200,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2598:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2583:30:1"
                  },
                  "returnParameters": {
                    "id": 205,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 204,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 229,
                        "src": "2632:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 203,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2632:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2631:6:1"
                  },
                  "scope": 384,
                  "src": "2560:233:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 264,
                    "nodeType": "Block",
                    "src": "3223:167:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 246,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 240,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "3233:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 242,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 241,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 231,
                                "src": "3244:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3233:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 243,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "valueType",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 41,
                            "src": "3233:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 244,
                              "name": "MockValueType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "3263:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                "typeString": "type(enum GenericMock.MockValueType)"
                              }
                            },
                            "id": 245,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "Uint256",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3263:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "src": "3233:51:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MockValueType_$53",
                            "typeString": "enum GenericMock.MockValueType"
                          }
                        },
                        "id": 247,
                        "nodeType": "ExpressionStatement",
                        "src": "3233:51:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 255,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 248,
                                  "name": "mockValues",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 57,
                                  "src": "3294:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                    "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                  }
                                },
                                "id": 250,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 249,
                                  "name": "_func",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 231,
                                  "src": "3305:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3294:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                  "typeString": "struct GenericMock.MockValue storage ref"
                                }
                              },
                              "id": 251,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uint256Values",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 47,
                              "src": "3294:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 253,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 252,
                              "name": "_dataHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 233,
                              "src": "3326:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3294:42:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 254,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 235,
                            "src": "3339:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3294:51:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 256,
                        "nodeType": "ExpressionStatement",
                        "src": "3294:51:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 257,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "3355:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 259,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 258,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 231,
                                "src": "3366:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3355:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 260,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "set",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 43,
                            "src": "3355:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 261,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3379:4:1",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3355:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 263,
                        "nodeType": "ExpressionStatement",
                        "src": "3355:28:1"
                      }
                    ]
                  },
                  "documentation": "@dev Set a mockuint256 value for a function with specific params passed\n@param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n@param _dataHash keccak256 hash of tx data i.e. keccak256(msg.data)\n@param _value Mock uint256 value",
                  "id": 265,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setMockUint256WithParam",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 236,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 231,
                        "name": "_func",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "3129:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 230,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "3129:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 233,
                        "name": "_dataHash",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "3151:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 232,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3151:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 235,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "3178:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 234,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3178:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3119:79:1"
                  },
                  "returnParameters": {
                    "id": 239,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 238,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "3217:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 237,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3217:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3216:6:1"
                  },
                  "scope": 384,
                  "src": "3087:303:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 294,
                    "nodeType": "Block",
                    "src": "3644:155:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 278,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 272,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "3654:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 274,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 273,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 267,
                                "src": "3665:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3654:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 275,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "valueType",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 41,
                            "src": "3654:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 276,
                              "name": "MockValueType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "3684:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                "typeString": "type(enum GenericMock.MockValueType)"
                              }
                            },
                            "id": 277,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "Bytes32",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3684:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "src": "3654:51:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MockValueType_$53",
                            "typeString": "enum GenericMock.MockValueType"
                          }
                        },
                        "id": 279,
                        "nodeType": "ExpressionStatement",
                        "src": "3654:51:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 280,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "3715:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 282,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 281,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 267,
                                "src": "3726:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3715:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 283,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "bytes32Value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 35,
                            "src": "3715:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 284,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 269,
                            "src": "3748:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "3715:39:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 286,
                        "nodeType": "ExpressionStatement",
                        "src": "3715:39:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 287,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "3764:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 289,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 288,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 267,
                                "src": "3775:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3764:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 290,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "set",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 43,
                            "src": "3764:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3788:4:1",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3764:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 293,
                        "nodeType": "ExpressionStatement",
                        "src": "3764:28:1"
                      }
                    ]
                  },
                  "documentation": "@dev Set a mock bytes32 value for a function\n@param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\nparam _value Mock bytes32 value",
                  "id": 295,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setMockBytes32",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 270,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 267,
                        "name": "_func",
                        "nodeType": "VariableDeclaration",
                        "scope": 295,
                        "src": "3605:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 266,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "3605:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 269,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 295,
                        "src": "3619:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 268,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3619:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3604:30:1"
                  },
                  "returnParameters": {
                    "id": 271,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3644:0:1"
                  },
                  "scope": 384,
                  "src": "3581:218:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 324,
                    "nodeType": "Block",
                    "src": "4042:149:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 308,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 302,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "4052:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 304,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 303,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 297,
                                "src": "4063:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4052:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 305,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "valueType",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 41,
                            "src": "4052:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 306,
                              "name": "MockValueType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "4082:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                "typeString": "type(enum GenericMock.MockValueType)"
                              }
                            },
                            "id": 307,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "Bool",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4082:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "src": "4052:48:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MockValueType_$53",
                            "typeString": "enum GenericMock.MockValueType"
                          }
                        },
                        "id": 309,
                        "nodeType": "ExpressionStatement",
                        "src": "4052:48:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 315,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 310,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "4110:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 312,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 311,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 297,
                                "src": "4121:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4110:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 313,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "boolValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 37,
                            "src": "4110:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 314,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 299,
                            "src": "4140:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4110:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 316,
                        "nodeType": "ExpressionStatement",
                        "src": "4110:36:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 317,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "4156:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 319,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 318,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 297,
                                "src": "4167:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4156:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 320,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "set",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 43,
                            "src": "4156:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4180:4:1",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "4156:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 323,
                        "nodeType": "ExpressionStatement",
                        "src": "4156:28:1"
                      }
                    ]
                  },
                  "documentation": "@dev Set a mock bool value for a function\n@param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n@param _value Mock bool value",
                  "id": 325,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setMockBool",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 300,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 297,
                        "name": "_func",
                        "nodeType": "VariableDeclaration",
                        "scope": 325,
                        "src": "4006:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 296,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "4006:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 299,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 325,
                        "src": "4020:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 298,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4020:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4005:27:1"
                  },
                  "returnParameters": {
                    "id": 301,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4042:0:1"
                  },
                  "scope": 384,
                  "src": "3985:206:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 354,
                    "nodeType": "Block",
                    "src": "4446:155:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 332,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "4456:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 334,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 333,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 327,
                                "src": "4467:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4456:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 335,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "valueType",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 41,
                            "src": "4456:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 336,
                              "name": "MockValueType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53,
                              "src": "4486:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_MockValueType_$53_$",
                                "typeString": "type(enum GenericMock.MockValueType)"
                              }
                            },
                            "id": 337,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "Address",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4486:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MockValueType_$53",
                              "typeString": "enum GenericMock.MockValueType"
                            }
                          },
                          "src": "4456:51:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MockValueType_$53",
                            "typeString": "enum GenericMock.MockValueType"
                          }
                        },
                        "id": 339,
                        "nodeType": "ExpressionStatement",
                        "src": "4456:51:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 345,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 340,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "4517:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 342,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 341,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 327,
                                "src": "4528:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4517:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 343,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "addressValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39,
                            "src": "4517:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 344,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 329,
                            "src": "4550:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4517:39:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 346,
                        "nodeType": "ExpressionStatement",
                        "src": "4517:39:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 352,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 347,
                                "name": "mockValues",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "4566:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_MockValue_$48_storage_$",
                                  "typeString": "mapping(bytes4 => struct GenericMock.MockValue storage ref)"
                                }
                              },
                              "id": 349,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 348,
                                "name": "_func",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 327,
                                "src": "4577:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4566:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MockValue_$48_storage",
                                "typeString": "struct GenericMock.MockValue storage ref"
                              }
                            },
                            "id": 350,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "set",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 43,
                            "src": "4566:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 351,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4590:4:1",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "4566:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 353,
                        "nodeType": "ExpressionStatement",
                        "src": "4566:28:1"
                      }
                    ]
                  },
                  "documentation": "@dev Set a mock address value for a function\n@param _func Function selector (bytes4(keccak256(FUNCTION_SIGNATURE)))\n@param _value Mock address value",
                  "id": 355,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setMockAddress",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 330,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 327,
                        "name": "_func",
                        "nodeType": "VariableDeclaration",
                        "scope": 355,
                        "src": "4407:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 326,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "4407:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 329,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 355,
                        "src": "4421:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 328,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4421:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4406:30:1"
                  },
                  "returnParameters": {
                    "id": 331,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4446:0:1"
                  },
                  "scope": 384,
                  "src": "4383:218:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 361,
                    "nodeType": "Block",
                    "src": "4770:194:1",
                    "statements": [
                      {
                        "externalReferences": [
                          {
                            "_value": {
                              "declaration": 357,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "4907:6:1",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 360,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let memOffset := mload(0x40)\n    mstore(0x40, add(memOffset, 32))\n    mstore(memOffset, _value)\n    return(memOffset, 32)\n}",
                        "src": "4780:178:1"
                      }
                    ]
                  },
                  "documentation": "@dev Load a uint256 value into memory and return it\n@param _value Uint256 value",
                  "id": 362,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mLoadAndReturn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 358,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 357,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 362,
                        "src": "4741:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 356,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4741:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4740:16:1"
                  },
                  "returnParameters": {
                    "id": 359,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4770:0:1"
                  },
                  "scope": 384,
                  "src": "4717:247:1",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 368,
                    "nodeType": "Block",
                    "src": "5133:194:1",
                    "statements": [
                      {
                        "externalReferences": [
                          {
                            "_value": {
                              "declaration": 364,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "5270:6:1",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 367,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let memOffset := mload(0x40)\n    mstore(0x40, add(memOffset, 32))\n    mstore(memOffset, _value)\n    return(memOffset, 32)\n}",
                        "src": "5143:178:1"
                      }
                    ]
                  },
                  "documentation": "@dev Load a bytes32 value into memory and return it\n@param _value Bytes32 value",
                  "id": 369,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mLoadAndReturn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 365,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 364,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 369,
                        "src": "5104:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 363,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5104:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5103:16:1"
                  },
                  "returnParameters": {
                    "id": 366,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5133:0:1"
                  },
                  "scope": 384,
                  "src": "5080:247:1",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 375,
                    "nodeType": "Block",
                    "src": "5487:194:1",
                    "statements": [
                      {
                        "externalReferences": [
                          {
                            "_value": {
                              "declaration": 371,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "5624:6:1",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 374,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let memOffset := mload(0x40)\n    mstore(0x40, add(memOffset, 32))\n    mstore(memOffset, _value)\n    return(memOffset, 32)\n}",
                        "src": "5497:178:1"
                      }
                    ]
                  },
                  "documentation": "@dev Load a bool value into memory and return it\n@param _value Bool value",
                  "id": 376,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mLoadAndReturn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 372,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 371,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 376,
                        "src": "5461:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 370,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5461:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5460:13:1"
                  },
                  "returnParameters": {
                    "id": 373,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5487:0:1"
                  },
                  "scope": 384,
                  "src": "5437:244:1",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 382,
                    "nodeType": "Block",
                    "src": "5851:194:1",
                    "statements": [
                      {
                        "externalReferences": [
                          {
                            "_value": {
                              "declaration": 378,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "5988:6:1",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 381,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let memOffset := mload(0x40)\n    mstore(0x40, add(memOffset, 32))\n    mstore(memOffset, _value)\n    return(memOffset, 32)\n}",
                        "src": "5861:178:1"
                      }
                    ]
                  },
                  "documentation": "@dev Load an address value into memory and return it\n@param _value Address value",
                  "id": 383,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mLoadAndReturn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 379,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 378,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 383,
                        "src": "5822:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 377,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5822:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5821:16:1"
                  },
                  "returnParameters": {
                    "id": 380,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5851:0:1"
                  },
                  "scope": 384,
                  "src": "5798:247:1",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                }
              ],
              "scope": 385,
              "src": "137:5910:1"
            }
          ],
          "src": "0:6048:1"
        },
        "id": 1
      },
      "contracts/test/mocks/MinterMock.sol": {
        "ast": {
          "absolutePath": "contracts/test/mocks/MinterMock.sol",
          "exportedSymbols": {
            "MinterMock": [
              409
            ]
          },
          "id": 410,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 386,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".11"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:24:2"
            },
            {
              "absolutePath": "contracts/test/mocks/GenericMock.sol",
              "file": "./GenericMock.sol",
              "id": 387,
              "nodeType": "ImportDirective",
              "scope": 410,
              "sourceUnit": 385,
              "src": "26:27:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 388,
                    "name": "GenericMock",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 384,
                    "src": "78:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_GenericMock_$384",
                      "typeString": "contract GenericMock"
                    }
                  },
                  "id": 389,
                  "nodeType": "InheritanceSpecifier",
                  "src": "78:11:2"
                }
              ],
              "contractDependencies": [
                384
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 409,
              "linearizedBaseContracts": [
                409,
                384
              ],
              "name": "MinterMock",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 395,
                  "name": "TrustedWithdrawETH",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 394,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 391,
                        "indexed": false,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 395,
                        "src": "121:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 390,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "121:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 393,
                        "indexed": false,
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 395,
                        "src": "133:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 392,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "133:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "120:28:2"
                  },
                  "src": "96:53:2"
                },
                {
                  "body": {
                    "id": 407,
                    "nodeType": "Block",
                    "src": "222:54:2",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 403,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 397,
                              "src": "256:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 404,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 399,
                              "src": "261:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 402,
                            "name": "TrustedWithdrawETH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 395,
                            "src": "237:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 405,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "237:32:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 406,
                        "nodeType": "EmitStatement",
                        "src": "232:37:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 408,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "trustedWithdrawETH",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 400,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 397,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 408,
                        "src": "183:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 396,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "183:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 399,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 408,
                        "src": "196:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 398,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "196:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "182:30:2"
                  },
                  "returnParameters": {
                    "id": 401,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "222:0:2"
                  },
                  "scope": 409,
                  "src": "155:121:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 410,
              "src": "55:223:2"
            }
          ],
          "src": "0:279:2"
        },
        "id": 2
      }
    }
  }
}
