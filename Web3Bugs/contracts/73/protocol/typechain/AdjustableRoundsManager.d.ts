/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AdjustableRoundsManagerInterface extends ethers.utils.Interface {
  functions: {
    "setRoundLockAmount(uint256)": FunctionFragment;
    "lastRoundLengthUpdateRound()": FunctionFragment;
    "setLIPUpgradeRound(uint256,uint256)": FunctionFragment;
    "lipUpgradeRound(uint256)": FunctionFragment;
    "setBlockHash(bytes32)": FunctionFragment;
    "currentRoundInitialized()": FunctionFragment;
    "setBlockNum(uint256)": FunctionFragment;
    "blockHashForRound(uint256)": FunctionFragment;
    "targetContractId()": FunctionFragment;
    "lastRoundLengthUpdateStartBlock()": FunctionFragment;
    "setRoundLength(uint256)": FunctionFragment;
    "currentRoundLocked()": FunctionFragment;
    "blockHash(uint256)": FunctionFragment;
    "lastInitializedRound()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "blockNum()": FunctionFragment;
    "roundLength()": FunctionFragment;
    "currentRoundStartBlock()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "initializeRound()": FunctionFragment;
    "roundLockAmount()": FunctionFragment;
    "controller()": FunctionFragment;
    "mineBlocks(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setRoundLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoundLengthUpdateRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLIPUpgradeRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lipUpgradeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockNum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockHashForRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoundLengthUpdateStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInitializedRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "blockNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roundLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundLockAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mineBlocks",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "setRoundLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRoundLengthUpdateRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLIPUpgradeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lipUpgradeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockHashForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRoundLengthUpdateStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastInitializedRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mineBlocks", data: BytesLike): Result;

  events: {
    "NewRound(uint256,bytes32)": EventFragment;
    "SetController(address)": EventFragment;
    "ParameterUpdate(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdate"): EventFragment;
}

export class AdjustableRoundsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AdjustableRoundsManagerInterface;

  functions: {
    setRoundLockAmount(
      _roundLockAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastRoundLengthUpdateRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    setLIPUpgradeRound(
      _lip: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lipUpgradeRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBlockHash(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRoundInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    setBlockNum(
      _num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    targetContractId(overrides?: CallOverrides): Promise<[string]>;

    lastRoundLengthUpdateStartBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setRoundLength(
      _roundLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRoundLocked(overrides?: CallOverrides): Promise<[boolean]>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastInitializedRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRoundStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roundLockAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    mineBlocks(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  setRoundLockAmount(
    _roundLockAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastRoundLengthUpdateRound(overrides?: CallOverrides): Promise<BigNumber>;

  setLIPUpgradeRound(
    _lip: BigNumberish,
    _round: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lipUpgradeRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBlockHash(
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRoundInitialized(overrides?: CallOverrides): Promise<boolean>;

  setBlockNum(
    _num: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockHashForRound(
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  targetContractId(overrides?: CallOverrides): Promise<string>;

  lastRoundLengthUpdateStartBlock(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRoundLength(
    _roundLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRoundLocked(overrides?: CallOverrides): Promise<boolean>;

  blockHash(_block: BigNumberish, overrides?: CallOverrides): Promise<string>;

  lastInitializedRound(overrides?: CallOverrides): Promise<BigNumber>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  blockNum(overrides?: CallOverrides): Promise<BigNumber>;

  roundLength(overrides?: CallOverrides): Promise<BigNumber>;

  currentRoundStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roundLockAmount(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  mineBlocks(
    _blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setRoundLockAmount(
      _roundLockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastRoundLengthUpdateRound(overrides?: CallOverrides): Promise<BigNumber>;

    setLIPUpgradeRound(
      _lip: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lipUpgradeRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBlockHash(_hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    currentRoundInitialized(overrides?: CallOverrides): Promise<boolean>;

    setBlockNum(_num: BigNumberish, overrides?: CallOverrides): Promise<void>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    targetContractId(overrides?: CallOverrides): Promise<string>;

    lastRoundLengthUpdateStartBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRoundLength(
      _roundLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRoundLocked(overrides?: CallOverrides): Promise<boolean>;

    blockHash(_block: BigNumberish, overrides?: CallOverrides): Promise<string>;

    lastInitializedRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    blockNum(overrides?: CallOverrides): Promise<BigNumber>;

    roundLength(overrides?: CallOverrides): Promise<BigNumber>;

    currentRoundStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeRound(overrides?: CallOverrides): Promise<void>;

    roundLockAmount(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    mineBlocks(_blocks: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewRound(
      round?: BigNumberish | null,
      blockHash?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { round: BigNumber; blockHash: string }
    >;

    SetController(
      controller?: null
    ): TypedEventFilter<[string], { controller: string }>;

    ParameterUpdate(
      param?: null
    ): TypedEventFilter<[string], { param: string }>;
  };

  estimateGas: {
    setRoundLockAmount(
      _roundLockAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastRoundLengthUpdateRound(overrides?: CallOverrides): Promise<BigNumber>;

    setLIPUpgradeRound(
      _lip: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lipUpgradeRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBlockHash(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRoundInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    setBlockNum(
      _num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetContractId(overrides?: CallOverrides): Promise<BigNumber>;

    lastRoundLengthUpdateStartBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRoundLength(
      _roundLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRoundLocked(overrides?: CallOverrides): Promise<BigNumber>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastInitializedRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    blockNum(overrides?: CallOverrides): Promise<BigNumber>;

    roundLength(overrides?: CallOverrides): Promise<BigNumber>;

    currentRoundStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roundLockAmount(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    mineBlocks(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setRoundLockAmount(
      _roundLockAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastRoundLengthUpdateRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLIPUpgradeRound(
      _lip: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lipUpgradeRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBlockHash(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRoundInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBlockNum(
      _num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetContractId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRoundLengthUpdateStartBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRoundLength(
      _roundLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRoundLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastInitializedRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRoundStartBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roundLockAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mineBlocks(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
