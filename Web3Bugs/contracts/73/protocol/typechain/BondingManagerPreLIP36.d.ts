/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BondingManagerPreLIP36Interface extends ethers.utils.Interface {
  functions: {
    "activeTranscoderSetDEPRECATED(uint256)": FunctionFragment;
    "maxEarningsClaimsRounds()": FunctionFragment;
    "rebondFromUnbondedWithHint(address,uint256,address,address)": FunctionFragment;
    "isActiveTranscoder(address)": FunctionFragment;
    "isValidUnbondingLock(address,uint256)": FunctionFragment;
    "delegatorStatus(address)": FunctionFragment;
    "reward()": FunctionFragment;
    "slashTranscoder(address,address,uint256,uint256)": FunctionFragment;
    "getNextTranscoderInPool(address)": FunctionFragment;
    "getTranscoderEarningsPoolForRound(address,uint256)": FunctionFragment;
    "claimEarnings(uint256)": FunctionFragment;
    "withdrawStake(uint256)": FunctionFragment;
    "unbond(uint256)": FunctionFragment;
    "getTranscoderPoolSize()": FunctionFragment;
    "transcoderWithHint(uint256,uint256,address,address)": FunctionFragment;
    "rebondFromUnbonded(address,uint256)": FunctionFragment;
    "updateTranscoderWithFees(address,uint256,uint256)": FunctionFragment;
    "numActiveTranscodersDEPRECATED()": FunctionFragment;
    "getDelegatorUnbondingLock(address,uint256)": FunctionFragment;
    "currentRoundTotalActiveStake()": FunctionFragment;
    "transcoder(uint256,uint256)": FunctionFragment;
    "nextRoundTotalActiveStake()": FunctionFragment;
    "withdrawFees()": FunctionFragment;
    "targetContractId()": FunctionFragment;
    "getTranscoderPoolMaxSize()": FunctionFragment;
    "getTotalBonded()": FunctionFragment;
    "getTranscoder(address)": FunctionFragment;
    "setNumActiveTranscoders(uint256)": FunctionFragment;
    "isRegisteredTranscoder(address)": FunctionFragment;
    "bondWithHint(uint256,address,address,address,address,address)": FunctionFragment;
    "unbondingPeriod()": FunctionFragment;
    "setCurrentRoundTotalActiveStake()": FunctionFragment;
    "setMaxEarningsClaimsRounds(uint256)": FunctionFragment;
    "rebondWithHint(uint256,address,address)": FunctionFragment;
    "rewardWithHint(address,address)": FunctionFragment;
    "getFirstTranscoderInPool()": FunctionFragment;
    "transcoderStatus(address)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "unbondWithHint(uint256,address,address)": FunctionFragment;
    "pendingStake(address,uint256)": FunctionFragment;
    "transcoderTotalStake(address)": FunctionFragment;
    "getDelegator(address)": FunctionFragment;
    "bond(uint256,address)": FunctionFragment;
    "rebond(uint256)": FunctionFragment;
    "setUnbondingPeriod(uint64)": FunctionFragment;
    "pendingFees(address,uint256)": FunctionFragment;
    "controller()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeTranscoderSetDEPRECATED",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxEarningsClaimsRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebondFromUnbondedWithHint",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveTranscoder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidUnbondingLock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorStatus",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "slashTranscoder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextTranscoderInPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderEarningsPoolForRound",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transcoderWithHint",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rebondFromUnbonded",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTranscoderWithFees",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numActiveTranscodersDEPRECATED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorUnbondingLock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundTotalActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transcoder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRoundTotalActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderPoolMaxSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBonded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumActiveTranscoders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredTranscoder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondWithHint",
    values: [BigNumberish, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentRoundTotalActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxEarningsClaimsRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebondWithHint",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWithHint",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstTranscoderInPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transcoderStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondWithHint",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transcoderTotalStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rebond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbondingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeTranscoderSetDEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxEarningsClaimsRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebondFromUnbondedWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidUnbondingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slashTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextTranscoderInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderEarningsPoolForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transcoderWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebondFromUnbonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTranscoderWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numActiveTranscodersDEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorUnbondingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundTotalActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transcoder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextRoundTotalActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderPoolMaxSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumActiveTranscoders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentRoundTotalActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxEarningsClaimsRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebondWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstTranscoderInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transcoderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transcoderTotalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUnbondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;

  events: {
    "TranscoderUpdate(address,uint256,uint256)": EventFragment;
    "TranscoderActivated(address,uint256)": EventFragment;
    "TranscoderDeactivated(address,uint256)": EventFragment;
    "TranscoderSlashed(address,address,uint256,uint256)": EventFragment;
    "Reward(address,uint256)": EventFragment;
    "Bond(address,address,address,uint256,uint256)": EventFragment;
    "Unbond(address,address,uint256,uint256,uint256)": EventFragment;
    "Rebond(address,address,uint256,uint256)": EventFragment;
    "WithdrawStake(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawFees(address)": EventFragment;
    "EarningsClaimed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "SetController(address)": EventFragment;
    "ParameterUpdate(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TranscoderUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarningsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdate"): EventFragment;
}

export class BondingManagerPreLIP36 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BondingManagerPreLIP36Interface;

  functions: {
    activeTranscoderSetDEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStake: BigNumber }>;

    maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebondFromUnbondedWithHint(
      _to: string,
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delegatorStatus(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNextTranscoderInPool(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTranscoderEarningsPoolForRound(
      _transcoder: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        rewardPool: BigNumber;
        feePool: BigNumber;
        totalStake: BigNumber;
        claimableStake: BigNumber;
        transcoderRewardCut: BigNumber;
        transcoderFeeShare: BigNumber;
        transcoderRewardPool: BigNumber;
        transcoderFeePool: BigNumber;
        hasTranscoderRewardFeePool: boolean;
      }
    >;

    claimEarnings(
      _endRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbond(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    transcoderWithHint(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebondFromUnbonded(
      _to: string,
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDelegatorUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; withdrawRound: BigNumber }
    >;

    currentRoundTotalActiveStake(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transcoder(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetContractId(overrides?: CallOverrides): Promise<[string]>;

    getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBonded(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastRewardRound: BigNumber;
        rewardCut: BigNumber;
        feeShare: BigNumber;
        lastActiveStakeUpdateRound: BigNumber;
        activationRound: BigNumber;
        deactivationRound: BigNumber;
      }
    >;

    setNumActiveTranscoders(
      _numActiveTranscoders: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRegisteredTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bondWithHint(
      _amount: BigNumberish,
      _to: string,
      _oldDelegateNewPosPrev: string,
      _oldDelegateNewPosNext: string,
      _currDelegateNewPosPrev: string,
      _currDelegateNewPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbondingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebondWithHint(
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardWithHint(
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFirstTranscoderInPool(overrides?: CallOverrides): Promise<[string]>;

    transcoderStatus(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbondWithHint(
      _amount: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingStake(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDelegator(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bondedAmount: BigNumber;
        fees: BigNumber;
        delegateAddress: string;
        delegatedAmount: BigNumber;
        startRound: BigNumber;
        lastClaimRound: BigNumber;
        nextUnbondingLockId: BigNumber;
      }
    >;

    bond(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebond(
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnbondingPeriod(
      _unbondingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingFees(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;
  };

  activeTranscoderSetDEPRECATED(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<BigNumber>;

  rebondFromUnbondedWithHint(
    _to: string,
    _unbondingLockId: BigNumberish,
    _newPosPrev: string,
    _newPosNext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActiveTranscoder(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidUnbondingLock(
    _delegator: string,
    _unbondingLockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  delegatorStatus(
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<number>;

  reward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashTranscoder(
    _transcoder: string,
    _finder: string,
    _slashAmount: BigNumberish,
    _finderFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNextTranscoderInPool(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTranscoderEarningsPoolForRound(
    _transcoder: string,
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      rewardPool: BigNumber;
      feePool: BigNumber;
      totalStake: BigNumber;
      claimableStake: BigNumber;
      transcoderRewardCut: BigNumber;
      transcoderFeeShare: BigNumber;
      transcoderRewardPool: BigNumber;
      transcoderFeePool: BigNumber;
      hasTranscoderRewardFeePool: boolean;
    }
  >;

  claimEarnings(
    _endRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    _unbondingLockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbond(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  transcoderWithHint(
    _rewardCut: BigNumberish,
    _feeShare: BigNumberish,
    _newPosPrev: string,
    _newPosNext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebondFromUnbonded(
    _to: string,
    _unbondingLockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTranscoderWithFees(
    _transcoder: string,
    _fees: BigNumberish,
    _round: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numActiveTranscodersDEPRECATED(overrides?: CallOverrides): Promise<BigNumber>;

  getDelegatorUnbondingLock(
    _delegator: string,
    _unbondingLockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; withdrawRound: BigNumber }
  >;

  currentRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

  transcoder(
    _rewardCut: BigNumberish,
    _feeShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetContractId(overrides?: CallOverrides): Promise<string>;

  getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

  getTranscoder(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastRewardRound: BigNumber;
      rewardCut: BigNumber;
      feeShare: BigNumber;
      lastActiveStakeUpdateRound: BigNumber;
      activationRound: BigNumber;
      deactivationRound: BigNumber;
    }
  >;

  setNumActiveTranscoders(
    _numActiveTranscoders: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRegisteredTranscoder(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bondWithHint(
    _amount: BigNumberish,
    _to: string,
    _oldDelegateNewPosPrev: string,
    _oldDelegateNewPosNext: string,
    _currDelegateNewPosPrev: string,
    _currDelegateNewPosNext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  setCurrentRoundTotalActiveStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxEarningsClaimsRounds(
    _maxEarningsClaimsRounds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebondWithHint(
    _unbondingLockId: BigNumberish,
    _newPosPrev: string,
    _newPosNext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardWithHint(
    _newPosPrev: string,
    _newPosNext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFirstTranscoderInPool(overrides?: CallOverrides): Promise<string>;

  transcoderStatus(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<number>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbondWithHint(
    _amount: BigNumberish,
    _newPosPrev: string,
    _newPosNext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingStake(
    _delegator: string,
    _endRound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transcoderTotalStake(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDelegator(
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      bondedAmount: BigNumber;
      fees: BigNumber;
      delegateAddress: string;
      delegatedAmount: BigNumber;
      startRound: BigNumber;
      lastClaimRound: BigNumber;
      nextUnbondingLockId: BigNumber;
    }
  >;

  bond(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebond(
    _unbondingLockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnbondingPeriod(
    _unbondingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingFees(
    _delegator: string,
    _endRound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activeTranscoderSetDEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<BigNumber>;

    rebondFromUnbondedWithHint(
      _to: string,
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegatorStatus(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<number>;

    reward(overrides?: CallOverrides): Promise<void>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextTranscoderInPool(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTranscoderEarningsPoolForRound(
      _transcoder: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        rewardPool: BigNumber;
        feePool: BigNumber;
        totalStake: BigNumber;
        claimableStake: BigNumber;
        transcoderRewardCut: BigNumber;
        transcoderFeeShare: BigNumber;
        transcoderRewardPool: BigNumber;
        transcoderFeePool: BigNumber;
        hasTranscoderRewardFeePool: boolean;
      }
    >;

    claimEarnings(
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unbond(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    transcoderWithHint(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rebondFromUnbonded(
      _to: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; withdrawRound: BigNumber }
    >;

    currentRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    transcoder(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;

    targetContractId(overrides?: CallOverrides): Promise<string>;

    getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    getTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastRewardRound: BigNumber;
        rewardCut: BigNumber;
        feeShare: BigNumber;
        lastActiveStakeUpdateRound: BigNumber;
        activationRound: BigNumber;
        deactivationRound: BigNumber;
      }
    >;

    setNumActiveTranscoders(
      _numActiveTranscoders: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bondWithHint(
      _amount: BigNumberish,
      _to: string,
      _oldDelegateNewPosPrev: string,
      _oldDelegateNewPosNext: string,
      _currDelegateNewPosPrev: string,
      _currDelegateNewPosNext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentRoundTotalActiveStake(overrides?: CallOverrides): Promise<void>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rebondWithHint(
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardWithHint(
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getFirstTranscoderInPool(overrides?: CallOverrides): Promise<string>;

    transcoderStatus(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<number>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbondWithHint(
      _amount: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingStake(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegator(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bondedAmount: BigNumber;
        fees: BigNumber;
        delegateAddress: string;
        delegatedAmount: BigNumber;
        startRound: BigNumber;
        lastClaimRound: BigNumber;
        nextUnbondingLockId: BigNumber;
      }
    >;

    bond(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rebond(
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnbondingPeriod(
      _unbondingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingFees(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    TranscoderUpdate(
      transcoder?: string | null,
      rewardCut?: null,
      feeShare?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { transcoder: string; rewardCut: BigNumber; feeShare: BigNumber }
    >;

    TranscoderActivated(
      transcoder?: string | null,
      activationRound?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transcoder: string; activationRound: BigNumber }
    >;

    TranscoderDeactivated(
      transcoder?: string | null,
      deactivationRound?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transcoder: string; deactivationRound: BigNumber }
    >;

    TranscoderSlashed(
      transcoder?: string | null,
      finder?: null,
      penalty?: null,
      finderReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        transcoder: string;
        finder: string;
        penalty: BigNumber;
        finderReward: BigNumber;
      }
    >;

    Reward(
      transcoder?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transcoder: string; amount: BigNumber }
    >;

    Bond(
      newDelegate?: string | null,
      oldDelegate?: string | null,
      delegator?: string | null,
      additionalAmount?: null,
      bondedAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        newDelegate: string;
        oldDelegate: string;
        delegator: string;
        additionalAmount: BigNumber;
        bondedAmount: BigNumber;
      }
    >;

    Unbond(
      delegate?: string | null,
      delegator?: string | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        delegate: string;
        delegator: string;
        unbondingLockId: BigNumber;
        amount: BigNumber;
        withdrawRound: BigNumber;
      }
    >;

    Rebond(
      delegate?: string | null,
      delegator?: string | null,
      unbondingLockId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        delegate: string;
        delegator: string;
        unbondingLockId: BigNumber;
        amount: BigNumber;
      }
    >;

    WithdrawStake(
      delegator?: string | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        delegator: string;
        unbondingLockId: BigNumber;
        amount: BigNumber;
        withdrawRound: BigNumber;
      }
    >;

    WithdrawFees(
      delegator?: string | null
    ): TypedEventFilter<[string], { delegator: string }>;

    EarningsClaimed(
      delegate?: string | null,
      delegator?: string | null,
      rewards?: null,
      fees?: null,
      startRound?: null,
      endRound?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        delegate: string;
        delegator: string;
        rewards: BigNumber;
        fees: BigNumber;
        startRound: BigNumber;
        endRound: BigNumber;
      }
    >;

    SetController(
      controller?: null
    ): TypedEventFilter<[string], { controller: string }>;

    ParameterUpdate(
      param?: null
    ): TypedEventFilter<[string], { param: string }>;
  };

  estimateGas: {
    activeTranscoderSetDEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<BigNumber>;

    rebondFromUnbondedWithHint(
      _to: string,
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorStatus(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNextTranscoderInPool(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTranscoderEarningsPoolForRound(
      _transcoder: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimEarnings(
      _endRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbond(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    transcoderWithHint(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebondFromUnbonded(
      _to: string,
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    transcoder(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetContractId(overrides?: CallOverrides): Promise<BigNumber>;

    getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    getTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNumActiveTranscoders(
      _numActiveTranscoders: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRegisteredTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondWithHint(
      _amount: BigNumberish,
      _to: string,
      _oldDelegateNewPosPrev: string,
      _oldDelegateNewPosNext: string,
      _currDelegateNewPosPrev: string,
      _currDelegateNewPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebondWithHint(
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardWithHint(
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFirstTranscoderInPool(overrides?: CallOverrides): Promise<BigNumber>;

    transcoderStatus(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbondWithHint(
      _amount: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingStake(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegator(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bond(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebond(
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnbondingPeriod(
      _unbondingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingFees(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeTranscoderSetDEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxEarningsClaimsRounds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebondFromUnbondedWithHint(
      _to: string,
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatorStatus(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNextTranscoderInPool(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTranscoderEarningsPoolForRound(
      _transcoder: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimEarnings(
      _endRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbond(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTranscoderPoolSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transcoderWithHint(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebondFromUnbonded(
      _to: string,
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorUnbondingLock(
      _delegator: string,
      _unbondingLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRoundTotalActiveStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transcoder(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextRoundTotalActiveStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetContractId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTranscoderPoolMaxSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBonded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNumActiveTranscoders(
      _numActiveTranscoders: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondWithHint(
      _amount: BigNumberish,
      _to: string,
      _oldDelegateNewPosPrev: string,
      _oldDelegateNewPosNext: string,
      _currDelegateNewPosPrev: string,
      _currDelegateNewPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbondingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebondWithHint(
      _unbondingLockId: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardWithHint(
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFirstTranscoderInPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transcoderStatus(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbondWithHint(
      _amount: BigNumberish,
      _newPosPrev: string,
      _newPosNext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingStake(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegator(
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bond(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebond(
      _unbondingLockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnbondingPeriod(
      _unbondingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingFees(
      _delegator: string,
      _endRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
