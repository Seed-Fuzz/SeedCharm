/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EarningsPoolFixtureInterface extends ethers.utils.Interface {
  functions: {
    "feePoolShare(uint256,bool)": FunctionFragment;
    "getHasTranscoderRewardFeePool()": FunctionFragment;
    "rewardPoolShare(uint256,bool)": FunctionFragment;
    "getTranscoderRewardPool()": FunctionFragment;
    "getRewardPool()": FunctionFragment;
    "setHasTranscoderRewardFeePool(bool)": FunctionFragment;
    "setStake(uint256)": FunctionFragment;
    "getFeePool()": FunctionFragment;
    "getTranscoderFeePool()": FunctionFragment;
    "setCommission(uint256,uint256)": FunctionFragment;
    "getClaimableStake()": FunctionFragment;
    "addToFeePool(uint256)": FunctionFragment;
    "getTotalStake()": FunctionFragment;
    "getCumulativeFeeFactor()": FunctionFragment;
    "hasClaimableShares()": FunctionFragment;
    "setClaimableStake(uint256)": FunctionFragment;
    "setPrevPoolEarningsFactors(uint256,uint256)": FunctionFragment;
    "getCumulativeRewardFactor()": FunctionFragment;
    "updateCumulativeRewardFactor(uint256)": FunctionFragment;
    "getEarningsPool()": FunctionFragment;
    "addToRewardPool(uint256)": FunctionFragment;
    "updateCumulativeFeeFactor(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "feePoolShare",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getHasTranscoderRewardFeePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPoolShare",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHasTranscoderRewardFeePool",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderFeePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommission",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToFeePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeFeeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimableShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimableStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrevPoolEarningsFactors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeRewardFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCumulativeRewardFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarningsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToRewardPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCumulativeFeeFactor",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "feePoolShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHasTranscoderRewardFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPoolShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHasTranscoderRewardFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimableShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimableStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrevPoolEarningsFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCumulativeRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarningsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCumulativeFeeFactor",
    data: BytesLike
  ): Result;

  events: {};
}

export class EarningsPoolFixture extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EarningsPoolFixtureInterface;

  functions: {
    feePoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHasTranscoderRewardFeePool(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardPoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTranscoderRewardPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    setHasTranscoderRewardFeePool(
      _hasTranscoderRewardFeePool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStake(
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeePool(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTranscoderFeePool(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCommission(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaimableStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToFeePool(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCumulativeFeeFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasClaimableShares(overrides?: CallOverrides): Promise<[boolean]>;

    setClaimableStake(
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrevPoolEarningsFactors(
      _cumulativeFeeFactor: BigNumberish,
      _cumulativeRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCumulativeRewardFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCumulativeRewardFactor(
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEarningsPool(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    addToRewardPool(
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCumulativeFeeFactor(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  feePoolShare(
    _stake: BigNumberish,
    _isTranscoder: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHasTranscoderRewardFeePool(overrides?: CallOverrides): Promise<boolean>;

  rewardPoolShare(
    _stake: BigNumberish,
    _isTranscoder: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTranscoderRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

  setHasTranscoderRewardFeePool(
    _hasTranscoderRewardFeePool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStake(
    _stake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeePool(overrides?: CallOverrides): Promise<BigNumber>;

  getTranscoderFeePool(overrides?: CallOverrides): Promise<BigNumber>;

  setCommission(
    _rewardCut: BigNumberish,
    _feeShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaimableStake(overrides?: CallOverrides): Promise<BigNumber>;

  addToFeePool(
    _fees: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

  getCumulativeFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

  hasClaimableShares(overrides?: CallOverrides): Promise<boolean>;

  setClaimableStake(
    _stake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrevPoolEarningsFactors(
    _cumulativeFeeFactor: BigNumberish,
    _cumulativeRewardFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCumulativeRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

  updateCumulativeRewardFactor(
    _rewards: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEarningsPool(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  addToRewardPool(
    _rewards: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCumulativeFeeFactor(
    _fees: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feePoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHasTranscoderRewardFeePool(overrides?: CallOverrides): Promise<boolean>;

    rewardPoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTranscoderRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setHasTranscoderRewardFeePool(
      _hasTranscoderRewardFeePool: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStake(_stake: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getFeePool(overrides?: CallOverrides): Promise<BigNumber>;

    getTranscoderFeePool(overrides?: CallOverrides): Promise<BigNumber>;

    setCommission(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimableStake(overrides?: CallOverrides): Promise<BigNumber>;

    addToFeePool(_fees: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

    getCumulativeFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimableShares(overrides?: CallOverrides): Promise<boolean>;

    setClaimableStake(
      _stake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrevPoolEarningsFactors(
      _cumulativeFeeFactor: BigNumberish,
      _cumulativeRewardFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCumulativeRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

    updateCumulativeRewardFactor(
      _rewards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getEarningsPool(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    addToRewardPool(
      _rewards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCumulativeFeeFactor(
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    feePoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHasTranscoderRewardFeePool(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTranscoderRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setHasTranscoderRewardFeePool(
      _hasTranscoderRewardFeePool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStake(
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeePool(overrides?: CallOverrides): Promise<BigNumber>;

    getTranscoderFeePool(overrides?: CallOverrides): Promise<BigNumber>;

    setCommission(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaimableStake(overrides?: CallOverrides): Promise<BigNumber>;

    addToFeePool(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

    getCumulativeFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimableShares(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimableStake(
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrevPoolEarningsFactors(
      _cumulativeFeeFactor: BigNumberish,
      _cumulativeRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCumulativeRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

    updateCumulativeRewardFactor(
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEarningsPool(overrides?: CallOverrides): Promise<BigNumber>;

    addToRewardPool(
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCumulativeFeeFactor(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feePoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHasTranscoderRewardFeePool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPoolShare(
      _stake: BigNumberish,
      _isTranscoder: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTranscoderRewardPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setHasTranscoderRewardFeePool(
      _hasTranscoderRewardFeePool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStake(
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTranscoderFeePool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCommission(
      _rewardCut: BigNumberish,
      _feeShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToFeePool(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCumulativeFeeFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimableShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClaimableStake(
      _stake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrevPoolEarningsFactors(
      _cumulativeFeeFactor: BigNumberish,
      _cumulativeRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCumulativeRewardFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCumulativeRewardFactor(
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEarningsPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToRewardPool(
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCumulativeFeeFactor(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
