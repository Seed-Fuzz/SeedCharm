/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GovernorInterface extends ethers.utils.Interface {
  functions: {
    "stage(tuple,uint256)": FunctionFragment;
    "execute(tuple)": FunctionFragment;
    "cancel(tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "updates(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "stage",
    values: [
      {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "updates", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateStaged(tuple,uint256)": EventFragment;
    "UpdateExecuted(tuple)": EventFragment;
    "UpdateCancelled(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStaged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCancelled"): EventFragment;
}

export class Governor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernorInterface;

  functions: {
    stage(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    updates(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  stage(
    _update: {
      target: string[];
      value: BigNumberish[];
      data: BytesLike[];
      nonce: BigNumberish;
    },
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _update: {
      target: string[];
      value: BigNumberish[];
      data: BytesLike[];
      nonce: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    _update: {
      target: string[];
      value: BigNumberish[];
      data: BytesLike[];
      nonce: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  updates(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    stage(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    updates(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    UpdateStaged(
      update?: null,
      delay?: null
    ): TypedEventFilter<
      [
        [string[], BigNumber[], string[], BigNumber] & {
          target: string[];
          value: BigNumber[];
          data: string[];
          nonce: BigNumber;
        },
        BigNumber
      ],
      {
        update: [string[], BigNumber[], string[], BigNumber] & {
          target: string[];
          value: BigNumber[];
          data: string[];
          nonce: BigNumber;
        };
        delay: BigNumber;
      }
    >;

    UpdateExecuted(
      update?: null
    ): TypedEventFilter<
      [
        [string[], BigNumber[], string[], BigNumber] & {
          target: string[];
          value: BigNumber[];
          data: string[];
          nonce: BigNumber;
        }
      ],
      {
        update: [string[], BigNumber[], string[], BigNumber] & {
          target: string[];
          value: BigNumber[];
          data: string[];
          nonce: BigNumber;
        };
      }
    >;

    UpdateCancelled(
      update?: null
    ): TypedEventFilter<
      [
        [string[], BigNumber[], string[], BigNumber] & {
          target: string[];
          value: BigNumber[];
          data: string[];
          nonce: BigNumber;
        }
      ],
      {
        update: [string[], BigNumber[], string[], BigNumber] & {
          target: string[];
          value: BigNumber[];
          data: string[];
          nonce: BigNumber;
        };
      }
    >;
  };

  estimateGas: {
    stage(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    updates(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    stage(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      _update: {
        target: string[];
        value: BigNumberish[];
        data: BytesLike[];
        nonce: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updates(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
