/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IBondingManagerInterface extends ethers.utils.Interface {
  functions: {
    "isActiveTranscoder(address)": FunctionFragment;
    "slashTranscoder(address,address,uint256,uint256)": FunctionFragment;
    "getTranscoderPoolSize()": FunctionFragment;
    "updateTranscoderWithFees(address,uint256,uint256)": FunctionFragment;
    "getTotalBonded()": FunctionFragment;
    "setCurrentRoundTotalActiveStake()": FunctionFragment;
    "transcoderTotalStake(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isActiveTranscoder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTranscoder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTranscoderWithFees",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBonded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentRoundTotalActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transcoderTotalStake",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isActiveTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTranscoderWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentRoundTotalActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transcoderTotalStake",
    data: BytesLike
  ): Result;

  events: {
    "TranscoderUpdate(address,uint256,uint256)": EventFragment;
    "TranscoderActivated(address,uint256)": EventFragment;
    "TranscoderDeactivated(address,uint256)": EventFragment;
    "TranscoderSlashed(address,address,uint256,uint256)": EventFragment;
    "Reward(address,uint256)": EventFragment;
    "Bond(address,address,address,uint256,uint256)": EventFragment;
    "Unbond(address,address,uint256,uint256,uint256)": EventFragment;
    "Rebond(address,address,uint256,uint256)": EventFragment;
    "WithdrawStake(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawFees(address)": EventFragment;
    "EarningsClaimed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TranscoderUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarningsClaimed"): EventFragment;
}

export class IBondingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBondingManagerInterface;

  functions: {
    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalBonded(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  isActiveTranscoder(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  slashTranscoder(
    _transcoder: string,
    _finder: string,
    _slashAmount: BigNumberish,
    _finderFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  updateTranscoderWithFees(
    _transcoder: string,
    _fees: BigNumberish,
    _round: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

  setCurrentRoundTotalActiveStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transcoderTotalStake(
    _transcoder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentRoundTotalActiveStake(overrides?: CallOverrides): Promise<void>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    TranscoderUpdate(
      transcoder?: string | null,
      rewardCut?: null,
      feeShare?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { transcoder: string; rewardCut: BigNumber; feeShare: BigNumber }
    >;

    TranscoderActivated(
      transcoder?: string | null,
      activationRound?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transcoder: string; activationRound: BigNumber }
    >;

    TranscoderDeactivated(
      transcoder?: string | null,
      deactivationRound?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transcoder: string; deactivationRound: BigNumber }
    >;

    TranscoderSlashed(
      transcoder?: string | null,
      finder?: null,
      penalty?: null,
      finderReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        transcoder: string;
        finder: string;
        penalty: BigNumber;
        finderReward: BigNumber;
      }
    >;

    Reward(
      transcoder?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transcoder: string; amount: BigNumber }
    >;

    Bond(
      newDelegate?: string | null,
      oldDelegate?: string | null,
      delegator?: string | null,
      additionalAmount?: null,
      bondedAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        newDelegate: string;
        oldDelegate: string;
        delegator: string;
        additionalAmount: BigNumber;
        bondedAmount: BigNumber;
      }
    >;

    Unbond(
      delegate?: string | null,
      delegator?: string | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        delegate: string;
        delegator: string;
        unbondingLockId: BigNumber;
        amount: BigNumber;
        withdrawRound: BigNumber;
      }
    >;

    Rebond(
      delegate?: string | null,
      delegator?: string | null,
      unbondingLockId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        delegate: string;
        delegator: string;
        unbondingLockId: BigNumber;
        amount: BigNumber;
      }
    >;

    WithdrawStake(
      delegator?: string | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        delegator: string;
        unbondingLockId: BigNumber;
        amount: BigNumber;
        withdrawRound: BigNumber;
      }
    >;

    WithdrawFees(
      delegator?: string | null
    ): TypedEventFilter<[string], { delegator: string }>;

    EarningsClaimed(
      delegate?: string | null,
      delegator?: string | null,
      rewards?: null,
      fees?: null,
      startRound?: null,
      endRound?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        delegate: string;
        delegator: string;
        rewards: BigNumber;
        fees: BigNumber;
        startRound: BigNumber;
        endRound: BigNumber;
      }
    >;
  };

  estimateGas: {
    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isActiveTranscoder(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slashTranscoder(
      _transcoder: string,
      _finder: string,
      _slashAmount: BigNumberish,
      _finderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTranscoderPoolSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTranscoderWithFees(
      _transcoder: string,
      _fees: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalBonded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transcoderTotalStake(
      _transcoder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
