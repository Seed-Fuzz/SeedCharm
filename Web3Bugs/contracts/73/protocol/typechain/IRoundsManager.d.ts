/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRoundsManagerInterface extends ethers.utils.Interface {
  functions: {
    "lipUpgradeRound(uint256)": FunctionFragment;
    "currentRoundInitialized()": FunctionFragment;
    "blockHashForRound(uint256)": FunctionFragment;
    "currentRoundLocked()": FunctionFragment;
    "blockHash(uint256)": FunctionFragment;
    "currentRound()": FunctionFragment;
    "blockNum()": FunctionFragment;
    "currentRoundStartBlock()": FunctionFragment;
    "initializeRound()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lipUpgradeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockHashForRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "blockNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentRoundStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRound",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "lipUpgradeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockHashForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeRound",
    data: BytesLike
  ): Result;

  events: {
    "NewRound(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
}

export class IRoundsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRoundsManagerInterface;

  functions: {
    lipUpgradeRound(
      _lip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRoundInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currentRoundLocked(overrides?: CallOverrides): Promise<[boolean]>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRoundStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    initializeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lipUpgradeRound(
    _lip: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRoundInitialized(overrides?: CallOverrides): Promise<boolean>;

  blockHashForRound(
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  currentRoundLocked(overrides?: CallOverrides): Promise<boolean>;

  blockHash(_block: BigNumberish, overrides?: CallOverrides): Promise<string>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  blockNum(overrides?: CallOverrides): Promise<BigNumber>;

  currentRoundStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  initializeRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lipUpgradeRound(
      _lip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoundInitialized(overrides?: CallOverrides): Promise<boolean>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    currentRoundLocked(overrides?: CallOverrides): Promise<boolean>;

    blockHash(_block: BigNumberish, overrides?: CallOverrides): Promise<string>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    blockNum(overrides?: CallOverrides): Promise<BigNumber>;

    currentRoundStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initializeRound(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewRound(
      round?: BigNumberish | null,
      blockHash?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { round: BigNumber; blockHash: string }
    >;
  };

  estimateGas: {
    lipUpgradeRound(
      _lip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoundInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoundLocked(overrides?: CallOverrides): Promise<BigNumber>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    blockNum(overrides?: CallOverrides): Promise<BigNumber>;

    currentRoundStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initializeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lipUpgradeRound(
      _lip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRoundInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockHashForRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRoundLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRoundStartBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
