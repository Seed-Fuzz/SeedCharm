/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MTicketBrokerCoreInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "DepositFunded(address,uint256)": EventFragment;
    "WinningTicketRedeemed(address,address,uint256,uint256,uint256,uint256,bytes)": EventFragment;
    "WinningTicketTransfer(address,address,uint256)": EventFragment;
    "Unlock(address,uint256,uint256)": EventFragment;
    "UnlockCancelled(address)": EventFragment;
    "Withdrawal(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningTicketRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningTicketTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class MTicketBrokerCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MTicketBrokerCoreInterface;

  functions: {};

  callStatic: {};

  filters: {
    DepositFunded(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    WinningTicketRedeemed(
      sender?: string | null,
      recipient?: string | null,
      faceValue?: null,
      winProb?: null,
      senderNonce?: null,
      recipientRand?: null,
      auxData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        sender: string;
        recipient: string;
        faceValue: BigNumber;
        winProb: BigNumber;
        senderNonce: BigNumber;
        recipientRand: BigNumber;
        auxData: string;
      }
    >;

    WinningTicketTransfer(
      sender?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    Unlock(
      sender?: string | null,
      startRound?: null,
      endRound?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; startRound: BigNumber; endRound: BigNumber }
    >;

    UnlockCancelled(
      sender?: string | null
    ): TypedEventFilter<[string], { sender: string }>;

    Withdrawal(
      sender?: string | null,
      deposit?: null,
      reserve?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; deposit: BigNumber; reserve: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
