/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ManagerProxyTargetMockV3Interface extends ethers.utils.Interface {
  functions: {
    "setUint8(uint8)": FunctionFragment;
    "uint64Value()": FunctionFragment;
    "initValue()": FunctionFragment;
    "targetContractId()": FunctionFragment;
    "uint256Value()": FunctionFragment;
    "bytes32Value()": FunctionFragment;
    "kvMap(uint256)": FunctionFragment;
    "setUint64(uint64)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "uint8Value()": FunctionFragment;
    "setBytes32(bytes32)": FunctionFragment;
    "setUint256(uint256)": FunctionFragment;
    "addressValue()": FunctionFragment;
    "setAddress(address)": FunctionFragment;
    "setKv(uint256,uint256)": FunctionFragment;
    "controller()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setUint8",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint64Value",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uint256Value",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32Value",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kvMap", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setUint64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uint8Value",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "setUint8", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uint64Value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256Value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32Value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kvMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUint64", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uint8Value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBytes32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUint256", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;

  events: {
    "SetController(address)": EventFragment;
    "ParameterUpdate(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdate"): EventFragment;
}

export class ManagerProxyTargetMockV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ManagerProxyTargetMockV3Interface;

  functions: {
    setUint8(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uint64Value(overrides?: CallOverrides): Promise<[BigNumber]>;

    initValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetContractId(overrides?: CallOverrides): Promise<[string]>;

    uint256Value(overrides?: CallOverrides): Promise<[BigNumber]>;

    bytes32Value(overrides?: CallOverrides): Promise<[string]>;

    kvMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    setUint64(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uint8Value(overrides?: CallOverrides): Promise<[number]>;

    setBytes32(
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUint256(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressValue(overrides?: CallOverrides): Promise<[string]>;

    setAddress(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKv(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;
  };

  setUint8(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uint64Value(overrides?: CallOverrides): Promise<BigNumber>;

  initValue(overrides?: CallOverrides): Promise<BigNumber>;

  targetContractId(overrides?: CallOverrides): Promise<string>;

  uint256Value(overrides?: CallOverrides): Promise<BigNumber>;

  bytes32Value(overrides?: CallOverrides): Promise<string>;

  kvMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setUint64(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uint8Value(overrides?: CallOverrides): Promise<number>;

  setBytes32(
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUint256(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressValue(overrides?: CallOverrides): Promise<string>;

  setAddress(
    _value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKv(
    _key: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    setUint8(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    uint64Value(overrides?: CallOverrides): Promise<BigNumber>;

    initValue(overrides?: CallOverrides): Promise<BigNumber>;

    targetContractId(overrides?: CallOverrides): Promise<string>;

    uint256Value(overrides?: CallOverrides): Promise<BigNumber>;

    bytes32Value(overrides?: CallOverrides): Promise<string>;

    kvMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setUint64(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uint8Value(overrides?: CallOverrides): Promise<number>;

    setBytes32(_value: BytesLike, overrides?: CallOverrides): Promise<void>;

    setUint256(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addressValue(overrides?: CallOverrides): Promise<string>;

    setAddress(_value: string, overrides?: CallOverrides): Promise<void>;

    setKv(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    SetController(
      controller?: null
    ): TypedEventFilter<[string], { controller: string }>;

    ParameterUpdate(
      param?: null
    ): TypedEventFilter<[string], { param: string }>;
  };

  estimateGas: {
    setUint8(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uint64Value(overrides?: CallOverrides): Promise<BigNumber>;

    initValue(overrides?: CallOverrides): Promise<BigNumber>;

    targetContractId(overrides?: CallOverrides): Promise<BigNumber>;

    uint256Value(overrides?: CallOverrides): Promise<BigNumber>;

    bytes32Value(overrides?: CallOverrides): Promise<BigNumber>;

    kvMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setUint64(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uint8Value(overrides?: CallOverrides): Promise<BigNumber>;

    setBytes32(
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUint256(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressValue(overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKv(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    setUint8(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uint64Value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContractId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uint256Value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytes32Value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kvMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUint64(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uint8Value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBytes32(
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUint256(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddress(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKv(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
