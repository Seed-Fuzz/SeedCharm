/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MinterMockInterface extends ethers.utils.Interface {
  functions: {
    "setMockUint256WithParam(bytes4,bytes32,uint256)": FunctionFragment;
    "execute(address,bytes)": FunctionFragment;
    "setMockUint256(bytes4,uint256)": FunctionFragment;
    "trustedWithdrawETH(address,uint256)": FunctionFragment;
    "setMockAddress(bytes4,address)": FunctionFragment;
    "setMockBool(bytes4,bool)": FunctionFragment;
    "setMockBytes32(bytes4,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setMockUint256WithParam",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockUint256",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedWithdrawETH",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockBool",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockBytes32",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "setMockUint256WithParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMockUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMockAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMockBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMockBytes32",
    data: BytesLike
  ): Result;

  events: {
    "TrustedWithdrawETH(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TrustedWithdrawETH"): EventFragment;
}

export class MinterMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MinterMockInterface;

  functions: {
    setMockUint256WithParam(
      _func: BytesLike,
      _dataHash: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMockUint256(
      _func: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedWithdrawETH(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMockAddress(
      _func: BytesLike,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMockBool(
      _func: BytesLike,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMockBytes32(
      _func: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  setMockUint256WithParam(
    _func: BytesLike,
    _dataHash: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMockUint256(
    _func: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedWithdrawETH(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMockAddress(
    _func: BytesLike,
    _value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMockBool(
    _func: BytesLike,
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMockBytes32(
    _func: BytesLike,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setMockUint256WithParam(
      _func: BytesLike,
      _dataHash: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMockUint256(
      _func: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedWithdrawETH(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMockAddress(
      _func: BytesLike,
      _value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMockBool(
      _func: BytesLike,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMockBytes32(
      _func: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    TrustedWithdrawETH(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    setMockUint256WithParam(
      _func: BytesLike,
      _dataHash: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMockUint256(
      _func: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedWithdrawETH(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMockAddress(
      _func: BytesLike,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMockBool(
      _func: BytesLike,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMockBytes32(
      _func: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setMockUint256WithParam(
      _func: BytesLike,
      _dataHash: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMockUint256(
      _func: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedWithdrawETH(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMockAddress(
      _func: BytesLike,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMockBool(
      _func: BytesLike,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMockBytes32(
      _func: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
