/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MixinReserveInterface extends ethers.utils.Interface {
  functions: {
    "claimedReserve(address,address)": FunctionFragment;
    "getReserveInfo(address)": FunctionFragment;
    "claimableReserve(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimedReserve",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableReserve",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimedReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableReserve",
    data: BytesLike
  ): Result;

  events: {
    "ReserveFunded(address,uint256)": EventFragment;
    "ReserveClaimed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReserveFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveClaimed"): EventFragment;
}

export class MixinReserve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MixinReserveInterface;

  functions: {
    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        }
      ] & {
        info: [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        };
      }
    >;

    claimableReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  claimedReserve(
    _reserveHolder: string,
    _claimant: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveInfo(
    _reserveHolder: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      fundsRemaining: BigNumber;
      claimedInCurrentRound: BigNumber;
    }
  >;

  claimableReserve(
    _reserveHolder: string,
    _claimant: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fundsRemaining: BigNumber;
        claimedInCurrentRound: BigNumber;
      }
    >;

    claimableReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ReserveFunded(
      reserveHolder?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { reserveHolder: string; amount: BigNumber }
    >;

    ReserveClaimed(
      reserveHolder?: string | null,
      claimant?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reserveHolder: string; claimant: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
