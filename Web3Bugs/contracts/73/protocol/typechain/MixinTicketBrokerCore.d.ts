/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MixinTicketBrokerCoreInterface extends ethers.utils.Interface {
  functions: {
    "isUnlockInProgress(address)": FunctionFragment;
    "unlockPeriod()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "claimedReserve(address,address)": FunctionFragment;
    "fundDepositAndReserve(uint256,uint256)": FunctionFragment;
    "usedTickets(bytes32)": FunctionFragment;
    "getReserveInfo(address)": FunctionFragment;
    "fundDeposit()": FunctionFragment;
    "fundReserve()": FunctionFragment;
    "unlock()": FunctionFragment;
    "getTicketHash(tuple)": FunctionFragment;
    "cancelUnlock()": FunctionFragment;
    "getSenderInfo(address)": FunctionFragment;
    "redeemWinningTicket(tuple,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isUnlockInProgress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedReserve",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundDepositAndReserve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usedTickets",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTicketHash",
    values: [
      {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUnlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWinningTicket",
    values: [
      {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      BytesLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "isUnlockInProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundDepositAndReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSenderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWinningTicket",
    data: BytesLike
  ): Result;

  events: {
    "DepositFunded(address,uint256)": EventFragment;
    "WinningTicketRedeemed(address,address,uint256,uint256,uint256,uint256,bytes)": EventFragment;
    "WinningTicketTransfer(address,address,uint256)": EventFragment;
    "Unlock(address,uint256,uint256)": EventFragment;
    "UnlockCancelled(address)": EventFragment;
    "Withdrawal(address,uint256,uint256)": EventFragment;
    "ReserveFunded(address,uint256)": EventFragment;
    "ReserveClaimed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningTicketRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningTicketTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveClaimed"): EventFragment;
}

export class MixinTicketBrokerCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MixinTicketBrokerCoreInterface;

  functions: {
    isUnlockInProgress(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unlockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundDepositAndReserve(
      _depositAmount: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedTickets(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        }
      ] & {
        info: [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        };
      }
    >;

    fundDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundReserve(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTicketHash(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancelUnlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSenderInfo(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          deposit: BigNumber;
          withdrawRound: BigNumber;
        },
        [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        }
      ] & {
        sender: [BigNumber, BigNumber] & {
          deposit: BigNumber;
          withdrawRound: BigNumber;
        };
        reserve: [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        };
      }
    >;

    redeemWinningTicket(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      _sig: BytesLike,
      _recipientRand: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  isUnlockInProgress(
    _sender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedReserve(
    _reserveHolder: string,
    _claimant: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundDepositAndReserve(
    _depositAmount: BigNumberish,
    _reserveAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedTickets(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getReserveInfo(
    _reserveHolder: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      fundsRemaining: BigNumber;
      claimedInCurrentRound: BigNumber;
    }
  >;

  fundDeposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundReserve(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTicketHash(
    _ticket: {
      recipient: string;
      sender: string;
      faceValue: BigNumberish;
      winProb: BigNumberish;
      senderNonce: BigNumberish;
      recipientRandHash: BytesLike;
      auxData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  cancelUnlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSenderInfo(
    _sender: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber] & { deposit: BigNumber; withdrawRound: BigNumber },
      [BigNumber, BigNumber] & {
        fundsRemaining: BigNumber;
        claimedInCurrentRound: BigNumber;
      }
    ] & {
      sender: [BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawRound: BigNumber;
      };
      reserve: [BigNumber, BigNumber] & {
        fundsRemaining: BigNumber;
        claimedInCurrentRound: BigNumber;
      };
    }
  >;

  redeemWinningTicket(
    _ticket: {
      recipient: string;
      sender: string;
      faceValue: BigNumberish;
      winProb: BigNumberish;
      senderNonce: BigNumberish;
      recipientRandHash: BytesLike;
      auxData: BytesLike;
    },
    _sig: BytesLike,
    _recipientRand: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isUnlockInProgress(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundDepositAndReserve(
      _depositAmount: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    usedTickets(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fundsRemaining: BigNumber;
        claimedInCurrentRound: BigNumber;
      }
    >;

    fundDeposit(overrides?: CallOverrides): Promise<void>;

    fundReserve(overrides?: CallOverrides): Promise<void>;

    unlock(overrides?: CallOverrides): Promise<void>;

    getTicketHash(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    cancelUnlock(overrides?: CallOverrides): Promise<void>;

    getSenderInfo(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          deposit: BigNumber;
          withdrawRound: BigNumber;
        },
        [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        }
      ] & {
        sender: [BigNumber, BigNumber] & {
          deposit: BigNumber;
          withdrawRound: BigNumber;
        };
        reserve: [BigNumber, BigNumber] & {
          fundsRemaining: BigNumber;
          claimedInCurrentRound: BigNumber;
        };
      }
    >;

    redeemWinningTicket(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      _sig: BytesLike,
      _recipientRand: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DepositFunded(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    WinningTicketRedeemed(
      sender?: string | null,
      recipient?: string | null,
      faceValue?: null,
      winProb?: null,
      senderNonce?: null,
      recipientRand?: null,
      auxData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        sender: string;
        recipient: string;
        faceValue: BigNumber;
        winProb: BigNumber;
        senderNonce: BigNumber;
        recipientRand: BigNumber;
        auxData: string;
      }
    >;

    WinningTicketTransfer(
      sender?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    Unlock(
      sender?: string | null,
      startRound?: null,
      endRound?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; startRound: BigNumber; endRound: BigNumber }
    >;

    UnlockCancelled(
      sender?: string | null
    ): TypedEventFilter<[string], { sender: string }>;

    Withdrawal(
      sender?: string | null,
      deposit?: null,
      reserve?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; deposit: BigNumber; reserve: BigNumber }
    >;

    ReserveFunded(
      reserveHolder?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { reserveHolder: string; amount: BigNumber }
    >;

    ReserveClaimed(
      reserveHolder?: string | null,
      claimant?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reserveHolder: string; claimant: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    isUnlockInProgress(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundDepositAndReserve(
      _depositAmount: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedTickets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundReserve(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTicketHash(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelUnlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSenderInfo(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemWinningTicket(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      _sig: BytesLike,
      _recipientRand: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isUnlockInProgress(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedReserve(
      _reserveHolder: string,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundDepositAndReserve(
      _depositAmount: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedTickets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveInfo(
      _reserveHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundReserve(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTicketHash(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelUnlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSenderInfo(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemWinningTicket(
      _ticket: {
        recipient: string;
        sender: string;
        faceValue: BigNumberish;
        winProb: BigNumberish;
        senderNonce: BigNumberish;
        recipientRandHash: BytesLike;
        auxData: BytesLike;
      },
      _sig: BytesLike,
      _recipientRand: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
