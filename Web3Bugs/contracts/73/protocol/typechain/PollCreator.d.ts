/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PollCreatorInterface extends ethers.utils.Interface {
  functions: {
    "QUORUM()": FunctionFragment;
    "createPoll(bytes)": FunctionFragment;
    "POLL_CREATION_COST()": FunctionFragment;
    "QUOTA()": FunctionFragment;
    "POLL_PERIOD()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "QUORUM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPoll",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "POLL_CREATION_COST",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QUOTA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POLL_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "QUORUM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POLL_CREATION_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QUOTA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POLL_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "PollCreated(address,bytes,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PollCreated"): EventFragment;
}

export class PollCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PollCreatorInterface;

  functions: {
    QUORUM(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPoll(
      _proposal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    POLL_CREATION_COST(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUOTA(overrides?: CallOverrides): Promise<[BigNumber]>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

  createPoll(
    _proposal: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  POLL_CREATION_COST(overrides?: CallOverrides): Promise<BigNumber>;

  QUOTA(overrides?: CallOverrides): Promise<BigNumber>;

  POLL_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    createPoll(_proposal: BytesLike, overrides?: CallOverrides): Promise<void>;

    POLL_CREATION_COST(overrides?: CallOverrides): Promise<BigNumber>;

    QUOTA(overrides?: CallOverrides): Promise<BigNumber>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    PollCreated(
      poll?: string | null,
      proposal?: null,
      endBlock?: null,
      quorum?: null,
      quota?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        poll: string;
        proposal: string;
        endBlock: BigNumber;
        quorum: BigNumber;
        quota: BigNumber;
      }
    >;
  };

  estimateGas: {
    QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    createPoll(
      _proposal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    POLL_CREATION_COST(overrides?: CallOverrides): Promise<BigNumber>;

    QUOTA(overrides?: CallOverrides): Promise<BigNumber>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    QUORUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPoll(
      _proposal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    POLL_CREATION_COST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QUOTA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
