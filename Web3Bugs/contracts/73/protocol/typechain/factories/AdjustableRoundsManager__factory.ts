/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AdjustableRoundsManager,
  AdjustableRoundsManagerInterface,
} from "../AdjustableRoundsManager";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_roundLockAmount",
        type: "uint256",
      },
    ],
    name: "setRoundLockAmount",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastRoundLengthUpdateRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_lip",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_round",
        type: "uint256",
      },
    ],
    name: "setLIPUpgradeRound",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "lipUpgradeRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
    ],
    name: "setBlockHash",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRoundInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_num",
        type: "uint256",
      },
    ],
    name: "setBlockNum",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "_round",
        type: "uint256",
      },
    ],
    name: "blockHashForRound",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "targetContractId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastRoundLengthUpdateStartBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_roundLength",
        type: "uint256",
      },
    ],
    name: "setRoundLength",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRoundLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "_block",
        type: "uint256",
      },
    ],
    name: "blockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastInitializedRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "blockNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "roundLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRoundStartBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "initializeRound",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "roundLockAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "contract IController",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_blocks",
        type: "uint256",
      },
    ],
    name: "mineBlocks",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    name: "NewRound",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "SetController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "param",
        type: "string",
      },
    ],
    name: "ParameterUpdate",
    type: "event",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ead380380610ead8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610e48806100656000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636841f253116100c35780638fa148f21161007c5780638fa148f2146102b057806392eefe9b146102b8578063d4807fb2146102de578063f5b490d5146102e6578063f77c4791146102ee578063f82de7b0146103125761014d565b80636841f2531461026b57806385df51fd146102735780638807f36e146102905780638a19c8bc146102985780638ae63d6d146102a05780638b649b94146102a85761014d565b8063219bc76c11610115578063219bc76c146101e85780632bdd2290146102045780633aa4add41461022157806351720b411461023e578063668abff714610246578063681312f51461024e5761014d565b80630b1573b8146101525780630fe1dfa81461017157806313013e7a1461018b5780631e6d4c22146101ae5780632127c30a146101cb575b600080fd5b61016f6004803603602081101561016857600080fd5b503561032f565b005b6101796103d5565b60408051918252519081900360200190f35b61016f600480360360408110156101a157600080fd5b50803590602001356103db565b610179600480360360208110156101c457600080fd5b5035610456565b61016f600480360360208110156101e157600080fd5b5035610468565b6101f061046d565b604080519115158252519081900360200190f35b61016f6004803603602081101561021a57600080fd5b5035610480565b6101796004803603602081101561023757600080fd5b5035610485565b610179610497565b61017961049d565b61016f6004803603602081101561026457600080fd5b50356104a3565b6101f0610594565b6101796004803603602081101561028957600080fd5b50356105e2565b610179610604565b61017961060a565b610179610649565b61017961064f565b610179610655565b61016f600480360360208110156102ce57600080fd5b50356001600160a01b0316610695565b61016f6106f1565b6101796108ed565b6102f66108f3565b604080516001600160a01b039092168252519081900360200190f35b61016f6004803603602081101561032857600080fd5b5035610902565b61033761090d565b610340816109e4565b61037b5760405162461bcd60e51b815260040180806020018281038252602c815260200180610de8602c913960400191505060405180910390fd5b6003819055604080516020808252600f908201526e1c9bdd5b99131bd8dad05b5bdd5b9d608a1b8183015290517f9f5033568d78ae30f29f01e944f97b2216493bd19d1b46d429673acff3dcd6749181900360600190a150565b60055481565b6103e361090d565b60008281526008602052604090205415610444576040805162461bcd60e51b815260206004820152601d60248201527f4c4950207570677261646520726f756e6420616c726561647920736574000000604482015290519081900360640190fd5b60009182526008602052604090912055565b60086020526000908152604090205481565b600a55565b600061047761060a565b60045414905090565b600955565b60009081526007602052604090205490565b60015481565b60065481565b6104ab61090d565b60008111610500576040805162461bcd60e51b815260206004820152601860248201527f726f756e64206c656e6774682063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b60025461052757600281905561051461060a565b60055561051f610655565b600655610543565b61052f61060a565b60055561053a610655565b60065560028190555b604080516020808252600b908201526a0e4deeadcc898cadccee8d60ab1b8183015290517f9f5033568d78ae30f29f01e944f97b2216493bd19d1b46d429673acff3dcd6749181900360600190a150565b6000806105a56002546003546109ed565b6002549091506105bb908263ffffffff610a0f16565b6105da6105c6610655565b6105ce610649565b9063ffffffff610a0f16565b101591505090565b60006101006105ef610649565b038210156105fc57600080fd5b5050600a5490565b60045481565b60008061062d6002546106216006546105ce610649565b9063ffffffff610a6c16565b600554909150610643908263ffffffff610ad616565b91505090565b60095490565b60025481565b60008061066c6002546106216006546105ce610649565b905061064361068660025483610b3090919063ffffffff16565b6006549063ffffffff610ad616565b61069d610b89565b600080546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f709181900360200190a150565b6106f9610be8565b600061070361060a565b604960005260086020527f2a8e02c4d7c4d57484a214c83e3d280fa57590b439e7666df589c9122955524c5490915080158061073e57508082105b6107795760405162461bcd60e51b8152600401808060200182810382526023815260200180610da46023913960400191505060405180910390fd5b81600454106107cf576040805162461bcd60e51b815260206004820152601960248201527f726f756e6420616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600482905560006107eb6107e660016105ce610649565b6105e2565b60008481526007602052604090208190559050610806610ca6565b6001600160a01b031663713f22166040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b50505050610860610d41565b6001600160a01b031663ece2064c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b50506040805184815290518693507f22f2fc17c5daf07db2379b3a03a8ef20a183f761097a58fce219c8a14619e78692509081900360200190a2505050565b60035481565b6000546001600160a01b031681565b600980549091019055565b6000809054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561095a57600080fd5b505afa15801561096e573d6000803e3d6000fd5b505050506040513d602081101561098457600080fd5b50516001600160a01b031633146109e2576040805162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206d75737420626520436f6e74726f6c6c6572206f776e657200604482015290519081900360640190fd5b565b620f4240101590565b6000610a06620f4240610621858563ffffffff610b3016565b90505b92915050565b600082821115610a66576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211610ac2576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481610acd57fe5b04949350505050565b600082820183811015610a06576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082610b3f57506000610a09565b82820282848281610b4c57fe5b0414610a065760405162461bcd60e51b8152600401808060200182810382526021815260200180610dc76021913960400191505060405180910390fd5b6000546001600160a01b031633146109e2576040805162461bcd60e51b815260206004820152601960248201527f63616c6c6572206d75737420626520436f6e74726f6c6c657200000000000000604482015290519081900360640190fd5b6000809054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d6020811015610c5f57600080fd5b5051156109e2576040805162461bcd60e51b815260206004820152601060248201526f1cde5cdd195b481a5cc81c185d5cd95960821b604482015290519081900360640190fd5b60008054604080516d2137b73234b733a6b0b730b3b2b960911b8152815190819003600e018120631c2d8fb360e31b8252600482015290516001600160a01b039092169163e16c7d9891602480820192602092909190829003018186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d6020811015610d3a57600080fd5b5051905090565b60008054604080516526b4b73a32b960d11b81528151908190036006018120631c2d8fb360e31b8252600482015290516001600160a01b039092169163e16c7d9891602480820192602092909190829003018186803b158015610d1057600080fdfe63616e6e6f7420696e697469616c697a652070617374204c49502d373320726f756e64536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77726f756e64206c6f636b20616d6f756e74206d75737420626520612076616c69642070657263656e74616765a265627a7a72315820ecde2c92b7ee5a76852a11d7b9f7aabec0670c3fba71e0c8e621393bb32e678b64736f6c634300050b0032";

export class AdjustableRoundsManager__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AdjustableRoundsManager> {
    return super.deploy(
      _controller,
      overrides || {}
    ) as Promise<AdjustableRoundsManager>;
  }
  getDeployTransaction(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_controller, overrides || {});
  }
  attach(address: string): AdjustableRoundsManager {
    return super.attach(address) as AdjustableRoundsManager;
  }
  connect(signer: Signer): AdjustableRoundsManager__factory {
    return super.connect(signer) as AdjustableRoundsManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdjustableRoundsManagerInterface {
    return new utils.Interface(_abi) as AdjustableRoundsManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AdjustableRoundsManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AdjustableRoundsManager;
  }
}
