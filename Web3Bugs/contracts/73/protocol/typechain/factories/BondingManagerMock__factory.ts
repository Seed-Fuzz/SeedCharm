/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BondingManagerMock,
  BondingManagerMockInterface,
} from "../BondingManagerMock";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes4",
        name: "_func",
        type: "bytes4",
      },
      {
        internalType: "bytes32",
        name: "_dataHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setMockUint256WithParam",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes4",
        name: "_func",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setMockUint256",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "_transcoder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_fees",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_round",
        type: "uint256",
      },
    ],
    name: "updateTranscoderWithFees",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes4",
        name: "_func",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "_value",
        type: "address",
      },
    ],
    name: "setMockAddress",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes4",
        name: "_func",
        type: "bytes4",
      },
      {
        internalType: "bool",
        name: "_value",
        type: "bool",
      },
    ],
    name: "setMockBool",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes4",
        name: "_func",
        type: "bytes4",
      },
      {
        internalType: "bytes32",
        name: "_value",
        type: "bytes32",
      },
    ],
    name: "setMockBytes32",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "transcoder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fees",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
    ],
    name: "UpdateTranscoderWithFees",
    type: "event",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107c4806100206000396000f3fe6080604052600436106100705760003560e01c80633aeb512c1161004e5780633aeb512c146103b85780636c33e7eb146103f75780637c4d18bd1461043a578063d2f65fbc1461047657610070565b80630d9b9993146102a85780631cff79cd146102fc5780631d77d6961461037e575b60008035905060008036604051602001808383808284376040805191909301818103601f19018252835280516020918201206001600160e01b031989166000908152918290529290206002015491955050600160b01b900460ff1692506100e3915050576100de60006104b0565b6102a4565b60006001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561011757fe5b1415610173576001600160e01b031982166000908152602081815260408083208484526003019091529020548061016457506001600160e01b031982166000908152602081905260409020545b61016d816104b0565b506102a4565b60016001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff1660038111156101a757fe5b14156101d3576001600160e01b031982166000908152602081905260409020600101546100de906104b0565b60026001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561020757fe5b1415610236576001600160e01b031982166000908152602081905260409020600201546100de9060ff166104b0565b60036001600160e01b03198316600090815260208190526040902060020154600160a81b900460ff16600381111561026a57fe5b14156102a4576001600160e01b031982166000908152602081905260409020600201546102a49061010090046001600160a01b03166104b0565b5050005b3480156102b457600080fd5b506102e8600480360360608110156102cb57600080fd5b506001600160e01b031981351690602081013590604001356104c2565b604080519115158252519081900360200190f35b61037c6004803603604081101561031257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b509092509050610516565b005b34801561038a57600080fd5b506102e8600480360360408110156103a157600080fd5b506001600160e01b03198135169060200135610615565b3480156103c457600080fd5b5061037c600480360360608110156103db57600080fd5b506001600160a01b038135169060208101359060400135610650565b34801561040357600080fd5b5061037c6004803603604081101561041a57600080fd5b5080356001600160e01b03191690602001356001600160a01b031661069e565b34801561044657600080fd5b5061037c6004803603604081101561045d57600080fd5b506001600160e01b0319813516906020013515156106fc565b34801561048257600080fd5b5061037c6004803603604081101561049957600080fd5b506001600160e01b03198135169060200135610747565b60405160208101604052818152602081f35b6001600160e01b03199290921660008181526020818152604080832060028101805460ff60a81b19168155958452600301825282209490945590815291829052805460ff60b01b1916600160b01b17905590565b60006060846001600160a01b0316348585604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114610578576040519150601f19603f3d011682016040523d82523d6000602084013e61057d565b606091505b509150915081819061060d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105d25781810151838201526020016105ba565b50505050905090810190601f1680156105ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050565b6001600160e01b03199190911660009081526020819052604081206002810180549390915561ffff60a81b19909216600160b01b1790915590565b604080516001600160a01b03851681526020810184905280820183905290517f6661bd139fd995bcff1146c206e63c916313b157f54a0412b0cd689cfb93519c9181900360600190a1505050565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b196001600160a01b039093166101000260ff60a81b19909116600360a81b17610100600160a81b0319161791909116600160b01b179055565b6001600160e01b0319919091166000908152602081905260409020600201805460ff60b01b1992151560ff60a81b19909116600160a91b1760ff19161791909116600160b01b179055565b6001600160e01b031991909116600090815260208190526040902060028101805460019092019290925560ff60a81b1916600160a81b1760ff60b01b1916600160b01b17905556fea265627a7a7231582018157bd16fe6d161f68cd0e0142a7890bf3b07261c4cc7663965228360bc311164736f6c634300050b0032";

export class BondingManagerMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BondingManagerMock> {
    return super.deploy(overrides || {}) as Promise<BondingManagerMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BondingManagerMock {
    return super.attach(address) as BondingManagerMock;
  }
  connect(signer: Signer): BondingManagerMock__factory {
    return super.connect(signer) as BondingManagerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BondingManagerMockInterface {
    return new utils.Interface(_abi) as BondingManagerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BondingManagerMock {
    return new Contract(address, _abi, signerOrProvider) as BondingManagerMock;
  }
}
