/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MTicketBrokerCore,
  MTicketBrokerCoreInterface,
} from "../MTicketBrokerCore";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DepositFunded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "faceValue",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "winProb",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "senderNonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "recipientRand",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "auxData",
        type: "bytes",
      },
    ],
    name: "WinningTicketRedeemed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "WinningTicketTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startRound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endRound",
        type: "uint256",
      },
    ],
    name: "Unlock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "UnlockCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reserve",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723158208a7743523df8ff478849610452ba4de83003179db27adc476f02e0816f06286d64736f6c634300050b0032";

export class MTicketBrokerCore__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MTicketBrokerCore> {
    return super.deploy(overrides || {}) as Promise<MTicketBrokerCore>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MTicketBrokerCore {
    return super.attach(address) as MTicketBrokerCore;
  }
  connect(signer: Signer): MTicketBrokerCore__factory {
    return super.connect(signer) as MTicketBrokerCore__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MTicketBrokerCoreInterface {
    return new utils.Interface(_abi) as MTicketBrokerCoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MTicketBrokerCore {
    return new Contract(address, _abi, signerOrProvider) as MTicketBrokerCore;
  }
}
