/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ManagerProxyTargetMockV2,
  ManagerProxyTargetMockV2Interface,
} from "../ManagerProxyTargetMockV2";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "uint8",
        name: "_value",
        type: "uint8",
      },
    ],
    name: "setUint8",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "uint64Value",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "initValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "targetContractId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "uint256Value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "bytes32Value",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint64",
        name: "_value",
        type: "uint64",
      },
    ],
    name: "setUint64",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "uint8Value",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "_value",
        type: "bytes32",
      },
    ],
    name: "setBytes32",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setUint256",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "addressValue",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "_value",
        type: "address",
      },
    ],
    name: "setAddress",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "contract IController",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "SetController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "param",
        type: "string",
      },
    ],
    name: "ParameterUpdate",
    type: "event",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104a33803806104a38339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905561043e806100656000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806392eefe9b1161008c578063d2282dc511610066578063d2282dc5146101f0578063e1d16b831461020d578063e30081a014610231578063f77c479114610257576100ea565b806392eefe9b1461018f578063aaef20ea146101b5578063c2b12a73146101d3576100ea565b806351720b41116100c857806351720b41146101505780636498db88146101585780636baaa2e414610160578063822cba6914610168576100ea565b80631774e646146100ef5780632bc2cd99146101115780632fc36f1114610136575b600080fd5b61010f6004803603602081101561010557600080fd5b503560ff1661025f565b005b610119610278565b6040805167ffffffffffffffff9092168252519081900360200190f35b61013e61028d565b60408051918252519081900360200190f35b61013e610293565b61013e610299565b61013e61029f565b61010f6004803603602081101561017e57600080fd5b503567ffffffffffffffff166102a5565b61010f600480360360208110156101a557600080fd5b50356001600160a01b03166102d4565b6101bd610330565b6040805160ff9092168252519081900360200190f35b61010f600480360360208110156101e957600080fd5b5035610339565b61010f6004803603602081101561020657600080fd5b503561035f565b610215610367565b604080516001600160a01b039092168252519081900360200190f35b61010f6004803603602081101561024757600080fd5b50356001600160a01b0316610376565b610215610399565b6003805460ff191660059290920160ff16919091179055565b600354610100900467ffffffffffffffff1681565b60025481565b60015481565b60045481565b60055481565b80600501600360016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b6102dc6103a8565b600080546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f709181900360200190a150565b60035460ff1681565b604080516020808201939093528151808203840181529082019091528051910120600555565b600501600455565b6006546001600160a01b031681565b600680546001600160a01b039092166001600160a01b0319928316179091169055565b6000546001600160a01b031681565b6000546001600160a01b03163314610407576040805162461bcd60e51b815260206004820152601960248201527f63616c6c6572206d75737420626520436f6e74726f6c6c657200000000000000604482015290519081900360640190fd5b56fea265627a7a72315820c244f6c7d420d90245adc1d8f0727d12b0b4d69df34da9c41b36bae610ac177064736f6c634300050b0032";

export class ManagerProxyTargetMockV2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ManagerProxyTargetMockV2> {
    return super.deploy(
      _controller,
      overrides || {}
    ) as Promise<ManagerProxyTargetMockV2>;
  }
  getDeployTransaction(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_controller, overrides || {});
  }
  attach(address: string): ManagerProxyTargetMockV2 {
    return super.attach(address) as ManagerProxyTargetMockV2;
  }
  connect(signer: Signer): ManagerProxyTargetMockV2__factory {
    return super.connect(signer) as ManagerProxyTargetMockV2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ManagerProxyTargetMockV2Interface {
    return new utils.Interface(_abi) as ManagerProxyTargetMockV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ManagerProxyTargetMockV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ManagerProxyTargetMockV2;
  }
}
