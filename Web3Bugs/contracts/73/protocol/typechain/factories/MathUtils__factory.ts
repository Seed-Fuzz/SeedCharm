/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MathUtils, MathUtilsInterface } from "../MathUtils";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "PERC_DIVISOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608d610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063cce2a078146038575b600080fd5b603e6050565b60408051918252519081900360200190f35b633b9aca008156fea265627a7a723158201a11c50a8ba56b96840df215b49115a8dfff07f9575b72c3ca14cbb18a85de8d64736f6c634300050b0032";

export class MathUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MathUtils> {
    return super.deploy(overrides || {}) as Promise<MathUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MathUtils {
    return super.attach(address) as MathUtils;
  }
  connect(signer: Signer): MathUtils__factory {
    return super.connect(signer) as MathUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathUtilsInterface {
    return new utils.Interface(_abi) as MathUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathUtils {
    return new Contract(address, _abi, signerOrProvider) as MathUtils;
  }
}
