/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PreciseMathUtils,
  PreciseMathUtilsInterface,
} from "../PreciseMathUtils";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "PERC_DIVISOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6095610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063cce2a078146038575b600080fd5b603e6050565b60408051918252519081900360200190f35b6b033b2e3c9fd0803ce80000008156fea265627a7a723158207203ce3fa3e328c65e0a504c822283dc315aa001f70309cb566e0e8994895d2664736f6c634300050b0032";

export class PreciseMathUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PreciseMathUtils> {
    return super.deploy(overrides || {}) as Promise<PreciseMathUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PreciseMathUtils {
    return super.attach(address) as PreciseMathUtils;
  }
  connect(signer: Signer): PreciseMathUtils__factory {
    return super.connect(signer) as PreciseMathUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PreciseMathUtilsInterface {
    return new utils.Interface(_abi) as PreciseMathUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PreciseMathUtils {
    return new Contract(address, _abi, signerOrProvider) as PreciseMathUtils;
  }
}
