/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RoundsManager, RoundsManagerInterface } from "../RoundsManager";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_roundLockAmount",
        type: "uint256",
      },
    ],
    name: "setRoundLockAmount",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastRoundLengthUpdateRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_lip",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_round",
        type: "uint256",
      },
    ],
    name: "setLIPUpgradeRound",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "lipUpgradeRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRoundInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "_round",
        type: "uint256",
      },
    ],
    name: "blockHashForRound",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "targetContractId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastRoundLengthUpdateStartBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_roundLength",
        type: "uint256",
      },
    ],
    name: "setRoundLength",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRoundLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "_block",
        type: "uint256",
      },
    ],
    name: "blockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastInitializedRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "blockNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "roundLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentRoundStartBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "initializeRound",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "roundLockAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "contract IController",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    name: "NewRound",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "SetController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "param",
        type: "string",
      },
    ],
    name: "ParameterUpdate",
    type: "event",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610eeb380380610eeb8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610e86806100656000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806385df51fd116100ad5780638fa148f2116100715780638fa148f21461025557806392eefe9b1461025d578063d4807fb214610283578063f5b490d51461028b578063f77c4791146102935761012c565b806385df51fd146102185780638807f36e146102355780638a19c8bc1461023d5780638ae63d6d146102455780638b649b941461024d5761012c565b80633aa4add4116100f45780633aa4add4146101c657806351720b41146101e3578063668abff7146101eb578063681312f5146101f35780636841f253146102105761012c565b80630b1573b8146101315780630fe1dfa81461015057806313013e7a1461016a5780631e6d4c221461018d578063219bc76c146101aa575b600080fd5b61014e6004803603602081101561014757600080fd5b50356102b7565b005b61015861035d565b60408051918252519081900360200190f35b61014e6004803603604081101561018057600080fd5b5080359060200135610363565b610158600480360360208110156101a357600080fd5b50356103de565b6101b26103f0565b604080519115158252519081900360200190f35b610158600480360360208110156101dc57600080fd5b5035610403565b610158610415565b61015861041b565b61014e6004803603602081101561020957600080fd5b5035610421565b6101b2610512565b6101586004803603602081101561022e57600080fd5b5035610560565b610158610600565b610158610606565b610158610645565b610158610649565b61015861064f565b61014e6004803603602081101561027357600080fd5b50356001600160a01b031661068f565b61014e6106eb565b6101586108e7565b61029b6108ed565b604080516001600160a01b039092168252519081900360200190f35b6102bf6108fc565b6102c8816109d3565b6103035760405162461bcd60e51b815260040180806020018281038252602c815260200180610dfa602c913960400191505060405180910390fd5b6003819055604080516020808252600f908201526e1c9bdd5b99131bd8dad05b5bdd5b9d608a1b8183015290517f9f5033568d78ae30f29f01e944f97b2216493bd19d1b46d429673acff3dcd6749181900360600190a150565b60055481565b61036b6108fc565b600082815260086020526040902054156103cc576040805162461bcd60e51b815260206004820152601d60248201527f4c4950207570677261646520726f756e6420616c726561647920736574000000604482015290519081900360640190fd5b60009182526008602052604090912055565b60086020526000908152604090205481565b60006103fa610606565b60045414905090565b60009081526007602052604090205490565b60015481565b60065481565b6104296108fc565b6000811161047e576040805162461bcd60e51b815260206004820152601860248201527f726f756e64206c656e6774682063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b6002546104a5576002819055610492610606565b60055561049d61064f565b6006556104c1565b6104ad610606565b6005556104b861064f565b60065560028190555b604080516020808252600b908201526a0e4deeadcc898cadccee8d60ab1b8183015290517f9f5033568d78ae30f29f01e944f97b2216493bd19d1b46d429673acff3dcd6749181900360600190a150565b6000806105236002546003546109dc565b600254909150610539908263ffffffff6109fe16565b61055861054461064f565b61054c610645565b9063ffffffff6109fe16565b101591505090565b60008061056b610645565b90508083106105ab5760405162461bcd60e51b8152600401808060200182810382526023815260200180610dd76023913960400191505060405180910390fd5b6101008110806105bf575061010081038310155b6105fa5760405162461bcd60e51b815260040180806020018281038252602c815260200180610e26602c913960400191505060405180910390fd5b50504090565b60045481565b60008061062960025461061d60065461054c610645565b9063ffffffff610a5b16565b60055490915061063f908263ffffffff610ac516565b91505090565b4390565b60025481565b60008061066660025461061d60065461054c610645565b905061063f61068060025483610b1f90919063ffffffff16565b6006549063ffffffff610ac516565b610697610b78565b600080546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f709181900360200190a150565b6106f3610bd7565b60006106fd610606565b604960005260086020527f2a8e02c4d7c4d57484a214c83e3d280fa57590b439e7666df589c9122955524c5490915080158061073857508082105b6107735760405162461bcd60e51b8152600401808060200182810382526023815260200180610d936023913960400191505060405180910390fd5b81600454106107c9576040805162461bcd60e51b815260206004820152601960248201527f726f756e6420616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600482905560006107e56107e0600161054c610645565b610560565b60008481526007602052604090208190559050610800610c95565b6001600160a01b031663713f22166040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b5050505061085a610d30565b6001600160a01b031663ece2064c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561089457600080fd5b505af11580156108a8573d6000803e3d6000fd5b50506040805184815290518693507f22f2fc17c5daf07db2379b3a03a8ef20a183f761097a58fce219c8a14619e78692509081900360200190a2505050565b60035481565b6000546001600160a01b031681565b6000809054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094957600080fd5b505afa15801561095d573d6000803e3d6000fd5b505050506040513d602081101561097357600080fd5b50516001600160a01b031633146109d1576040805162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206d75737420626520436f6e74726f6c6c6572206f776e657200604482015290519081900360640190fd5b565b620f4240101590565b60006109f5620f424061061d858563ffffffff610b1f16565b90505b92915050565b600082821115610a55576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211610ab1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481610abc57fe5b04949350505050565b6000828201838110156109f5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082610b2e575060006109f8565b82820282848281610b3b57fe5b04146109f55760405162461bcd60e51b8152600401808060200182810382526021815260200180610db66021913960400191505060405180910390fd5b6000546001600160a01b031633146109d1576040805162461bcd60e51b815260206004820152601960248201527f63616c6c6572206d75737420626520436f6e74726f6c6c657200000000000000604482015290519081900360640190fd5b6000809054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2457600080fd5b505afa158015610c38573d6000803e3d6000fd5b505050506040513d6020811015610c4e57600080fd5b5051156109d1576040805162461bcd60e51b815260206004820152601060248201526f1cde5cdd195b481a5cc81c185d5cd95960821b604482015290519081900360640190fd5b60008054604080516d2137b73234b733a6b0b730b3b2b960911b8152815190819003600e018120631c2d8fb360e31b8252600482015290516001600160a01b039092169163e16c7d9891602480820192602092909190829003018186803b158015610cff57600080fd5b505afa158015610d13573d6000803e3d6000fd5b505050506040513d6020811015610d2957600080fd5b5051905090565b60008054604080516526b4b73a32b960d11b81528151908190036006018120631c2d8fb360e31b8252600482015290516001600160a01b039092169163e16c7d9891602480820192602092909190829003018186803b158015610cff57600080fdfe63616e6e6f7420696e697469616c697a652070617374204c49502d373320726f756e64536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7763616e206f6e6c79207265747269657665207061737420626c6f636b20686173686573726f756e64206c6f636b20616d6f756e74206d75737420626520612076616c69642070657263656e7461676563616e206f6e6c792072657472696576652068617368657320666f72206c6173742032353620626c6f636b73a265627a7a72315820679eac56d5b7f8b79a241a0df99847c43cc0be80626b804b37952c101d8ed78b64736f6c634300050b0032";

export class RoundsManager__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RoundsManager> {
    return super.deploy(_controller, overrides || {}) as Promise<RoundsManager>;
  }
  getDeployTransaction(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_controller, overrides || {});
  }
  attach(address: string): RoundsManager {
    return super.attach(address) as RoundsManager;
  }
  connect(signer: Signer): RoundsManager__factory {
    return super.connect(signer) as RoundsManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoundsManagerInterface {
    return new utils.Interface(_abi) as RoundsManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoundsManager {
    return new Contract(address, _abi, signerOrProvider) as RoundsManager;
  }
}
