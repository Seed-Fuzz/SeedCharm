/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestMathUtilsV2,
  TestMathUtilsV2Interface,
} from "../TestMathUtilsV2";

const _abi = [
  {
    constant: false,
    inputs: [],
    name: "test_percOf2",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "test_percOf1",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "test_validPerc",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "test_percPoints",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106f9806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631e7c402b14610051578063a38591fc1461005b578063f740fbc914610063578063f8579af81461006b575b600080fd5b610059610073565b005b61005961014d565b6100596101ea565b6100596102e1565b6100b761008260646003610347565b60006040518060400160405280601581526020017402e3030303030303325206f6620313030206973203605c1b815250610376565b506101076100ca633b9aca006001610347565b60016040518060400160405280601c81526020017f2e3030303030303125206f662031303030303030303030206973203100000000815250610376565b5061014a61011a60646305f5e100610347565b600a6040518060400160405280601081526020016f0313025206f66203130302069732031360841b815250610376565b50565b61019b61015e60646003600461046d565b604b6040518060400160405280601781526020017f332f34206f66203130302073686f756c64206265203735000000000000000000815250610376565b5061014a6101ad60646007600961046d565b604d6040518060400160405280601781526020017f372f39206f66203130302073686f756c64206265203737000000000000000000815250610376565b6102346101f76032610499565b60016040518060400160405280601f81526020017f35302073686f756c6420626520612076616c69642070657263656e74616765008152506104a3565b5061027f6102426000610499565b60016040518060400160405280601e81526020017f302073686f756c6420626520612076616c69642070657263656e7461676500008152506104a3565b506102b0610290633b9aca00610499565b60016040518060600160405280602481526020016106a1602491396104a3565b5061014a6102c1633b9aca01610499565b6000604051806060016040528060328152602001610645603291396104a3565b6103136102f060036004610520565b632cb4178060405180606001604052806026815260200161061f60269139610376565b5061014a610324606461012c610520565b6313de43556040518060600160405280602a8152602001610677602a9139610376565b600061036d633b9aca00610361858563ffffffff61053a16565b9063ffffffff61059316565b90505b92915050565b600073__$e901dca744fb84f4a971fc691ff70ddea6$__63abcd79608585856040518463ffffffff1660e01b81526004018084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103ed5781810151838201526020016103d5565b50505050905090810190601f16801561041a5780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b15801561043957600080fd5b505af415801561044d573d6000803e3d6000fd5b505050506040513d602081101561046357600080fd5b5051949350505050565b6000610491633b9aca006103616104848686610520565b879063ffffffff61053a16565b949350505050565b633b9aca00101590565b60405163767392b360e01b815283151560048201908152831515602483015260606044830190815283516064840152835160009373__$c251312a8326b3dca0be11840a52f0a21e$__9363767392b393899389938993929160849091019060208501908083838d83156103ed5781810151838201526020016103d5565b600061036d8261036185633b9aca0063ffffffff61053a16565b60008261054957506000610370565b8282028284828161055657fe5b041461036d5760405162461bcd60e51b81526004018080602001828103825260218152602001806105fe6021913960400191505060405180910390fd5b60008082116105e9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816105f457fe5b0494935050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77332f342073686f756c6420636f6e7665727420746f2076616c69642070657263656e7461676531206d6f7265207468616e20746865206d61782073686f756c64206e6f742062652076616c69642070657263656e746167653130302f3330302073686f756c6420636f6e7665727420746f2076616c69642070657263656e74616765746865206d61782073686f756c6420626520612076616c69642070657263656e74616765a265627a7a7231582044c62ba327323033e30d9a6e9e64e5af7f0f999a375331b948842324e810f45e64736f6c634300050b0032";

export class TestMathUtilsV2__factory extends ContractFactory {
  constructor(
    linkLibraryAddresses: TestMathUtilsV2LibraryAddresses,
    signer?: Signer
  ) {
    super(
      _abi,
      TestMathUtilsV2__factory.linkBytecode(linkLibraryAddresses),
      signer
    );
  }

  static linkBytecode(
    linkLibraryAddresses: TestMathUtilsV2LibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e901dca744fb84f4a971fc691ff70ddea6\\$__", "g"),
      linkLibraryAddresses[
        "contracts/test/helpers/truffle/AssertUint.sol:AssertUint"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$c251312a8326b3dca0be11840a52f0a21e\\$__", "g"),
      linkLibraryAddresses[
        "contracts/test/helpers/truffle/AssertBool.sol:AssertBool"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestMathUtilsV2> {
    return super.deploy(overrides || {}) as Promise<TestMathUtilsV2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestMathUtilsV2 {
    return super.attach(address) as TestMathUtilsV2;
  }
  connect(signer: Signer): TestMathUtilsV2__factory {
    return super.connect(signer) as TestMathUtilsV2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMathUtilsV2Interface {
    return new utils.Interface(_abi) as TestMathUtilsV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMathUtilsV2 {
    return new Contract(address, _abi, signerOrProvider) as TestMathUtilsV2;
  }
}

export interface TestMathUtilsV2LibraryAddresses {
  ["contracts/test/helpers/truffle/AssertUint.sol:AssertUint"]: string;
  ["contracts/test/helpers/truffle/AssertBool.sol:AssertBool"]: string;
}
