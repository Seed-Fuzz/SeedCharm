/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestMathUtils, TestMathUtilsInterface } from "../TestMathUtils";

const _abi = [
  {
    constant: false,
    inputs: [],
    name: "test_percOf2",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "test_percOf1",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "test_validPerc",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "test_percPoints",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061069d806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631e7c402b14610051578063a38591fc1461005b578063f740fbc914610063578063f8579af81461006b575b600080fd5b610059610073565b005b6100596100f9565b610059610196565b61005961028b565b6100b4610082606460036102ef565b60006040518060400160405280601281526020017102e3030303325206f662031303020697320360741b81525061031d565b506100f66100c66064620186a06102ef565b600a6040518060400160405280601081526020016f0313025206f66203130302069732031360841b81525061031d565b50565b61014761010a606460036004610414565b604b6040518060400160405280601781526020017f332f34206f66203130302073686f756c6420626520373500000000000000000081525061031d565b506100f6610159606460076009610414565b604d6040518060400160405280601781526020017f372f39206f66203130302073686f756c6420626520373700000000000000000081525061031d565b6101e06101a3603261043f565b60016040518060400160405280601f81526020017f35302073686f756c6420626520612076616c69642070657263656e7461676500815250610448565b5061022b6101ee600061043f565b60016040518060400160405280601e81526020017f302073686f756c6420626520612076616c69642070657263656e746167650000815250610448565b5061025b61023b620f424061043f565b600160405180606001604052806024815260200161064560249139610448565b506100f661026b620f424161043f565b60006040518060600160405280603281526020016105e960329139610448565b6102bc61029a600360046104c5565b620b71b06040518060600160405280602681526020016105c36026913961031d565b506100f66102cd606461012c6104c5565b620516156040518060600160405280602a815260200161061b602a913961031d565b6000610314620f4240610308858563ffffffff6104de16565b9063ffffffff61053716565b90505b92915050565b600073__$e901dca744fb84f4a971fc691ff70ddea6$__63abcd79608585856040518463ffffffff1660e01b81526004018084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561039457818101518382015260200161037c565b50505050905090810190601f1680156103c15780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b1580156103e057600080fd5b505af41580156103f4573d6000803e3d6000fd5b505050506040513d602081101561040a57600080fd5b5051949350505050565b6000610437620f424061030861042a86866104c5565b879063ffffffff6104de16565b949350505050565b620f4240101590565b60405163767392b360e01b815283151560048201908152831515602483015260606044830190815283516064840152835160009373__$c251312a8326b3dca0be11840a52f0a21e$__9363767392b393899389938993929160849091019060208501908083838d831561039457818101518382015260200161037c565b60006103148261030885620f424063ffffffff6104de16565b6000826104ed57506000610317565b828202828482816104fa57fe5b04146103145760405162461bcd60e51b81526004018080602001828103825260218152602001806105a26021913960400191505060405180910390fd5b600080821161058d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b600082848161059857fe5b0494935050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77332f342073686f756c6420636f6e7665727420746f2076616c69642070657263656e7461676531206d6f7265207468616e20746865206d61782073686f756c64206e6f742062652076616c69642070657263656e746167653130302f3330302073686f756c6420636f6e7665727420746f2076616c69642070657263656e74616765746865206d61782073686f756c6420626520612076616c69642070657263656e74616765a265627a7a723158201c49b989bb061faacf9c7ebdb8f33d7f487afa732facb53c06b4083d66f5ed1464736f6c634300050b0032";

export class TestMathUtils__factory extends ContractFactory {
  constructor(
    linkLibraryAddresses: TestMathUtilsLibraryAddresses,
    signer?: Signer
  ) {
    super(
      _abi,
      TestMathUtils__factory.linkBytecode(linkLibraryAddresses),
      signer
    );
  }

  static linkBytecode(
    linkLibraryAddresses: TestMathUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e901dca744fb84f4a971fc691ff70ddea6\\$__", "g"),
      linkLibraryAddresses[
        "contracts/test/helpers/truffle/AssertUint.sol:AssertUint"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$c251312a8326b3dca0be11840a52f0a21e\\$__", "g"),
      linkLibraryAddresses[
        "contracts/test/helpers/truffle/AssertBool.sol:AssertBool"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestMathUtils> {
    return super.deploy(overrides || {}) as Promise<TestMathUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestMathUtils {
    return super.attach(address) as TestMathUtils;
  }
  connect(signer: Signer): TestMathUtils__factory {
    return super.connect(signer) as TestMathUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMathUtilsInterface {
    return new utils.Interface(_abi) as TestMathUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMathUtils {
    return new Contract(address, _abi, signerOrProvider) as TestMathUtils;
  }
}

export interface TestMathUtilsLibraryAddresses {
  ["contracts/test/helpers/truffle/AssertUint.sol:AssertUint"]: string;
  ["contracts/test/helpers/truffle/AssertBool.sol:AssertBool"]: string;
}
