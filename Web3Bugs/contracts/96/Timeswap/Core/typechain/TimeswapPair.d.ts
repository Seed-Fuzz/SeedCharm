/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TimeswapPairInterface extends ethers.utils.Interface {
  functions: {
    "asset()": FunctionFragment;
    "borrow(tuple)": FunctionFragment;
    "burn(tuple)": FunctionFragment;
    "claimsOf(uint256,address)": FunctionFragment;
    "collateral()": FunctionFragment;
    "collectProtocolFee(address)": FunctionFragment;
    "constantProduct(uint256)": FunctionFragment;
    "dueOf(uint256,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeStored(uint256)": FunctionFragment;
    "lend(tuple)": FunctionFragment;
    "liquidityOf(uint256,address)": FunctionFragment;
    "mint(tuple)": FunctionFragment;
    "pay(tuple)": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "protocolFeeStored()": FunctionFragment;
    "totalClaims(uint256)": FunctionFragment;
    "totalDebtCreated(uint256)": FunctionFragment;
    "totalDuesOf(uint256,address)": FunctionFragment;
    "totalLiquidity(uint256)": FunctionFragment;
    "totalReserves(uint256)": FunctionFragment;
    "withdraw(tuple)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimsOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "constantProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dueOf",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeStored",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [
      {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebtCreated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDuesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimsOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constantProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dueOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStored", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDuesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Borrow(uint256,address,address,address,uint256,uint256,tuple,uint256,uint256)": EventFragment;
    "Burn(uint256,address,address,address,uint256,uint256,uint128,uint256)": EventFragment;
    "CollectProtocolFee(address,address,uint256)": EventFragment;
    "Lend(uint256,address,address,address,uint256,tuple,uint256,uint256)": EventFragment;
    "Mint(uint256,address,address,address,uint256,uint256,uint256,tuple,uint256)": EventFragment;
    "Pay(uint256,address,address,address,uint256[],uint112[],uint112[],uint128,uint128)": EventFragment;
    "Sync(uint256,uint112,uint112,uint112)": EventFragment;
    "Withdraw(uint256,address,address,address,tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    },
    BigNumber,
    BigNumber
  ] & {
    maturity: BigNumber;
    sender: string;
    assetTo: string;
    dueTo: string;
    assetOut: BigNumber;
    id: BigNumber;
    dueOut: [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    };
    feeIn: BigNumber;
    protocolFeeIn: BigNumber;
  }
>;

export type BurnEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maturity: BigNumber;
    sender: string;
    assetTo: string;
    collateralTo: string;
    liquidityIn: BigNumber;
    assetOut: BigNumber;
    collateralOut: BigNumber;
    feeOut: BigNumber;
  }
>;

export type CollectProtocolFeeEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    to: string;
    protocolFeeOut: BigNumber;
  }
>;

export type LendEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    },
    BigNumber,
    BigNumber
  ] & {
    maturity: BigNumber;
    sender: string;
    bondTo: string;
    insuranceTo: string;
    assetIn: BigNumber;
    claimsOut: [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    };
    feeIn: BigNumber;
    protocolFeeIn: BigNumber;
  }
>;

export type MintEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    },
    BigNumber
  ] & {
    maturity: BigNumber;
    sender: string;
    liquidityTo: string;
    dueTo: string;
    assetIn: BigNumber;
    liquidityOut: BigNumber;
    id: BigNumber;
    dueOut: [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    };
    feeIn: BigNumber;
  }
>;

export type PayEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber
  ] & {
    maturity: BigNumber;
    sender: string;
    to: string;
    owner: string;
    ids: BigNumber[];
    assetsIn: BigNumber[];
    collateralsOut: BigNumber[];
    assetIn: BigNumber;
    collateralOut: BigNumber;
  }
>;

export type SyncEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    maturity: BigNumber;
    x: BigNumber;
    y: BigNumber;
    z: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    },
    [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
  ] & {
    maturity: BigNumber;
    sender: string;
    assetTo: string;
    collateralTo: string;
    claimsIn: [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    };
    tokensOut: [BigNumber, BigNumber] & {
      asset: BigNumber;
      collateral: BigNumber;
    };
  }
>;

export class TimeswapPair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TimeswapPairInterface;

  functions: {
    asset(overrides?: CallOverrides): Promise<[string]>;

    "asset()"(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn((uint256,address,address,uint256))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimsOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        }
      ]
    >;

    "claimsOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        }
      ]
    >;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    "collateral()"(overrides?: CallOverrides): Promise<[string]>;

    collectProtocolFee(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "collectProtocolFee(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    constantProduct(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "constantProduct(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    dueOf(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ]
    >;

    "dueOf(uint256,address,uint256)"(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ]
    >;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[number]>;

    "fee()"(overrides?: CallOverrides): Promise<[number]>;

    feeStored(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "feeStored(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lend(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lend((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "liquidityOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pay(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pay((uint256,address,address,uint256[],uint112[],uint112[],bytes))"(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<[number]>;

    "protocolFee()"(overrides?: CallOverrides): Promise<[number]>;

    protocolFeeStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    "protocolFeeStored()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaims(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        }
      ]
    >;

    "totalClaims(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        }
      ]
    >;

    totalDebtCreated(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalDebtCreated(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalDuesOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalDuesOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLiquidity(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalLiquidity(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalReserves(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }]
    >;

    "totalReserves(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }]
    >;

    withdraw(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw((uint256,address,address,(uint112,uint112,uint112,uint112)))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  asset(overrides?: CallOverrides): Promise<string>;

  "asset()"(overrides?: CallOverrides): Promise<string>;

  borrow(
    param: {
      maturity: BigNumberish;
      assetTo: string;
      dueTo: string;
      xDecrease: BigNumberish;
      yIncrease: BigNumberish;
      zIncrease: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow((uint256,address,address,uint112,uint112,uint112,bytes))"(
    param: {
      maturity: BigNumberish;
      assetTo: string;
      dueTo: string;
      xDecrease: BigNumberish;
      yIncrease: BigNumberish;
      zIncrease: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    param: {
      maturity: BigNumberish;
      assetTo: string;
      collateralTo: string;
      liquidityIn: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn((uint256,address,address,uint256))"(
    param: {
      maturity: BigNumberish;
      assetTo: string;
      collateralTo: string;
      liquidityIn: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimsOf(
    maturity: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    }
  >;

  "claimsOf(uint256,address)"(
    maturity: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    }
  >;

  collateral(overrides?: CallOverrides): Promise<string>;

  "collateral()"(overrides?: CallOverrides): Promise<string>;

  collectProtocolFee(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "collectProtocolFee(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  constantProduct(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "constantProduct(uint256)"(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  dueOf(
    maturity: BigNumberish,
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    }
  >;

  "dueOf(uint256,address,uint256)"(
    maturity: BigNumberish,
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    }
  >;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<number>;

  "fee()"(overrides?: CallOverrides): Promise<number>;

  feeStored(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "feeStored(uint256)"(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lend(
    param: {
      maturity: BigNumberish;
      bondTo: string;
      insuranceTo: string;
      xIncrease: BigNumberish;
      yDecrease: BigNumberish;
      zDecrease: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lend((uint256,address,address,uint112,uint112,uint112,bytes))"(
    param: {
      maturity: BigNumberish;
      bondTo: string;
      insuranceTo: string;
      xIncrease: BigNumberish;
      yDecrease: BigNumberish;
      zDecrease: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityOf(
    maturity: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "liquidityOf(uint256,address)"(
    maturity: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    param: {
      maturity: BigNumberish;
      liquidityTo: string;
      dueTo: string;
      xIncrease: BigNumberish;
      yIncrease: BigNumberish;
      zIncrease: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint((uint256,address,address,uint112,uint112,uint112,bytes))"(
    param: {
      maturity: BigNumberish;
      liquidityTo: string;
      dueTo: string;
      xIncrease: BigNumberish;
      yIncrease: BigNumberish;
      zIncrease: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pay(
    param: {
      maturity: BigNumberish;
      to: string;
      owner: string;
      ids: BigNumberish[];
      assetsIn: BigNumberish[];
      collateralsOut: BigNumberish[];
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pay((uint256,address,address,uint256[],uint112[],uint112[],bytes))"(
    param: {
      maturity: BigNumberish;
      to: string;
      owner: string;
      ids: BigNumberish[];
      assetsIn: BigNumberish[];
      collateralsOut: BigNumberish[];
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolFee(overrides?: CallOverrides): Promise<number>;

  "protocolFee()"(overrides?: CallOverrides): Promise<number>;

  protocolFeeStored(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolFeeStored()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaims(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    }
  >;

  "totalClaims(uint256)"(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bondPrincipal: BigNumber;
      bondInterest: BigNumber;
      insurancePrincipal: BigNumber;
      insuranceInterest: BigNumber;
    }
  >;

  totalDebtCreated(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalDebtCreated(uint256)"(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalDuesOf(
    maturity: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalDuesOf(uint256,address)"(
    maturity: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLiquidity(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalLiquidity(uint256)"(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalReserves(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
  >;

  "totalReserves(uint256)"(
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
  >;

  withdraw(
    param: {
      maturity: BigNumberish;
      assetTo: string;
      collateralTo: string;
      claimsIn: {
        bondPrincipal: BigNumberish;
        bondInterest: BigNumberish;
        insurancePrincipal: BigNumberish;
        insuranceInterest: BigNumberish;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw((uint256,address,address,(uint112,uint112,uint112,uint112)))"(
    param: {
      maturity: BigNumberish;
      assetTo: string;
      collateralTo: string;
      claimsIn: {
        bondPrincipal: BigNumberish;
        bondInterest: BigNumberish;
        insurancePrincipal: BigNumberish;
        insuranceInterest: BigNumberish;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    asset(overrides?: CallOverrides): Promise<string>;

    "asset()"(overrides?: CallOverrides): Promise<string>;

    borrow(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        assetOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    "borrow((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        assetOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    burn(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assetOut: BigNumber; collateralOut: BigNumber }
    >;

    "burn((uint256,address,address,uint256))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assetOut: BigNumber; collateralOut: BigNumber }
    >;

    claimsOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bondPrincipal: BigNumber;
        bondInterest: BigNumber;
        insurancePrincipal: BigNumber;
        insuranceInterest: BigNumber;
      }
    >;

    "claimsOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bondPrincipal: BigNumber;
        bondInterest: BigNumber;
        insurancePrincipal: BigNumber;
        insuranceInterest: BigNumber;
      }
    >;

    collateral(overrides?: CallOverrides): Promise<string>;

    "collateral()"(overrides?: CallOverrides): Promise<string>;

    collectProtocolFee(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectProtocolFee(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    constantProduct(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "constantProduct(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    dueOf(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        debt: BigNumber;
        collateral: BigNumber;
        startBlock: number;
      }
    >;

    "dueOf(uint256,address,uint256)"(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        debt: BigNumber;
        collateral: BigNumber;
        startBlock: number;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<number>;

    "fee()"(overrides?: CallOverrides): Promise<number>;

    feeStored(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeStored(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        }
      ] & {
        assetIn: BigNumber;
        claimsOut: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        };
      }
    >;

    "lend((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        }
      ] & {
        assetIn: BigNumber;
        claimsOut: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        };
      }
    >;

    liquidityOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidityOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        assetIn: BigNumber;
        liquidityOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    "mint((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        assetIn: BigNumber;
        liquidityOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    pay(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assetIn: BigNumber; collateralOut: BigNumber }
    >;

    "pay((uint256,address,address,uint256[],uint112[],uint112[],bytes))"(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assetIn: BigNumber; collateralOut: BigNumber }
    >;

    protocolFee(overrides?: CallOverrides): Promise<number>;

    "protocolFee()"(overrides?: CallOverrides): Promise<number>;

    protocolFeeStored(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFeeStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaims(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bondPrincipal: BigNumber;
        bondInterest: BigNumber;
        insurancePrincipal: BigNumber;
        insuranceInterest: BigNumber;
      }
    >;

    "totalClaims(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bondPrincipal: BigNumber;
        bondInterest: BigNumber;
        insurancePrincipal: BigNumber;
        insuranceInterest: BigNumber;
      }
    >;

    totalDebtCreated(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDebtCreated(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDuesOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDuesOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLiquidity(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalLiquidity(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReserves(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
    >;

    "totalReserves(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
    >;

    withdraw(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
    >;

    "withdraw((uint256,address,address,(uint112,uint112,uint112,uint112)))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
    >;
  };

  filters: {
    "Borrow(uint256,address,address,address,uint256,uint256,tuple,uint256,uint256)"(
      maturity?: null,
      sender?: string | null,
      assetTo?: string | null,
      dueTo?: string | null,
      assetOut?: null,
      id?: null,
      dueOut?: null,
      feeIn?: null,
      protocolFeeIn?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        },
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        assetTo: string;
        dueTo: string;
        assetOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
        feeIn: BigNumber;
        protocolFeeIn: BigNumber;
      }
    >;

    Borrow(
      maturity?: null,
      sender?: string | null,
      assetTo?: string | null,
      dueTo?: string | null,
      assetOut?: null,
      id?: null,
      dueOut?: null,
      feeIn?: null,
      protocolFeeIn?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        },
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        assetTo: string;
        dueTo: string;
        assetOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
        feeIn: BigNumber;
        protocolFeeIn: BigNumber;
      }
    >;

    "Burn(uint256,address,address,address,uint256,uint256,uint128,uint256)"(
      maturity?: null,
      sender?: string | null,
      assetTo?: string | null,
      collateralTo?: string | null,
      liquidityIn?: null,
      assetOut?: null,
      collateralOut?: null,
      feeOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumber;
        assetOut: BigNumber;
        collateralOut: BigNumber;
        feeOut: BigNumber;
      }
    >;

    Burn(
      maturity?: null,
      sender?: string | null,
      assetTo?: string | null,
      collateralTo?: string | null,
      liquidityIn?: null,
      assetOut?: null,
      collateralOut?: null,
      feeOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumber;
        assetOut: BigNumber;
        collateralOut: BigNumber;
        feeOut: BigNumber;
      }
    >;

    "CollectProtocolFee(address,address,uint256)"(
      sender?: string | null,
      to?: string | null,
      protocolFeeOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; protocolFeeOut: BigNumber }
    >;

    CollectProtocolFee(
      sender?: string | null,
      to?: string | null,
      protocolFeeOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; protocolFeeOut: BigNumber }
    >;

    "Lend(uint256,address,address,address,uint256,tuple,uint256,uint256)"(
      maturity?: null,
      sender?: string | null,
      bondTo?: string | null,
      insuranceTo?: string | null,
      assetIn?: null,
      claimsOut?: null,
      feeIn?: null,
      protocolFeeIn?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        bondTo: string;
        insuranceTo: string;
        assetIn: BigNumber;
        claimsOut: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        };
        feeIn: BigNumber;
        protocolFeeIn: BigNumber;
      }
    >;

    Lend(
      maturity?: null,
      sender?: string | null,
      bondTo?: string | null,
      insuranceTo?: string | null,
      assetIn?: null,
      claimsOut?: null,
      feeIn?: null,
      protocolFeeIn?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        bondTo: string;
        insuranceTo: string;
        assetIn: BigNumber;
        claimsOut: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        };
        feeIn: BigNumber;
        protocolFeeIn: BigNumber;
      }
    >;

    "Mint(uint256,address,address,address,uint256,uint256,uint256,tuple,uint256)"(
      maturity?: null,
      sender?: string | null,
      liquidityTo?: string | null,
      dueTo?: string | null,
      assetIn?: null,
      liquidityOut?: null,
      id?: null,
      dueOut?: null,
      feeIn?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        },
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        liquidityTo: string;
        dueTo: string;
        assetIn: BigNumber;
        liquidityOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
        feeIn: BigNumber;
      }
    >;

    Mint(
      maturity?: null,
      sender?: string | null,
      liquidityTo?: string | null,
      dueTo?: string | null,
      assetIn?: null,
      liquidityOut?: null,
      id?: null,
      dueOut?: null,
      feeIn?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        },
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        liquidityTo: string;
        dueTo: string;
        assetIn: BigNumber;
        liquidityOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
        feeIn: BigNumber;
      }
    >;

    "Pay(uint256,address,address,address,uint256[],uint112[],uint112[],uint128,uint128)"(
      maturity?: null,
      sender?: string | null,
      to?: string | null,
      owner?: string | null,
      ids?: null,
      assetsIn?: null,
      collateralsOut?: null,
      assetIn?: null,
      collateralOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        to: string;
        owner: string;
        ids: BigNumber[];
        assetsIn: BigNumber[];
        collateralsOut: BigNumber[];
        assetIn: BigNumber;
        collateralOut: BigNumber;
      }
    >;

    Pay(
      maturity?: null,
      sender?: string | null,
      to?: string | null,
      owner?: string | null,
      ids?: null,
      assetsIn?: null,
      collateralsOut?: null,
      assetIn?: null,
      collateralOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber
      ],
      {
        maturity: BigNumber;
        sender: string;
        to: string;
        owner: string;
        ids: BigNumber[];
        assetsIn: BigNumber[];
        collateralsOut: BigNumber[];
        assetIn: BigNumber;
        collateralOut: BigNumber;
      }
    >;

    "Sync(uint256,uint112,uint112,uint112)"(
      maturity?: BigNumberish | null,
      x?: null,
      y?: null,
      z?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      { maturity: BigNumber; x: BigNumber; y: BigNumber; z: BigNumber }
    >;

    Sync(
      maturity?: BigNumberish | null,
      x?: null,
      y?: null,
      z?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      { maturity: BigNumber; x: BigNumber; y: BigNumber; z: BigNumber }
    >;

    "Withdraw(uint256,address,address,address,tuple,tuple)"(
      maturity?: null,
      sender?: string | null,
      assetTo?: string | null,
      collateralTo?: string | null,
      claimsIn?: null,
      tokensOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        },
        [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
      ],
      {
        maturity: BigNumber;
        sender: string;
        assetTo: string;
        collateralTo: string;
        claimsIn: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        };
        tokensOut: [BigNumber, BigNumber] & {
          asset: BigNumber;
          collateral: BigNumber;
        };
      }
    >;

    Withdraw(
      maturity?: null,
      sender?: string | null,
      assetTo?: string | null,
      collateralTo?: string | null,
      claimsIn?: null,
      tokensOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        },
        [BigNumber, BigNumber] & { asset: BigNumber; collateral: BigNumber }
      ],
      {
        maturity: BigNumber;
        sender: string;
        assetTo: string;
        collateralTo: string;
        claimsIn: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bondPrincipal: BigNumber;
          bondInterest: BigNumber;
          insurancePrincipal: BigNumber;
          insuranceInterest: BigNumber;
        };
        tokensOut: [BigNumber, BigNumber] & {
          asset: BigNumber;
          collateral: BigNumber;
        };
      }
    >;
  };

  estimateGas: {
    asset(overrides?: CallOverrides): Promise<BigNumber>;

    "asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn((uint256,address,address,uint256))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimsOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimsOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    "collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocolFee(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "collectProtocolFee(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    constantProduct(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "constantProduct(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dueOf(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dueOf(uint256,address,uint256)"(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeStored(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeStored(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lend((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidityOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pay(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pay((uint256,address,address,uint256[],uint112[],uint112[],bytes))"(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeStored(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFeeStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaims(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalClaims(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDebtCreated(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDebtCreated(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDuesOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDuesOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLiquidity(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalLiquidity(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReserves(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReserves(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw((uint256,address,address,(uint112,uint112,uint112,uint112)))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        dueTo: string;
        xDecrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn((uint256,address,address,uint256))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        liquidityIn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimsOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimsOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateral()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectProtocolFee(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "collectProtocolFee(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    constantProduct(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "constantProduct(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dueOf(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dueOf(uint256,address,uint256)"(
      maturity: BigNumberish,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeStored(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeStored(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lend((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        bondTo: string;
        insuranceTo: string;
        xIncrease: BigNumberish;
        yDecrease: BigNumberish;
        zDecrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidityOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint((uint256,address,address,uint112,uint112,uint112,bytes))"(
      param: {
        maturity: BigNumberish;
        liquidityTo: string;
        dueTo: string;
        xIncrease: BigNumberish;
        yIncrease: BigNumberish;
        zIncrease: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pay((uint256,address,address,uint256[],uint112[],uint112[],bytes))"(
      param: {
        maturity: BigNumberish;
        to: string;
        owner: string;
        ids: BigNumberish[];
        assetsIn: BigNumberish[];
        collateralsOut: BigNumberish[];
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolFeeStored()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalClaims(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalClaims(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDebtCreated(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDebtCreated(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDuesOf(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDuesOf(uint256,address)"(
      maturity: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidity(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLiquidity(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReserves(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalReserves(uint256)"(
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw((uint256,address,address,(uint112,uint112,uint112,uint112)))"(
      param: {
        maturity: BigNumberish;
        assetTo: string;
        collateralTo: string;
        claimsIn: {
          bondPrincipal: BigNumberish;
          bondInterest: BigNumberish;
          insurancePrincipal: BigNumberish;
          insuranceInterest: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
