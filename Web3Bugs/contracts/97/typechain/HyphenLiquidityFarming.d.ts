/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HyphenLiquidityFarmingInterface extends ethers.utils.Interface {
  functions: {
    "changePauser(address)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "extractRewards(uint256,address)": FunctionFragment;
    "getNftIdsStaked(address)": FunctionFragment;
    "getRewardRatePerSecond(address)": FunctionFragment;
    "getUpdatedAccTokenPerShare(address)": FunctionFragment;
    "initalizeRewardPool(address,address,uint256)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "liquidityProviders()": FunctionFragment;
    "lpToken()": FunctionFragment;
    "nftIdsStaked(address,uint256)": FunctionFragment;
    "nftInfo(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingToken(uint256)": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "reclaimTokens(address,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "rewardRateLog(address,uint256)": FunctionFragment;
    "rewardTokens(address)": FunctionFragment;
    "setRewardPerSecond(address,uint256)": FunctionFragment;
    "totalSharesStaked(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePool(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "extractRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftIdsStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardRatePerSecond",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdatedAccTokenPerShare",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initalizeRewardPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityProviders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftIdsStaked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reclaimTokens",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRateLog",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerSecond",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSharesStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "updatePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extractRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftIdsStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardRatePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdatedAccTokenPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initalizeRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftIdsStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRateLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSharesStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogDeposit(address,address,uint256)": EventFragment;
    "LogNativeReceived(address,uint256)": EventFragment;
    "LogOnReward(address,address,uint256,address)": EventFragment;
    "LogRewardPerSecond(address,uint256)": EventFragment;
    "LogRewardPoolInitialized(address,address,uint256)": EventFragment;
    "LogUpdatePool(address,uint256,uint256,uint256)": EventFragment;
    "LogWithdraw(address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserChanged(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNativeReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOnReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRewardPerSecond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRewardPoolInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type LogDepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    baseToken: string;
    nftId: BigNumber;
  }
>;

export type LogNativeReceivedEvent = TypedEvent<
  [string, BigNumber] & { sender: string; value: BigNumber }
>;

export type LogOnRewardEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    user: string;
    baseToken: string;
    amount: BigNumber;
    to: string;
  }
>;

export type LogRewardPerSecondEvent = TypedEvent<
  [string, BigNumber] & { baseToken: string; rewardPerSecond: BigNumber }
>;

export type LogRewardPoolInitializedEvent = TypedEvent<
  [string, string, BigNumber] & {
    _baseToken: string;
    _rewardToken: string;
    _rewardPerSecond: BigNumber;
  }
>;

export type LogUpdatePoolEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    baseToken: string;
    lastRewardTime: BigNumber;
    lpSupply: BigNumber;
    accToken1PerShare: BigNumber;
  }
>;

export type LogWithdrawEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    user: string;
    baseToken: string;
    nftId: BigNumber;
    to: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PauserChangedEvent = TypedEvent<
  [string, string] & { previousPauser: string; newPauser: string }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class HyphenLiquidityFarming extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HyphenLiquidityFarmingInterface;

  functions: {
    changePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extractRewards(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNftIdsStaked(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { nftIds: BigNumber[] }>;

    getRewardRatePerSecond(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUpdatedAccTokenPerShare(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initalizeRewardPool(
      _baseToken: string,
      _rewardToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _trustedForwarder: string,
      _pauser: string,
      _liquidityProviders: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPauser(pauser: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityProviders(overrides?: CallOverrides): Promise<[string]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    nftIdsStaked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        staker: string;
        rewardDebt: BigNumber;
        unpaidRewards: BigNumber;
        isStaked: boolean;
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingToken(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardTime: BigNumber;
      }
    >;

    reclaimTokens(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardRateLog(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardsPerSecond: BigNumber;
        timestamp: BigNumber;
      }
    >;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    setRewardPerSecond(
      _baseToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSharesStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changePauser(
    newPauser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _nftId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extractRewards(
    _nftId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNftIdsStaked(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRewardRatePerSecond(
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUpdatedAccTokenPerShare(
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initalizeRewardPool(
    _baseToken: string,
    _rewardToken: string,
    _rewardPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _trustedForwarder: string,
    _pauser: string,
    _liquidityProviders: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPauser(pauser: string, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityProviders(overrides?: CallOverrides): Promise<string>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  nftIdsStaked(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      staker: string;
      rewardDebt: BigNumber;
      unpaidRewards: BigNumber;
      isStaked: boolean;
    }
  >;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingToken(
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accTokenPerShare: BigNumber;
      lastRewardTime: BigNumber;
    }
  >;

  reclaimTokens(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardRateLog(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      rewardsPerSecond: BigNumber;
      timestamp: BigNumber;
    }
  >;

  rewardTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  setRewardPerSecond(
    _baseToken: string,
    _rewardPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSharesStaked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _nftId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changePauser(newPauser: string, overrides?: CallOverrides): Promise<void>;

    deposit(
      _nftId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    extractRewards(
      _nftId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNftIdsStaked(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRewardRatePerSecond(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdatedAccTokenPerShare(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initalizeRewardPool(
      _baseToken: string,
      _rewardToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _trustedForwarder: string,
      _pauser: string,
      _liquidityProviders: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPauser(pauser: string, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityProviders(overrides?: CallOverrides): Promise<string>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    nftIdsStaked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        staker: string;
        rewardDebt: BigNumber;
        unpaidRewards: BigNumber;
        isStaked: boolean;
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingToken(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardTime: BigNumber;
      }
    >;

    reclaimTokens(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    rewardRateLog(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardsPerSecond: BigNumber;
        timestamp: BigNumber;
      }
    >;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    setRewardPerSecond(
      _baseToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSharesStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePool(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardTime: BigNumber;
      }
    >;

    withdraw(
      _nftId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogDeposit(address,address,uint256)"(
      user?: string | null,
      baseToken?: string | null,
      nftId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; baseToken: string; nftId: BigNumber }
    >;

    LogDeposit(
      user?: string | null,
      baseToken?: string | null,
      nftId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; baseToken: string; nftId: BigNumber }
    >;

    "LogNativeReceived(address,uint256)"(
      sender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;

    LogNativeReceived(
      sender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;

    "LogOnReward(address,address,uint256,address)"(
      user?: string | null,
      baseToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { user: string; baseToken: string; amount: BigNumber; to: string }
    >;

    LogOnReward(
      user?: string | null,
      baseToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { user: string; baseToken: string; amount: BigNumber; to: string }
    >;

    "LogRewardPerSecond(address,uint256)"(
      baseToken?: string | null,
      rewardPerSecond?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { baseToken: string; rewardPerSecond: BigNumber }
    >;

    LogRewardPerSecond(
      baseToken?: string | null,
      rewardPerSecond?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { baseToken: string; rewardPerSecond: BigNumber }
    >;

    "LogRewardPoolInitialized(address,address,uint256)"(
      _baseToken?: null,
      _rewardToken?: null,
      _rewardPerSecond?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _baseToken: string; _rewardToken: string; _rewardPerSecond: BigNumber }
    >;

    LogRewardPoolInitialized(
      _baseToken?: null,
      _rewardToken?: null,
      _rewardPerSecond?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _baseToken: string; _rewardToken: string; _rewardPerSecond: BigNumber }
    >;

    "LogUpdatePool(address,uint256,uint256,uint256)"(
      baseToken?: string | null,
      lastRewardTime?: null,
      lpSupply?: null,
      accToken1PerShare?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        baseToken: string;
        lastRewardTime: BigNumber;
        lpSupply: BigNumber;
        accToken1PerShare: BigNumber;
      }
    >;

    LogUpdatePool(
      baseToken?: string | null,
      lastRewardTime?: null,
      lpSupply?: null,
      accToken1PerShare?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        baseToken: string;
        lastRewardTime: BigNumber;
        lpSupply: BigNumber;
        accToken1PerShare: BigNumber;
      }
    >;

    "LogWithdraw(address,address,uint256,address)"(
      user?: string | null,
      baseToken?: null,
      nftId?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { user: string; baseToken: string; nftId: BigNumber; to: string }
    >;

    LogWithdraw(
      user?: string | null,
      baseToken?: null,
      nftId?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { user: string; baseToken: string; nftId: BigNumber; to: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PauserChanged(address,address)"(
      previousPauser?: string | null,
      newPauser?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousPauser: string; newPauser: string }
    >;

    PauserChanged(
      previousPauser?: string | null,
      newPauser?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousPauser: string; newPauser: string }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    changePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extractRewards(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNftIdsStaked(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardRatePerSecond(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdatedAccTokenPerShare(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initalizeRewardPool(
      _baseToken: string,
      _rewardToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _trustedForwarder: string,
      _pauser: string,
      _liquidityProviders: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPauser(pauser: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityProviders(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    nftIdsStaked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingToken(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reclaimTokens(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardRateLog(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setRewardPerSecond(
      _baseToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSharesStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extractRewards(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNftIdsStaked(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardRatePerSecond(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdatedAccTokenPerShare(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initalizeRewardPool(
      _baseToken: string,
      _rewardToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _trustedForwarder: string,
      _pauser: string,
      _liquidityProviders: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPauser(
      pauser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftIdsStaked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingToken(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reclaimTokens(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardRateLog(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardPerSecond(
      _baseToken: string,
      _rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSharesStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _nftId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
