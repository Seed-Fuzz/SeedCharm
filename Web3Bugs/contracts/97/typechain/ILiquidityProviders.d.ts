/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILiquidityProvidersInterface extends ethers.utils.Interface {
  functions: {
    "BASE_DIVISOR()": FunctionFragment;
    "addLPFee(address,uint256)": FunctionFragment;
    "addNativeLiquidity()": FunctionFragment;
    "addTokenLiquidity(address,uint256)": FunctionFragment;
    "claimFee(uint256)": FunctionFragment;
    "decreaseCurrentLiquidity(address,uint256)": FunctionFragment;
    "getCurrentLiquidity(address)": FunctionFragment;
    "getFeeAccumulatedOnNft(uint256)": FunctionFragment;
    "getSuppliedLiquidity(uint256)": FunctionFragment;
    "getSuppliedLiquidityByToken(address)": FunctionFragment;
    "getTokenPriceInLPShares(address)": FunctionFragment;
    "getTotalLPFeeByToken(address)": FunctionFragment;
    "getTotalReserveByToken(address)": FunctionFragment;
    "increaseCurrentLiquidity(address,uint256)": FunctionFragment;
    "increaseNativeLiquidity(uint256)": FunctionFragment;
    "increaseTokenLiquidity(uint256,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeLiquidity(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLiquidityPool(address)": FunctionFragment;
    "setLpToken(address)": FunctionFragment;
    "setWhiteListPeriodManager(address)": FunctionFragment;
    "sharesToTokenAmount(uint256,address)": FunctionFragment;
    "totalLPFees(address)": FunctionFragment;
    "totalLiquidity(address)": FunctionFragment;
    "totalReserve(address)": FunctionFragment;
    "totalSharesMinted(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whiteListPeriodManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLPFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addNativeLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseCurrentLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAccumulatedOnNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuppliedLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuppliedLiquidityByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceInLPShares",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLPFeeByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalReserveByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseCurrentLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNativeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTokenLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setLpToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWhiteListPeriodManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesToTokenAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "totalLPFees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSharesMinted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListPeriodManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addLPFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNativeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseCurrentLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAccumulatedOnNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuppliedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuppliedLiquidityByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceInLPShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLPFeeByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReserveByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseCurrentLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNativeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTokenLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteListPeriodManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesToTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLPFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSharesMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListPeriodManager",
    data: BytesLike
  ): Result;

  events: {};
}

export class ILiquidityProviders extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILiquidityProvidersInterface;

  functions: {
    BASE_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLPFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNativeLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokenLiquidity(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFee(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeAccumulatedOnNft(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSuppliedLiquidity(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSuppliedLiquidityByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenPriceInLPShares(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalLPFeeByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalReserveByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseNativeLiquidity(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseTokenLiquidity(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _trustedForwarder: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeLiquidity(
      _nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLpToken(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhiteListPeriodManager(
      _whiteListPeriodManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharesToTokenAmount(
      _shares: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLPFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalReserve(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSharesMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListPeriodManager(overrides?: CallOverrides): Promise<[string]>;
  };

  BASE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  addLPFee(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNativeLiquidity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokenLiquidity(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFee(
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseCurrentLiquidity(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentLiquidity(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeAccumulatedOnNft(
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSuppliedLiquidity(
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSuppliedLiquidityByToken(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenPriceInLPShares(
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalLPFeeByToken(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalReserveByToken(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseCurrentLiquidity(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseNativeLiquidity(
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseTokenLiquidity(
    _nftId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _trustedForwarder: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeLiquidity(
    _nftId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPool(
    _liquidityPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLpToken(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhiteListPeriodManager(
    _whiteListPeriodManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharesToTokenAmount(
    _shares: BigNumberish,
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLPFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSharesMinted(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListPeriodManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    addLPFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addNativeLiquidity(overrides?: CallOverrides): Promise<void>;

    addTokenLiquidity(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(_nftId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    decreaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeAccumulatedOnNft(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSuppliedLiquidity(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSuppliedLiquidityByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPriceInLPShares(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalLPFeeByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalReserveByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseNativeLiquidity(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseTokenLiquidity(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _trustedForwarder: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeLiquidity(
      _nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpToken(_lpToken: string, overrides?: CallOverrides): Promise<void>;

    setWhiteListPeriodManager(
      _whiteListPeriodManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sharesToTokenAmount(
      _shares: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLPFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListPeriodManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BASE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    addLPFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNativeLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokenLiquidity(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFee(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeAccumulatedOnNft(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSuppliedLiquidity(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSuppliedLiquidityByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPriceInLPShares(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalLPFeeByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalReserveByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseNativeLiquidity(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseTokenLiquidity(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _trustedForwarder: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLpToken(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhiteListPeriodManager(
      _whiteListPeriodManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharesToTokenAmount(
      _shares: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLPFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListPeriodManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLPFee(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNativeLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokenLiquidity(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeAccumulatedOnNft(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSuppliedLiquidity(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSuppliedLiquidityByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPriceInLPShares(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalLPFeeByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalReserveByToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseCurrentLiquidity(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseNativeLiquidity(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseTokenLiquidity(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _trustedForwarder: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLpToken(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhiteListPeriodManager(
      _whiteListPeriodManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharesToTokenAmount(
      _shares: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLPFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReserve(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSharesMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListPeriodManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
