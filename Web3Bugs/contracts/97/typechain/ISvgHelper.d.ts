/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISvgHelperInterface extends ethers.utils.Interface {
  functions: {
    "backgroundUrl()": FunctionFragment;
    "getAttributes(uint256,uint256)": FunctionFragment;
    "getChainName()": FunctionFragment;
    "getDescription(uint256,uint256)": FunctionFragment;
    "getTokenSvg(uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBackgroundPngUrl(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "backgroundUrl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDescription",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSvg",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBackgroundPngUrl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "backgroundUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSvg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackgroundPngUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISvgHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISvgHelperInterface;

  functions: {
    backgroundUrl(overrides?: CallOverrides): Promise<[string]>;

    getAttributes(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainName(overrides?: CallOverrides): Promise<[string]>;

    getDescription(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenSvg(
      _tokenId: BigNumberish,
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBackgroundPngUrl(
      _backgroundPngUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  backgroundUrl(overrides?: CallOverrides): Promise<string>;

  getAttributes(
    _suppliedLiquidity: BigNumberish,
    _totalSuppliedLiquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainName(overrides?: CallOverrides): Promise<string>;

  getDescription(
    _suppliedLiquidity: BigNumberish,
    _totalSuppliedLiquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenSvg(
    _tokenId: BigNumberish,
    _suppliedLiquidity: BigNumberish,
    _totalSuppliedLiquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBackgroundPngUrl(
    _backgroundPngUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    backgroundUrl(overrides?: CallOverrides): Promise<string>;

    getAttributes(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainName(overrides?: CallOverrides): Promise<string>;

    getDescription(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenSvg(
      _tokenId: BigNumberish,
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBackgroundPngUrl(
      _backgroundPngUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    backgroundUrl(overrides?: CallOverrides): Promise<BigNumber>;

    getAttributes(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainName(overrides?: CallOverrides): Promise<BigNumber>;

    getDescription(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenSvg(
      _tokenId: BigNumberish,
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBackgroundPngUrl(
      _backgroundPngUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    backgroundUrl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttributes(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDescription(
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenSvg(
      _tokenId: BigNumberish,
      _suppliedLiquidity: BigNumberish,
      _totalSuppliedLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBackgroundPngUrl(
      _backgroundPngUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
