/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITokenManagerInterface extends ethers.utils.Interface {
  functions: {
    "changeFee(address,uint256,uint256)": FunctionFragment;
    "getDepositConfig(uint256,address)": FunctionFragment;
    "getEquilibriumFee(address)": FunctionFragment;
    "getMaxFee(address)": FunctionFragment;
    "getTokensInfo(address)": FunctionFragment;
    "getTransferConfig(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositConfig",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquilibriumFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMaxFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokensInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferConfig",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquilibriumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferConfig",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITokenManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITokenManagerInterface;

  functions: {
    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }]>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
        ] & {
          transferOverhead: BigNumber;
          supportedToken: boolean;
          equilibriumFee: BigNumber;
          maxFee: BigNumber;
          tokenConfig: [BigNumber, BigNumber] & {
            min: BigNumber;
            max: BigNumber;
          };
        }
      ]
    >;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }]>;
  };

  changeFee(
    tokenAddress: string,
    _equilibriumFee: BigNumberish,
    _maxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDepositConfig(
    toChainId: BigNumberish,
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  getEquilibriumFee(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxFee(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensInfo(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
    ] & {
      transferOverhead: BigNumber;
      supportedToken: boolean;
      equilibriumFee: BigNumber;
      maxFee: BigNumber;
      tokenConfig: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
    }
  >;

  getTransferConfig(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  callStatic: {
    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
      ] & {
        transferOverhead: BigNumber;
        supportedToken: boolean;
        equilibriumFee: BigNumber;
        maxFee: BigNumber;
        tokenConfig: [BigNumber, BigNumber] & {
          min: BigNumber;
          max: BigNumber;
        };
      }
    >;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
