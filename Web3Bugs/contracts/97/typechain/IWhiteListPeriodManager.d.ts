/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IWhiteListPeriodManagerInterface extends ethers.utils.Interface {
  functions: {
    "areWhiteListRestrictionsEnabled()": FunctionFragment;
    "beforeLiquidityAddition(address,address,uint256)": FunctionFragment;
    "beforeLiquidityRemoval(address,address,uint256)": FunctionFragment;
    "beforeLiquidityTransfer(address,address,address,uint256)": FunctionFragment;
    "getMaxCommunityLpPositon(address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isExcludedAddress(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "perTokenTotalCap(address)": FunctionFragment;
    "perTokenWalletCap(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAreWhiteListRestrictionsEnabled(bool)": FunctionFragment;
    "setCap(address,uint256,uint256)": FunctionFragment;
    "setCaps(address[],uint256[],uint256[])": FunctionFragment;
    "setIsExcludedAddressStatus(address[],bool[])": FunctionFragment;
    "setLiquidityProviders(address)": FunctionFragment;
    "setPerTokenWalletCap(address,uint256)": FunctionFragment;
    "setTokenManager(address)": FunctionFragment;
    "setTotalCap(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "areWhiteListRestrictionsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beforeLiquidityAddition",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeLiquidityRemoval",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeLiquidityTransfer",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxCommunityLpPositon",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "perTokenTotalCap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "perTokenWalletCap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAreWhiteListRestrictionsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCaps",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsExcludedAddressStatus",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityProviders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerTokenWalletCap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalCap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "areWhiteListRestrictionsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeLiquidityAddition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeLiquidityRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeLiquidityTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxCommunityLpPositon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "perTokenTotalCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perTokenWalletCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAreWhiteListRestrictionsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsExcludedAddressStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerTokenWalletCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export class IWhiteListPeriodManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IWhiteListPeriodManagerInterface;

  functions: {
    areWhiteListRestrictionsEnabled(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    beforeLiquidityAddition(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeLiquidityRemoval(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeLiquidityTransfer(
      _from: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMaxCommunityLpPositon(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _trustedForwarder: string,
      _liquidityProviders: string,
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    perTokenTotalCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    perTokenWalletCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAreWhiteListRestrictionsEnabled(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCap(
      _token: string,
      _totalCap: BigNumberish,
      _perTokenWalletCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCaps(
      _tokens: string[],
      _totalCaps: BigNumberish[],
      _perTokenWalletCaps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsExcludedAddressStatus(
      _addresses: string[],
      _status: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerTokenWalletCap(
      _token: string,
      _perTokenWalletCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalCap(
      _token: string,
      _totalCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  areWhiteListRestrictionsEnabled(overrides?: CallOverrides): Promise<boolean>;

  beforeLiquidityAddition(
    _lp: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeLiquidityRemoval(
    _lp: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeLiquidityTransfer(
    _from: string,
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMaxCommunityLpPositon(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _trustedForwarder: string,
    _liquidityProviders: string,
    _tokenManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedAddress(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  perTokenTotalCap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  perTokenWalletCap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAreWhiteListRestrictionsEnabled(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCap(
    _token: string,
    _totalCap: BigNumberish,
    _perTokenWalletCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCaps(
    _tokens: string[],
    _totalCaps: BigNumberish[],
    _perTokenWalletCaps: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsExcludedAddressStatus(
    _addresses: string[],
    _status: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityProviders(
    _liquidityProviders: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerTokenWalletCap(
    _token: string,
    _perTokenWalletCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenManager(
    _tokenManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalCap(
    _token: string,
    _totalCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    areWhiteListRestrictionsEnabled(
      overrides?: CallOverrides
    ): Promise<boolean>;

    beforeLiquidityAddition(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeLiquidityRemoval(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeLiquidityTransfer(
      _from: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMaxCommunityLpPositon(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _trustedForwarder: string,
      _liquidityProviders: string,
      _tokenManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isExcludedAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    perTokenTotalCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perTokenWalletCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAreWhiteListRestrictionsEnabled(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(
      _token: string,
      _totalCap: BigNumberish,
      _perTokenWalletCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCaps(
      _tokens: string[],
      _totalCaps: BigNumberish[],
      _perTokenWalletCaps: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setIsExcludedAddressStatus(
      _addresses: string[],
      _status: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerTokenWalletCap(
      _token: string,
      _perTokenWalletCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenManager(
      _tokenManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalCap(
      _token: string,
      _totalCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    areWhiteListRestrictionsEnabled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeLiquidityAddition(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeLiquidityRemoval(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeLiquidityTransfer(
      _from: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMaxCommunityLpPositon(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _trustedForwarder: string,
      _liquidityProviders: string,
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    perTokenTotalCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perTokenWalletCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAreWhiteListRestrictionsEnabled(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCap(
      _token: string,
      _totalCap: BigNumberish,
      _perTokenWalletCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCaps(
      _tokens: string[],
      _totalCaps: BigNumberish[],
      _perTokenWalletCaps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsExcludedAddressStatus(
      _addresses: string[],
      _status: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerTokenWalletCap(
      _token: string,
      _perTokenWalletCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalCap(
      _token: string,
      _totalCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    areWhiteListRestrictionsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeLiquidityAddition(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeLiquidityRemoval(
      _lp: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeLiquidityTransfer(
      _from: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMaxCommunityLpPositon(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _trustedForwarder: string,
      _liquidityProviders: string,
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perTokenTotalCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perTokenWalletCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAreWhiteListRestrictionsEnabled(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCap(
      _token: string,
      _totalCap: BigNumberish,
      _perTokenWalletCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCaps(
      _tokens: string[],
      _totalCaps: BigNumberish[],
      _perTokenWalletCaps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsExcludedAddressStatus(
      _addresses: string[],
      _status: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerTokenWalletCap(
      _token: string,
      _perTokenWalletCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalCap(
      _token: string,
      _totalCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
