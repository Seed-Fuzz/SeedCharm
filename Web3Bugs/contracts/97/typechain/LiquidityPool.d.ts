/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    "baseGas()": FunctionFragment;
    "changePauser(address)": FunctionFragment;
    "checkHashStatus(address,uint256,address,bytes)": FunctionFragment;
    "depositErc20(uint256,address,address,uint256,string)": FunctionFragment;
    "depositNative(address,uint256,string)": FunctionFragment;
    "gasFeeAccumulated(address,address)": FunctionFragment;
    "gasFeeAccumulatedByToken(address)": FunctionFragment;
    "getCurrentLiquidity(address)": FunctionFragment;
    "getExecutorManager()": FunctionFragment;
    "getRewardAmount(uint256,address)": FunctionFragment;
    "getTransferFee(address,uint256)": FunctionFragment;
    "incentivePool(address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "liquidityProviders()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "permitAndDepositErc20(address,address,uint256,uint256,(uint256,uint256,bool,uint8,bytes32,bytes32),string)": FunctionFragment;
    "permitEIP2612AndDepositErc20(address,address,uint256,uint256,(uint256,uint256,bool,uint8,bytes32,bytes32),string)": FunctionFragment;
    "processedHash(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "sendFundsToUser(address,uint256,address,bytes,uint256,uint256)": FunctionFragment;
    "setBaseGas(uint128)": FunctionFragment;
    "setExecutorManager(address)": FunctionFragment;
    "setLiquidityProviders(address)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "transfer(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawErc20GasFee(address)": FunctionFragment;
    "withdrawNativeGasFee()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseGas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkHashStatus",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositErc20",
    values: [BigNumberish, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gasFeeAccumulated",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gasFeeAccumulatedByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityProviders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitAndDepositErc20",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitEIP2612AndDepositErc20",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processedHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendFundsToUser",
    values: [
      string,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutorManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityProviders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20GasFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNativeGasFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "baseGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkHashStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasFeeAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasFeeAccumulatedByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitAndDepositErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitEIP2612AndDepositErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendFundsToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExecutorManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20GasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNativeGasFee",
    data: BytesLike
  ): Result;

  events: {
    "AssetSent(address,uint256,uint256,address,bytes,uint256)": EventFragment;
    "Deposit(address,address,address,uint256,uint256,uint256,string)": EventFragment;
    "EthReceived(address,uint256)": EventFragment;
    "FeeDetails(uint256,uint256,uint256)": EventFragment;
    "GasFeeWithdraw(address,address,uint256)": EventFragment;
    "LiquidityProvidersChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserChanged(address,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "TrustedForwarderChanged(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasFeeWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityProvidersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AssetSentEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, BigNumber] & {
    asset: string;
    amount: BigNumber;
    transferredAmount: BigNumber;
    target: string;
    depositHash: string;
    fromChainId: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string] & {
    from: string;
    tokenAddress: string;
    receiver: string;
    toChainId: BigNumber;
    amount: BigNumber;
    reward: BigNumber;
    tag: string;
  }
>;

export type EthReceivedEvent = TypedEvent<
  [string, BigNumber] & { arg0: string; arg1: BigNumber }
>;

export type FeeDetailsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    lpFee: BigNumber;
    transferFee: BigNumber;
    gasFee: BigNumber;
  }
>;

export type GasFeeWithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    tokenAddress: string;
    owner: string;
    amount: BigNumber;
  }
>;

export type LiquidityProvidersChangedEvent = TypedEvent<
  [string] & { liquidityProvidersAddress: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PauserChangedEvent = TypedEvent<
  [string, string] & { previousPauser: string; newPauser: string }
>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber] & { from: string; amount: BigNumber }
>;

export type TrustedForwarderChangedEvent = TypedEvent<
  [string] & { forwarderAddress: string }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class LiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidityPoolInterface;

  functions: {
    baseGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    changePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkHashStatus(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { hashSendTransaction: string; status: boolean }
    >;

    depositErc20(
      toChainId: BigNumberish,
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNative(
      receiver: string,
      toChainId: BigNumberish,
      tag: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gasFeeAccumulated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gasFeeAccumulatedByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentLiquidity: BigNumber }>;

    getExecutorManager(overrides?: CallOverrides): Promise<[string]>;

    getRewardAmount(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardAmount: BigNumber }>;

    getTransferFee(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    incentivePool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _executorManagerAddress: string,
      _pauser: string,
      _trustedForwarder: string,
      _tokenManager: string,
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPauser(pauser: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityProviders(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permitAndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permitEIP2612AndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processedHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendFundsToUser(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      tokenGasPrice: BigNumberish,
      fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseGas(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExecutorManager(
      _executorManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      _tokenAddress: string,
      receiver: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawErc20GasFee(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNativeGasFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseGas(overrides?: CallOverrides): Promise<BigNumber>;

  changePauser(
    newPauser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkHashStatus(
    tokenAddress: string,
    amount: BigNumberish,
    receiver: string,
    depositHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { hashSendTransaction: string; status: boolean }
  >;

  depositErc20(
    toChainId: BigNumberish,
    tokenAddress: string,
    receiver: string,
    amount: BigNumberish,
    tag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNative(
    receiver: string,
    toChainId: BigNumberish,
    tag: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gasFeeAccumulated(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gasFeeAccumulatedByToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentLiquidity(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExecutorManager(overrides?: CallOverrides): Promise<string>;

  getRewardAmount(
    amount: BigNumberish,
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransferFee(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incentivePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _executorManagerAddress: string,
    _pauser: string,
    _trustedForwarder: string,
    _tokenManager: string,
    _liquidityProviders: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPauser(pauser: string, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityProviders(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permitAndDepositErc20(
    tokenAddress: string,
    receiver: string,
    amount: BigNumberish,
    toChainId: BigNumberish,
    permitOptions: {
      nonce: BigNumberish;
      expiry: BigNumberish;
      allowed: boolean;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    tag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permitEIP2612AndDepositErc20(
    tokenAddress: string,
    receiver: string,
    amount: BigNumberish,
    toChainId: BigNumberish,
    permitOptions: {
      nonce: BigNumberish;
      expiry: BigNumberish;
      allowed: boolean;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    tag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processedHash(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendFundsToUser(
    tokenAddress: string,
    amount: BigNumberish,
    receiver: string,
    depositHash: BytesLike,
    tokenGasPrice: BigNumberish,
    fromChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseGas(
    gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExecutorManager(
    _executorManagerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityProviders(
    _liquidityProviders: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  transfer(
    _tokenAddress: string,
    receiver: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawErc20GasFee(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNativeGasFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseGas(overrides?: CallOverrides): Promise<BigNumber>;

    changePauser(newPauser: string, overrides?: CallOverrides): Promise<void>;

    checkHashStatus(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { hashSendTransaction: string; status: boolean }
    >;

    depositErc20(
      toChainId: BigNumberish,
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      tag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNative(
      receiver: string,
      toChainId: BigNumberish,
      tag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gasFeeAccumulated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasFeeAccumulatedByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorManager(overrides?: CallOverrides): Promise<string>;

    getRewardAmount(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferFee(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _executorManagerAddress: string,
      _pauser: string,
      _trustedForwarder: string,
      _tokenManager: string,
      _liquidityProviders: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPauser(pauser: string, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityProviders(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permitAndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    permitEIP2612AndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    processedHash(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    sendFundsToUser(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      tokenGasPrice: BigNumberish,
      fromChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseGas(gas: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setExecutorManager(
      _executorManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    transfer(
      _tokenAddress: string,
      receiver: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawErc20GasFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNativeGasFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetSent(address,uint256,uint256,address,bytes,uint256)"(
      asset?: string | null,
      amount?: BigNumberish | null,
      transferredAmount?: BigNumberish | null,
      target?: null,
      depositHash?: null,
      fromChainId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, BigNumber],
      {
        asset: string;
        amount: BigNumber;
        transferredAmount: BigNumber;
        target: string;
        depositHash: string;
        fromChainId: BigNumber;
      }
    >;

    AssetSent(
      asset?: string | null,
      amount?: BigNumberish | null,
      transferredAmount?: BigNumberish | null,
      target?: null,
      depositHash?: null,
      fromChainId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string, BigNumber],
      {
        asset: string;
        amount: BigNumber;
        transferredAmount: BigNumber;
        target: string;
        depositHash: string;
        fromChainId: BigNumber;
      }
    >;

    "Deposit(address,address,address,uint256,uint256,uint256,string)"(
      from?: string | null,
      tokenAddress?: string | null,
      receiver?: string | null,
      toChainId?: null,
      amount?: null,
      reward?: null,
      tag?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, string],
      {
        from: string;
        tokenAddress: string;
        receiver: string;
        toChainId: BigNumber;
        amount: BigNumber;
        reward: BigNumber;
        tag: string;
      }
    >;

    Deposit(
      from?: string | null,
      tokenAddress?: string | null,
      receiver?: string | null,
      toChainId?: null,
      amount?: null,
      reward?: null,
      tag?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, string],
      {
        from: string;
        tokenAddress: string;
        receiver: string;
        toChainId: BigNumber;
        amount: BigNumber;
        reward: BigNumber;
        tag: string;
      }
    >;

    "EthReceived(address,uint256)"(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    EthReceived(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    "FeeDetails(uint256,uint256,uint256)"(
      lpFee?: BigNumberish | null,
      transferFee?: BigNumberish | null,
      gasFee?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { lpFee: BigNumber; transferFee: BigNumber; gasFee: BigNumber }
    >;

    FeeDetails(
      lpFee?: BigNumberish | null,
      transferFee?: BigNumberish | null,
      gasFee?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { lpFee: BigNumber; transferFee: BigNumber; gasFee: BigNumber }
    >;

    "GasFeeWithdraw(address,address,uint256)"(
      tokenAddress?: string | null,
      owner?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddress: string; owner: string; amount: BigNumber }
    >;

    GasFeeWithdraw(
      tokenAddress?: string | null,
      owner?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddress: string; owner: string; amount: BigNumber }
    >;

    "LiquidityProvidersChanged(address)"(
      liquidityProvidersAddress?: string | null
    ): TypedEventFilter<[string], { liquidityProvidersAddress: string }>;

    LiquidityProvidersChanged(
      liquidityProvidersAddress?: string | null
    ): TypedEventFilter<[string], { liquidityProvidersAddress: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PauserChanged(address,address)"(
      previousPauser?: string | null,
      newPauser?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousPauser: string; newPauser: string }
    >;

    PauserChanged(
      previousPauser?: string | null,
      newPauser?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousPauser: string; newPauser: string }
    >;

    "Received(address,uint256)"(
      from?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    Received(
      from?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    "TrustedForwarderChanged(address)"(
      forwarderAddress?: string | null
    ): TypedEventFilter<[string], { forwarderAddress: string }>;

    TrustedForwarderChanged(
      forwarderAddress?: string | null
    ): TypedEventFilter<[string], { forwarderAddress: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    baseGas(overrides?: CallOverrides): Promise<BigNumber>;

    changePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkHashStatus(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositErc20(
      toChainId: BigNumberish,
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNative(
      receiver: string,
      toChainId: BigNumberish,
      tag: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gasFeeAccumulated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasFeeAccumulatedByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutorManager(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardAmount(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferFee(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _executorManagerAddress: string,
      _pauser: string,
      _trustedForwarder: string,
      _tokenManager: string,
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPauser(pauser: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityProviders(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permitAndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permitEIP2612AndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processedHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendFundsToUser(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      tokenGasPrice: BigNumberish,
      fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseGas(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExecutorManager(
      _executorManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _tokenAddress: string,
      receiver: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawErc20GasFee(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNativeGasFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkHashStatus(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositErc20(
      toChainId: BigNumberish,
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNative(
      receiver: string,
      toChainId: BigNumberish,
      tag: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gasFeeAccumulated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasFeeAccumulatedByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutorManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardAmount(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferFee(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivePool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _executorManagerAddress: string,
      _pauser: string,
      _trustedForwarder: string,
      _tokenManager: string,
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPauser(
      pauser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitAndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permitEIP2612AndDepositErc20(
      tokenAddress: string,
      receiver: string,
      amount: BigNumberish,
      toChainId: BigNumberish,
      permitOptions: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        allowed: boolean;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processedHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendFundsToUser(
      tokenAddress: string,
      amount: BigNumberish,
      receiver: string,
      depositHash: BytesLike,
      tokenGasPrice: BigNumberish,
      fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseGas(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExecutorManager(
      _executorManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityProviders(
      _liquidityProviders: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _tokenAddress: string,
      receiver: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawErc20GasFee(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNativeGasFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
