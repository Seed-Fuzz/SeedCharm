/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenManagerInterface extends ethers.utils.Interface {
  functions: {
    "addSupportedToken(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "changeFee(address,uint256,uint256)": FunctionFragment;
    "depositConfig(uint256,address)": FunctionFragment;
    "getDepositConfig(uint256,address)": FunctionFragment;
    "getEquilibriumFee(address)": FunctionFragment;
    "getMaxFee(address)": FunctionFragment;
    "getTokensInfo(address)": FunctionFragment;
    "getTransferConfig(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeSupportedToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDepositConfig(uint256[],address[],tuple[])": FunctionFragment;
    "setTokenTransferOverhead(address,uint256)": FunctionFragment;
    "tokensInfo(address)": FunctionFragment;
    "transferConfig(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTokenCap(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositConfig",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositConfig",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquilibriumFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMaxFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokensInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSupportedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositConfig",
    values: [
      BigNumberish[],
      string[],
      { min: BigNumberish; max: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTransferOverhead",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokensInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenCap",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquilibriumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTransferOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokensInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenCap",
    data: BytesLike
  ): Result;

  events: {
    "FeeChanged(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type FeeChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    tokenAddress: string;
    equilibriumFee: BigNumber;
    maxFee: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class TokenManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenManagerInterface;

  functions: {
    addSupportedToken(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      equilibriumFee: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositConfig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }]>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
        ] & {
          transferOverhead: BigNumber;
          supportedToken: boolean;
          equilibriumFee: BigNumber;
          maxFee: BigNumber;
          tokenConfig: [BigNumber, BigNumber] & {
            min: BigNumber;
            max: BigNumber;
          };
        }
      ]
    >;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeSupportedToken(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositConfig(
      toChainId: BigNumberish[],
      tokenAddresses: string[],
      tokenConfig: { min: BigNumberish; max: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenTransferOverhead(
      tokenAddress: string,
      gasOverhead: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
      ] & {
        transferOverhead: BigNumber;
        supportedToken: boolean;
        equilibriumFee: BigNumber;
        maxFee: BigNumber;
        tokenConfig: [BigNumber, BigNumber] & {
          min: BigNumber;
          max: BigNumber;
        };
      }
    >;

    transferConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenCap(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSupportedToken(
    tokenAddress: string,
    minCapLimit: BigNumberish,
    maxCapLimit: BigNumberish,
    equilibriumFee: BigNumberish,
    maxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFee(
    tokenAddress: string,
    _equilibriumFee: BigNumberish,
    _maxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositConfig(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  getDepositConfig(
    toChainId: BigNumberish,
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  getEquilibriumFee(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxFee(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensInfo(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
    ] & {
      transferOverhead: BigNumber;
      supportedToken: boolean;
      equilibriumFee: BigNumber;
      maxFee: BigNumber;
      tokenConfig: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
    }
  >;

  getTransferConfig(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeSupportedToken(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositConfig(
    toChainId: BigNumberish[],
    tokenAddresses: string[],
    tokenConfig: { min: BigNumberish; max: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenTransferOverhead(
    tokenAddress: string,
    gasOverhead: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
    ] & {
      transferOverhead: BigNumber;
      supportedToken: boolean;
      equilibriumFee: BigNumber;
      maxFee: BigNumber;
      tokenConfig: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
    }
  >;

  transferConfig(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenCap(
    tokenAddress: string,
    minCapLimit: BigNumberish,
    maxCapLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSupportedToken(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      equilibriumFee: BigNumberish,
      maxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositConfig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
      ] & {
        transferOverhead: BigNumber;
        supportedToken: boolean;
        equilibriumFee: BigNumber;
        maxFee: BigNumber;
        tokenConfig: [BigNumber, BigNumber] & {
          min: BigNumber;
          max: BigNumber;
        };
      }
    >;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeSupportedToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDepositConfig(
      toChainId: BigNumberish[],
      tokenAddresses: string[],
      tokenConfig: { min: BigNumberish; max: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenTransferOverhead(
      tokenAddress: string,
      gasOverhead: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
      ] & {
        transferOverhead: BigNumber;
        supportedToken: boolean;
        equilibriumFee: BigNumber;
        maxFee: BigNumber;
        tokenConfig: [BigNumber, BigNumber] & {
          min: BigNumber;
          max: BigNumber;
        };
      }
    >;

    transferConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenCap(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeChanged(address,uint256,uint256)"(
      tokenAddress?: string | null,
      equilibriumFee?: BigNumberish | null,
      maxFee?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { tokenAddress: string; equilibriumFee: BigNumber; maxFee: BigNumber }
    >;

    FeeChanged(
      tokenAddress?: string | null,
      equilibriumFee?: BigNumberish | null,
      maxFee?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { tokenAddress: string; equilibriumFee: BigNumber; maxFee: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addSupportedToken(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      equilibriumFee: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositConfig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeSupportedToken(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositConfig(
      toChainId: BigNumberish[],
      tokenAddresses: string[],
      tokenConfig: { min: BigNumberish; max: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenTransferOverhead(
      tokenAddress: string,
      gasOverhead: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferConfig(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenCap(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportedToken(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      equilibriumFee: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFee(
      tokenAddress: string,
      _equilibriumFee: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositConfig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositConfig(
      toChainId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEquilibriumFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferConfig(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSupportedToken(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositConfig(
      toChainId: BigNumberish[],
      tokenAddresses: string[],
      tokenConfig: { min: BigNumberish; max: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenTransferOverhead(
      tokenAddress: string,
      gasOverhead: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenCap(
      tokenAddress: string,
      minCapLimit: BigNumberish,
      maxCapLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
