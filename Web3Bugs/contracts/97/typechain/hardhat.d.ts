/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC2771ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771ContextUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721URIStorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorageUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "ExecutorManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutorManager__factory>;
    getContractFactory(
      name: "IExecutorManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutorManager__factory>;
    getContractFactory(
      name: "ILiquidityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityPool__factory>;
    getContractFactory(
      name: "ILiquidityProviders",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityProviders__factory>;
    getContractFactory(
      name: "ILPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILPToken__factory>;
    getContractFactory(
      name: "ISvgHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISvgHelper__factory>;
    getContractFactory(
      name: "ITokenManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenManager__factory>;
    getContractFactory(
      name: "IWhiteListPeriodManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWhiteListPeriodManager__factory>;
    getContractFactory(
      name: "HyphenLiquidityFarming",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HyphenLiquidityFarming__factory>;
    getContractFactory(
      name: "LiquidityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityPool__factory>;
    getContractFactory(
      name: "LiquidityProviders",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityProviders__factory>;
    getContractFactory(
      name: "ERC2771Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771Context__factory>;
    getContractFactory(
      name: "ERC2771ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771ContextUpgradeable__factory>;
    getContractFactory(
      name: "LiquidityPoolProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityPoolProxy__factory>;
    getContractFactory(
      name: "LPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPToken__factory>;
    getContractFactory(
      name: "AvalancheBICO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvalancheBICO__factory>;
    getContractFactory(
      name: "AvalancheETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvalancheETH__factory>;
    getContractFactory(
      name: "AvalancheUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvalancheUSDC__factory>;
    getContractFactory(
      name: "AvalancheUSDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvalancheUSDT__factory>;
    getContractFactory(
      name: "EthereumBICO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumBICO__factory>;
    getContractFactory(
      name: "EthereumETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumETH__factory>;
    getContractFactory(
      name: "EthereumUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumUSDC__factory>;
    getContractFactory(
      name: "EthereumUSDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumUSDT__factory>;
    getContractFactory(
      name: "PolygonBICO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonBICO__factory>;
    getContractFactory(
      name: "PolygonETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonETH__factory>;
    getContractFactory(
      name: "PolygonUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonUSDC__factory>;
    getContractFactory(
      name: "PolygonUSDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonUSDT__factory>;
    getContractFactory(
      name: "SvgHelperBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SvgHelperBase__factory>;
    getContractFactory(
      name: "TokenManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenManager__factory>;
    getContractFactory(
      name: "WhitelistPeriodManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistPeriodManager__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "IERC20Nonces",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Nonces__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Token__factory>;
    getContractFactory(
      name: "LiquidityProvidersMaliciousReentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityProvidersMaliciousReentrant__factory>;
    getContractFactory(
      name: "LiquidityProvidersTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityProvidersTest__factory>;
    getContractFactory(
      name: "TokenMintingReentrancy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenMintingReentrancy__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC2771ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771ContextUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "ERC721URIStorageUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorageUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "ExecutorManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutorManager>;
    getContractAt(
      name: "IExecutorManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutorManager>;
    getContractAt(
      name: "ILiquidityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityPool>;
    getContractAt(
      name: "ILiquidityProviders",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityProviders>;
    getContractAt(
      name: "ILPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILPToken>;
    getContractAt(
      name: "ISvgHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISvgHelper>;
    getContractAt(
      name: "ITokenManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenManager>;
    getContractAt(
      name: "IWhiteListPeriodManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWhiteListPeriodManager>;
    getContractAt(
      name: "HyphenLiquidityFarming",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HyphenLiquidityFarming>;
    getContractAt(
      name: "LiquidityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityPool>;
    getContractAt(
      name: "LiquidityProviders",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityProviders>;
    getContractAt(
      name: "ERC2771Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771Context>;
    getContractAt(
      name: "ERC2771ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771ContextUpgradeable>;
    getContractAt(
      name: "LiquidityPoolProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityPoolProxy>;
    getContractAt(
      name: "LPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPToken>;
    getContractAt(
      name: "AvalancheBICO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvalancheBICO>;
    getContractAt(
      name: "AvalancheETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvalancheETH>;
    getContractAt(
      name: "AvalancheUSDC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvalancheUSDC>;
    getContractAt(
      name: "AvalancheUSDT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvalancheUSDT>;
    getContractAt(
      name: "EthereumBICO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumBICO>;
    getContractAt(
      name: "EthereumETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumETH>;
    getContractAt(
      name: "EthereumUSDC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumUSDC>;
    getContractAt(
      name: "EthereumUSDT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumUSDT>;
    getContractAt(
      name: "PolygonBICO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonBICO>;
    getContractAt(
      name: "PolygonETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonETH>;
    getContractAt(
      name: "PolygonUSDC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonUSDC>;
    getContractAt(
      name: "PolygonUSDT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonUSDT>;
    getContractAt(
      name: "SvgHelperBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SvgHelperBase>;
    getContractAt(
      name: "TokenManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenManager>;
    getContractAt(
      name: "WhitelistPeriodManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistPeriodManager>;
    getContractAt(
      name: "IERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Detailed>;
    getContractAt(
      name: "IERC20Nonces",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Nonces>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Token>;
    getContractAt(
      name: "LiquidityProvidersMaliciousReentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityProvidersMaliciousReentrant>;
    getContractAt(
      name: "LiquidityProvidersTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityProvidersTest>;
    getContractAt(
      name: "TokenMintingReentrancy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenMintingReentrancy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
