{
    "file_path": "/home/mingyue/sub_contract_content/Web3Bugs/contracts/74/Timeswap/Timeswap-V1-Core",
    "external_functions": [
        [
            "TimeswapFactory"
        ],
        [
            "TimeswapPair",
            "IFactory"
        ]
    ],
    "new_contract": "contract TimeswapPair is IPair {\n    using SafeTransfer for IERC20;\n    using Array for Due[];\n\n    /* ===== MODEL ===== */\n\n    /// @inheritdoc IPair\n    IFactory public immutable override factory;\n    /// @inheritdoc IPair\n    IERC20 public immutable override asset;\n    /// @inheritdoc IPair\n    IERC20 public immutable override collateral;\n    /// @inheritdoc IPair\n    uint16 public immutable override fee;\n    /// @inheritdoc IPair\n    uint16 public immutable override protocolFee;\n\n    /// @dev Stores the individual states of each Pool.\n    mapping(uint256 => Pool) private pools;\n\n    /// @dev Stores the access state for reentrancy guard.\n    uint256 private locked;\n\n    /* ===== VIEW =====*/\n\n    /// @inheritdoc IPair\n    function constantProduct(uint256 maturity)\n        external\n        view\n        override\n        returns (\n            uint112 x,\n            uint112 y,\n            uint112 z\n        )\n    {\n        State memory state = pools[maturity].state;\n        return (state.x, state.y, state.z);\n    }\n\n    /// @inheritdoc IPair\n    function totalReserves(uint256 maturity) external view override returns (Tokens memory) {\n        return pools[maturity].state.reserves;\n    }\n\n    /// @inheritdoc IPair\n    function totalLiquidity(uint256 maturity) external view override returns (uint256) {\n        return pools[maturity].state.totalLiquidity;\n    }\n\n    /// @inheritdoc IPair\n    function liquidityOf(uint256 maturity, address owner) external view override returns (uint256) {\n        return pools[maturity].liquidities[owner];\n    }\n\n    /// @inheritdoc IPair\n    function totalClaims(uint256 maturity) external view override returns (Claims memory) {\n        return pools[maturity].state.totalClaims;\n    }\n\n    /// @inheritdoc IPair\n    function claimsOf(uint256 maturity, address owner) external view override returns (Claims memory) {\n        return pools[maturity].claims[owner];\n    }\n\n    /// @inheritdoc IPair\n    function totalDebtCreated(uint256 maturity) external view override returns (uint120) {\n        return pools[maturity].state.totalDebtCreated;\n    }\n\n    /// @inheritdoc IPair\n    function dueOf(uint256 maturity, address owner, uint256 id) external view override returns (Due memory) {\n        return pools[maturity].dues[owner][id];\n    }\n\n    /* ===== INIT ===== */\n\n    /// @dev Initializes the Pair contract.\n    /// @dev Called by the Timeswap factory contract.\n    /// @param _asset The address of the ERC20 being lent and borrowed.\n    /// @param _collateral The address of the ERC20 as the collateral.\n    /// @param _fee The chosen fee rate.\n    /// @param _protocolFee The chosen protocol fee rate.\n    constructor(\n        IERC20 _asset,\n        IERC20 _collateral,\n        uint16 _fee,\n        uint16 _protocolFee\n    ) {\n        factory = IFactory(msg.sender);\n        asset = _asset;\n        collateral = _collateral;\n        fee = _fee;\n        protocolFee = _protocolFee;\n    }\n\n    /* ===== MODIFIER ===== */\n\n    /// @dev The modifier for reentrancy guard.\n    modifier lock() {\n        require(locked == 0, 'E211');\n        locked = 1;\n        _;\n        locked = 0;\n    }\n\n    /* ===== UPDATE ===== */\n\n    /// @inheritdoc IPair\n    function mint(\n        uint256 maturity,\n        address liquidityTo,\n        address dueTo,\n        uint112 xIncrease,\n        uint112 yIncrease,\n        uint112 zIncrease,\n        bytes calldata data\n    )\n        external\n        override\n        lock\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            Due memory dueOut\n        )\n    {\n        require(block.timestamp < maturity, 'E202');\n        require(maturity - block.timestamp < 0x100000000, 'E208');\n        require(liquidityTo != address(0) && dueTo != address(0), 'E201');\n        require(liquidityTo != address(this) && dueTo != address(this), 'E204');\n        require(xIncrease > 0 && yIncrease > 0 && zIncrease > 0, 'E205');\n        \n        Pool storage pool = pools[maturity];\n\n        if (pool.state.totalLiquidity == 0) {\n            uint256 liquidityTotal = MintMath.getLiquidityTotal(xIncrease);\n            liquidityOut = MintMath.getLiquidity(maturity, liquidityTotal, protocolFee);\n\n            pool.state.totalLiquidity += liquidityTotal;\n            pool.liquidities[factory.owner()] += liquidityTotal - liquidityOut;\n        } else {\n            uint256 liquidityTotal = MintMath.getLiquidityTotal(pool.state, xIncrease, yIncrease, zIncrease);\n            liquidityOut = MintMath.getLiquidity(maturity, liquidityTotal, protocolFee);\n\n            pool.state.totalLiquidity += liquidityTotal;\n            pool.liquidities[factory.owner()] += liquidityTotal - liquidityOut;\n        }\n        require(liquidityOut > 0, 'E212');\n        pool.liquidities[liquidityTo] += liquidityOut;\n\n        dueOut.debt = MintMath.getDebt(maturity, xIncrease, yIncrease);\n        dueOut.collateral = MintMath.getCollateral(maturity, zIncrease);\n        dueOut.startBlock = BlockNumber.get();\n\n        Callback.mint(asset, collateral, xIncrease, dueOut.collateral, data);\n\n        id = pool.dues[dueTo].insert(dueOut);\n\n        pool.state.reserves.asset += xIncrease;\n        pool.state.reserves.collateral += dueOut.collateral;\n        pool.state.totalDebtCreated += dueOut.debt;\n\n        pool.state.x += xIncrease;\n        pool.state.y += yIncrease;\n        pool.state.z += zIncrease;\n\n        emit Sync(maturity, pool.state.x, pool.state.y, pool.state.z);\n        emit Mint(maturity, msg.sender, liquidityTo, dueTo, xIncrease, liquidityOut, id, dueOut);\n    }\n\n    /// @inheritdoc IPair\n    function burn(\n        uint256 maturity,\n        address assetTo,\n        address collateralTo,\n        uint256 liquidityIn\n    ) external override lock returns (Tokens memory tokensOut) {\n        require(block.timestamp >= maturity, 'E203');\n        require(assetTo != address(0) && collateralTo != address(0), 'E201');\n        require(assetTo != address(this) && collateralTo != address(this), 'E204');\n        require(liquidityIn > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n\n        tokensOut.asset = BurnMath.getAsset(pool.state, liquidityIn);\n        tokensOut.collateral = BurnMath.getCollateral(pool.state, liquidityIn);\n\n        pool.state.totalLiquidity -= liquidityIn;\n\n        pool.liquidities[msg.sender] -= liquidityIn;\n\n        pool.state.reserves.asset -= tokensOut.asset;\n        pool.state.reserves.collateral -= tokensOut.collateral;\n\n        if (tokensOut.asset > 0) asset.safeTransfer(assetTo, tokensOut.asset);\n        if (tokensOut.collateral > 0) collateral.safeTransfer(collateralTo, tokensOut.collateral);\n\n        emit Burn(maturity, msg.sender, assetTo, collateralTo, liquidityIn, tokensOut);\n    }\n\n    /// @inheritdoc IPair\n    function lend(\n        uint256 maturity,\n        address bondTo,\n        address insuranceTo,\n        uint112 xIncrease,\n        uint112 yDecrease,\n        uint112 zDecrease,\n        bytes calldata data\n    ) external override lock returns (Claims memory claimsOut) {\n        require(block.timestamp < maturity, 'E202');\n        require(bondTo != address(0) && insuranceTo != address(0), 'E201');\n        require(bondTo != address(this) && insuranceTo != address(this), 'E204');\n        require(xIncrease > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n        require(pool.state.totalLiquidity > 0, 'E206');\n\n        LendMath.check(pool.state, xIncrease, yDecrease, zDecrease, fee);\n\n        claimsOut.bond = LendMath.getBond(maturity, xIncrease, yDecrease);\n        claimsOut.insurance = LendMath.getInsurance(maturity, pool.state, xIncrease, zDecrease);\n\n        Callback.lend(asset, xIncrease, data);\n\n        pool.state.totalClaims.bond += claimsOut.bond;\n        pool.state.totalClaims.insurance += claimsOut.insurance;\n\n        pool.claims[bondTo].bond += claimsOut.bond;\n        pool.claims[insuranceTo].insurance += claimsOut.insurance;\n\n        pool.state.reserves.asset += xIncrease;\n\n        pool.state.x += xIncrease;\n        pool.state.y -= yDecrease;\n        pool.state.z -= zDecrease;\n\n        emit Sync(maturity, pool.state.x, pool.state.y, pool.state.z);\n        emit Lend(maturity, msg.sender, bondTo, insuranceTo, xIncrease, claimsOut);\n    }\n\n    /// @inheritdoc IPair\n    function withdraw(\n        uint256 maturity,\n        address assetTo,\n        address collateralTo,\n        Claims memory claimsIn\n    ) external override lock returns (Tokens memory tokensOut) {\n        require(block.timestamp >= maturity, 'E203');\n        require(assetTo != address(0) && collateralTo != address(0), 'E201');\n        require(assetTo != address(this) && collateralTo != address(this), 'E204');\n        require(claimsIn.bond > 0 || claimsIn.insurance > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n\n        tokensOut.asset = WithdrawMath.getAsset(pool.state, claimsIn.bond);\n        tokensOut.collateral = WithdrawMath.getCollateral(pool.state, claimsIn.insurance);\n\n        pool.state.totalClaims.bond -= claimsIn.bond;\n        pool.state.totalClaims.insurance -= claimsIn.insurance;\n\n        Claims storage sender = pool.claims[msg.sender];\n\n        sender.bond -= claimsIn.bond;\n        sender.insurance -= claimsIn.insurance;\n\n        pool.state.reserves.asset -= tokensOut.asset;\n        pool.state.reserves.collateral -= tokensOut.collateral;\n\n        if (tokensOut.asset > 0) asset.safeTransfer(assetTo, tokensOut.asset);\n        if (tokensOut.collateral > 0) collateral.safeTransfer(collateralTo, tokensOut.collateral);\n\n        emit Withdraw(maturity, msg.sender, assetTo, collateralTo, claimsIn, tokensOut);\n    }\n\n    /// @inheritdoc IPair\n    function borrow(\n        uint256 maturity,\n        address assetTo,\n        address dueTo,\n        uint112 xDecrease,\n        uint112 yIncrease,\n        uint112 zIncrease,\n        bytes calldata data\n    ) external override lock returns (uint256 id, Due memory dueOut) {\n        require(block.timestamp < maturity, 'E202');\n        require(assetTo != address(0) && dueTo != address(0), 'E201');\n        require(assetTo != address(this) && dueTo != address(this), 'E204');\n        require(xDecrease > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n        require(pool.state.totalLiquidity > 0, 'E206');\n\n        BorrowMath.check(pool.state, xDecrease, yIncrease, zIncrease, fee);\n\n        dueOut.debt = BorrowMath.getDebt(maturity, xDecrease, yIncrease);\n        dueOut.collateral = BorrowMath.getCollateral(maturity, pool.state, xDecrease, zIncrease);\n        dueOut.startBlock = BlockNumber.get();\n\n        Callback.borrow(collateral, dueOut.collateral, data);\n\n        id = pool.dues[dueTo].insert(dueOut);\n\n        pool.state.reserves.asset -= xDecrease;\n        pool.state.reserves.collateral += dueOut.collateral;\n        pool.state.totalDebtCreated += dueOut.debt;\n\n        pool.state.x -= xDecrease;\n        pool.state.y += yIncrease;\n        pool.state.z += zIncrease;\n\n        asset.safeTransfer(assetTo, xDecrease);\n\n        emit Sync(maturity, pool.state.x, pool.state.y, pool.state.z);\n        emit Borrow(maturity, msg.sender, assetTo, dueTo, xDecrease, id, dueOut);\n    }\n\n    /// @inheritdoc IPair\n    function pay(\n        uint256 maturity,\n        address to,\n        address owner,\n        uint256[] memory ids,\n        uint112[] memory assetsIn,\n        uint112[] memory collateralsOut,\n        bytes calldata data\n    ) external override lock returns (uint128 assetIn, uint128 collateralOut) {\n        require(block.timestamp < maturity, 'E202');\n        require(ids.length == assetsIn.length && ids.length == collateralsOut.length, 'E205');\n        require(to != address(0), 'E201');\n        require(to != address(this), 'E204');\n\n        Pool storage pool = pools[maturity];\n\n        Due[] storage dues = pool.dues[owner];\n\n        for (uint256 i; i < ids.length; i++) {\n            Due storage due = dues[ids[i]];\n            require(due.startBlock != BlockNumber.get(), 'E207');\n            if (owner != msg.sender) require(collateralsOut[i] == 0, 'E213');\n            PayMath.checkProportional(assetsIn[i], collateralsOut[i], due);\n            due.debt -= assetsIn[i];\n            due.collateral -= collateralsOut[i];\n            assetIn += assetsIn[i];\n            collateralOut += collateralsOut[i];\n        }\n        if (assetIn > 0) Callback.pay(asset, assetIn, data);\n\n        pool.state.reserves.asset += assetIn;\n        pool.state.reserves.collateral -= collateralOut;\n\n        if (collateralOut > 0) collateral.safeTransfer(to, collateralOut);\n\n        emit Pay(maturity, msg.sender, to, owner, ids, assetsIn, collateralsOut, assetIn, collateralOut);\n    }\n}\ncontract TimeswapFactory is IFactory {\n    /* ===== MODEL ===== */\n\n    /// @inheritdoc IFactory\n    address public override owner;\n    /// @inheritdoc IFactory\n    address public override pendingOwner;\n    /// @inheritdoc IFactory\n    uint16 public immutable override fee;\n    /// @inheritdoc IFactory\n    uint16 public immutable override protocolFee;\n\n    /// @inheritdoc IFactory\n    mapping(IERC20 => mapping(IERC20 => IPair)) public override getPair;\n\n    /* ===== INIT ===== */\n\n    /// @param _owner The chosen owner address.\n    /// @param _fee The chosen fee rate.\n    /// @param _protocolFee The chosen protocol fee rate.\n    constructor(\n        address _owner,\n        uint16 _fee,\n        uint16 _protocolFee\n    ) {\n        require(_owner != address(0), 'E101');\n        owner = _owner;\n        fee = _fee;\n        protocolFee = _protocolFee;\n    }\n\n    /* ===== UPDATE ===== */\n\n    /// @inheritdoc IFactory\n    function createPair(IERC20 asset, IERC20 collateral) external override returns (IPair pair) {\n        require(asset != collateral, 'E103');\n        require(asset != IERC20(address(0)) && collateral != IERC20(address(0)), 'E101');\n        require(getPair[asset][collateral] == IPair(address(0)), 'E104');\n\n        pair = new TimeswapPair{salt: keccak256(abi.encode(asset, collateral))}(asset, collateral, fee, protocolFee);\n\n        getPair[asset][collateral] = pair;\n\n        emit CreatePair(asset, collateral, pair);\n    }\n\n    /// @inheritdoc IFactory\n    function setOwner(address _pendingOwner) external override {\n        require(msg.sender == owner, 'E102');\n        require(_pendingOwner != address(0), 'E101');\n        pendingOwner = _pendingOwner;\n\n        emit SetOwner(_pendingOwner);\n    }\n\n    /// @inheritdoc IFactory\n    function acceptOwner() external override {\n        require(msg.sender == pendingOwner, 'E102');\n        owner = msg.sender;\n\n        emit AcceptOwner(msg.sender);\n    }\n}\n",
    "bin": []
}